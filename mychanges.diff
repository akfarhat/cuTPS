From 38bfb6c9a99fa4e599ece50c329cfe72b1da6154 Mon Sep 17 00:00:00 2001
From: Kirill Kravinsky <woyorus@gmail.com>
Date: Sat, 6 Dec 2014 20:16:24 -0500
Subject: [PATCH 01/16] merge originals removed

---
 README.md.orig                        |   72 --------------------------
 cuTPS-server/DatabaseManager.cpp.orig |   62 -----------------------
 cuTPS-server/cuTPS-server.pro.orig    |   89 ---------------------------------
 3 files changed, 223 deletions(-)
 delete mode 100644 README.md.orig
 delete mode 100644 cuTPS-server/DatabaseManager.cpp.orig
 delete mode 100644 cuTPS-server/cuTPS-server.pro.orig

diff --git a/README.md.orig b/README.md.orig
deleted file mode 100644
index 4ccd60b..0000000
--- a/README.md.orig
+++ /dev/null
@@ -1,72 +0,0 @@
-cuTPS
-=====
-
-COMP 3004 Project: Carleton University Textbook Publishing System
-
-Contributors:
--------------
-
-- Abdul-Karim Farhat
-- Kirill Kravinskiy
-- Ahmad Masoud
-- Zach Renaud
-
-
-Project Configuration:
-----------------------
-
-The project contains of 3 subprojects:
-
-<<<<<<< HEAD
-1. cuTPS-client: the client application. Outputs: cuTPS-client executable
-2. cuTPS-server: the server. Outputs: cutpsd executable
-3. cuTPS-common: common shared library. Outputs: libcutps.a static library
-=======
-	1. cuTPS-client: the client application. Outputs: cuTPS-client executable
-	2. cuTPS-server: the server. Outputs: cutpsd executable
-	3. cuTPS-common: common shared library. Outputs: libcutps.a static library
->>>>>>> FETCH_HEAD
-
-Project build path configuration:
----------------------------------
-
-Within the project's build path, following items exist:
-
-<<<<<<< HEAD
-* cuTPS-server:
-	+ /db/cutpsd.db: sqlite database used by the server
-	+ cutps.conf: configuration file. Path to the database can be changed in this file.
-
-Build instructions:
--------------------
-* import project to QTCreator
-* once asked, setup build kits (providing paths to debug and release build output directories)
-* run the build
-* following files will be produced by build:
-	/build/cuTPS-client/cuTPS-client -- the client executable
-	/build/cuTPS-server/cutpsd -- the server executable.
-=======
-	* cuTPS-server:
-		* /db/cutpsd.db: sqlite database used by the server
-		* cutps.conf: configuration file. Path to the database can be changed in this file.
-
-Build instructions:
--------------------
-	* import project to QTCreator
-	* once asked, setup build kits (providing paths to debug and release build output directories)
-	* run the build
-	* following files will be produced by build:
-		/build/cuTPS-client/cuTPS-client -- the client executable
-		/build/cuTPS-server/cutpsd -- the server executable.
->>>>>>> FETCH_HEAD
-
-Run instructions:
------------------
-
-<<<<<<< HEAD
-* run the cutpsd server daemon. Ensure that the server is started and proper database file is used. (look in the standard output)
-* run the cuTPS-client
-=======
-	* run the cutpsd server daemon. Ensure that the server is started and proper database file is used. (look in the standard output)
-	* run the cuTPS-client
->>>>>>> FETCH_HEAD
diff --git a/cuTPS-server/DatabaseManager.cpp.orig b/cuTPS-server/DatabaseManager.cpp.orig
deleted file mode 100644
index 9466927..0000000
--- a/cuTPS-server/DatabaseManager.cpp.orig
+++ /dev/null
@@ -1,62 +0,0 @@
-#include "DatabaseManager.h"
-#include "TPSServerPrefs.h"
-#include <iostream>
-
-DatabaseManager::DatabaseManager(QObject *parent) :
-    QObject(parent)
-{
-}
-
-DatabaseManager::~DatabaseManager() {
-
-}
-
-bool DatabaseManager::openDB()
-{
-    db = QSqlDatabase::addDatabase("QSQLITE");
-<<<<<<< HEAD
-
-    //QString dbPath = QCoreApplication::applicationDirPath() + "/cutps.db";
-
-    QString dbPath = "/home/student/Comp3004/cuTPS/cutps.db";
-    qDebug() << "dbPath: '" << dbPath << "'";
-
-    db.setDatabaseName(dbPath);
-    return db.open();
-=======
-    QString dbPath = TPSServerPrefs::GetDbPath();
-    db.setDatabaseName(dbPath);
-
-    bool result = db.open();
-    if (!result)
-    {
-        // TODO: Throw an exception
-        qDebug() << "cannot find cutps.db in " << dbPath
-                  << "make sure the software was installed properly";
-    } else {
-        qDebug() << "using database file: " << dbPath;
-    }
-
-    return result;
->>>>>>> feature/GetRequiredBooks
-}
-
-void DatabaseManager::closeDB()
-{
-    db.close();
-}
-
-QSqlError DatabaseManager::getLastError()
-{
-    return db.lastError();
-}
-
-bool DatabaseManager::runQuery(const QString &queryString, QSqlQuery* returnQuery)
-{
-    QSqlQuery query;
-    bool result = query.exec(queryString);
-
-    *returnQuery = query;
-    return result;
-}
-
diff --git a/cuTPS-server/cuTPS-server.pro.orig b/cuTPS-server/cuTPS-server.pro.orig
deleted file mode 100644
index 1e8fd64..0000000
--- a/cuTPS-server/cuTPS-server.pro.orig
+++ /dev/null
@@ -1,89 +0,0 @@
-#-------------------------------------------------
-#
-# Project created by QtCreator 2014-10-30T18:30:51
-#
-#-------------------------------------------------
-
-QT       += core network sql
-QT       -= gui
-
-TARGET = cutpsd
-CONFIG   += console
-CONFIG   += -std=gnu++11
-CONFIG   -= app_bundle
-
-TEMPLATE = app
-
-SOURCES += main.cpp \
-    DatabaseManager.cpp \
-    Server.cpp \
-    ClientTaskHandling/AddBookTask.cpp \
-    ClientTaskHandling/AddCourseTask.cpp \
-    ClientTaskHandling/GetBookDetailsTask.cpp \
-    ClientTaskHandling/GetRequiredBooksTask.cpp \
-    ClientTaskHandling/LoginTask.cpp \
-    ClientTaskHandling/SubmitOrderTask.cpp \
-    ClientTaskHandling/WorkerTask.cpp \
-    ServerNetworking/ServerAsync.cpp \
-    ServerNetworking/NetClient.cpp \
-    ServerPrefs.cpp \
-    ClientTaskHandling/TaskAbsFactory.cpp \
-    ClientTaskHandling/LoginTaskFactory.cpp \
-    ClientTaskHandling/ContentMgrTaskFactory.cpp \
-    ClientTaskHandling/UserTaskFactory.cpp \
-    ClientTaskHandling/AdminTaskFactory.cpp \
-    ClientTaskHandling/GenerateReportTask.cpp \
-    ClientTaskHandling/SUTaskFactory.cpp
-
-HEADERS += \
-    DatabaseManager.h \
-    Server.h \
-    ClientTaskHandling/AddBookTask.h \
-    ClientTaskHandling/AddCourseTask.h \
-    ClientTaskHandling/GetBookDetailsTask.h \
-    ClientTaskHandling/GetRequiredBooksTask.h \
-    ClientTaskHandling/LoginTask.h \
-    ClientTaskHandling/SubmitOrderTask.h \
-    ClientTaskHandling/WorkerTask.h \
-    ClientTaskHandling/TaskAbsFactory.h \
-    ClientTaskHandling/LoginTaskFactory.h \
-    ClientTaskHandling/ContentMgrTaskFactory.h \
-    ClientTaskHandling/UserTaskFactory.h \
-    ClientTaskHandling/AdminTaskFactory.h \
-    ClientTaskHandling/GenerateReportTask.h \
-<<<<<<< Updated upstream
-    ClientTaskHandling/SUTaskFactory.h
-=======
-    ServerNetworking/ServerAsync.h \
-    ServerNetworking/NetClient.h \
-    ServerAPI.h \
-    Storage.h  \
-    ServerPrefs.h
->>>>>>> Stashed changes
-
-OTHER_FILES += \
-    db/cutpsd.db
-
-macx {
-QMAKE_CXXFLAGS += -std=c++0x -stdlib=libc++
-QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.7
-}
-
-unix:!macx {
-QMAKE_CXXFLAGS += -std=c++0x
-}
-
-# copy db folder to the build path
-copydata.commands = $(COPY_DIR) $$PWD/db $$OUT_PWD
-first.depends = $(first) copydata
-export(first.depends)
-export(copydata.commands)
-QMAKE_EXTRA_TARGETS += first copydata
-
-
-win32:CONFIG(release, debug|release): LIBS += -L$$OUT_PWD/../cuTPS-common/release/ -lcutps
-else:win32:CONFIG(debug, debug|release): LIBS += -L$$OUT_PWD/../cuTPS-common/debug/ -lcutps
-else:unix: LIBS += -L$$OUT_PWD/../cuTPS-common/ -lcutps
-
-INCLUDEPATH += $$PWD/../cuTPS-common
-DEPENDPATH += $$PWD/../cuTPS-common
-- 
1.7.9.5


From 6f40c4699d91685af9567caa45126cdb461d3d7d Mon Sep 17 00:00:00 2001
From: Kirill Kravinsky <woyorus@gmail.com>
Date: Sat, 6 Dec 2014 20:17:36 -0500
Subject: [PATCH 02/16] added patches for selecting remote or local server

---
 patch-local-server.diff  |   13 +++++++++++++
 patch-remote-server.diff |   13 +++++++++++++
 2 files changed, 26 insertions(+)
 create mode 100644 patch-local-server.diff
 create mode 100644 patch-remote-server.diff

diff --git a/patch-local-server.diff b/patch-local-server.diff
new file mode 100644
index 0000000..565302b
--- /dev/null
+++ b/patch-local-server.diff
@@ -0,0 +1,13 @@
+diff --git a/cuTPS-client/main.cpp b/cuTPS-client/main.cpp
+index de01e8c..1314651 100644
+--- a/cuTPS-client/main.cpp
++++ b/cuTPS-client/main.cpp
+@@ -15,7 +15,7 @@ int main(int argc, char *argv[])
+     // TODO: move this away frome here and connect on login button click
+     QHostAddress localhost(QHostAddress::LocalHost);
+     QHostAddress remoteSrv("192.241.250.122"); // this server should be always up for testing purposes
+-    network.connectToServer(remoteSrv, 12754);
++    network.connectToServer(localhost, 12754);
+ 
+     LoginControl loginCtrl(&network);
+ 
diff --git a/patch-remote-server.diff b/patch-remote-server.diff
new file mode 100644
index 0000000..8be8654
--- /dev/null
+++ b/patch-remote-server.diff
@@ -0,0 +1,13 @@
+diff --git a/cuTPS-client/main.cpp b/cuTPS-client/main.cpp
+index de01e8c..1314651 100644
+--- a/cuTPS-client/main.cpp
++++ b/cuTPS-client/main.cpp
+@@ -15,7 +15,7 @@ int main(int argc, char *argv[])
+     // TODO: move this away frome here and connect on login button click
+     QHostAddress localhost(QHostAddress::LocalHost);
+     QHostAddress remoteSrv("192.241.250.122"); // this server should be always up for testing purposes
+-    network.connectToServer(localhost, 12754);
++    network.connectToServer(remoteSrv, 12754);
+ 
+     LoginControl loginCtrl(&network);
+ 
-- 
1.7.9.5


From a49eaddefbe9404d60c883570d6013f6aae7e95d Mon Sep 17 00:00:00 2001
From: Kirill Kravinsky <woyorus@gmail.com>
Date: Sun, 7 Dec 2014 07:10:04 -0500
Subject: [PATCH 03/16] - API updated - 64 bit support

---
 cuTPS-client/AddBookControl.h                      |    2 +-
 cuTPS-client/AddCourseControl.h                    |    2 +-
 cuTPS-client/AddRequiredBookWindow.cpp             |    8 +-
 cuTPS-client/CartRequestsAPI.cpp                   |    3 +-
 cuTPS-client/ClientNetworkHandler.cpp              |  314 ++++++++++++++++++--
 cuTPS-client/ClientNetworkHandler.h                |   73 +++--
 cuTPS-client/CourseDetailsWindow.cpp               |   22 +-
 cuTPS-client/Login.cpp                             |    2 +-
 cuTPS-client/LoginControl.cpp                      |    2 +-
 cuTPS-client/LoginControl.h                        |    2 +-
 cuTPS-client/ManageContentListWindow.cpp           |    8 +-
 cuTPS-client/SubmitOrderControl.h                  |    2 +-
 cuTPS-client/Tests.h                               |    7 +-
 cuTPS-client/ViewBookDetailsControl.h              |    2 +-
 cuTPS-client/ViewRequiredBooksControl.cpp          |    3 +-
 cuTPS-client/ViewRequiredBooksControl.h            |    2 +-
 cuTPS-client/main.cpp                              |    1 -
 cuTPS-common/Defines.h                             |   50 +++-
 cuTPS-common/Entity/Chapter.cpp                    |   57 +++-
 cuTPS-common/Entity/Chapter.h                      |   28 +-
 cuTPS-common/Entity/ContentManager.cpp             |    5 +-
 cuTPS-common/Entity/ContentManager.h               |    6 +-
 cuTPS-common/Entity/Course.cpp                     |   69 ++---
 cuTPS-common/Entity/Course.h                       |   17 +-
 cuTPS-common/Entity/DeliveryInfo.cpp               |    4 +-
 cuTPS-common/Entity/NetMessage.cpp                 |    4 +-
 cuTPS-common/Entity/NetMessage.h                   |    6 +-
 cuTPS-common/Entity/NetRequest.cpp                 |   10 +-
 cuTPS-common/Entity/NetResponse.cpp                |   10 +-
 cuTPS-common/Entity/Order.cpp                      |    4 +-
 cuTPS-common/Entity/Section.cpp                    |   59 +++-
 cuTPS-common/Entity/Section.h                      |   32 +-
 cuTPS-common/Entity/SellableItem.cpp               |   63 ++--
 cuTPS-common/Entity/SellableItem.h                 |   24 +-
 cuTPS-common/Entity/Textbook.cpp                   |   52 +++-
 cuTPS-common/Entity/Textbook.h                     |   20 +-
 cuTPS-common/Entity/User.cpp                       |   24 +-
 cuTPS-common/Entity/User.h                         |   40 ++-
 cuTPS-common/Utils.h                               |   52 ----
 cuTPS-common/cuTPS-common.pro                      |    1 -
 cuTPS-server/ClientTaskHandling/AddBookTask.cpp    |   38 ---
 cuTPS-server/ClientTaskHandling/AddBookTask.h      |   18 --
 cuTPS-server/ClientTaskHandling/AddItemTask.cpp    |   76 +++++
 cuTPS-server/ClientTaskHandling/AddItemTask.h      |   17 ++
 cuTPS-server/ClientTaskHandling/AddUserTask.cpp    |   39 +++
 cuTPS-server/ClientTaskHandling/AddUserTask.h      |   14 +
 .../ClientTaskHandling/AdminTaskFactory.cpp        |   14 +-
 cuTPS-server/ClientTaskHandling/AdminTaskFactory.h |    2 +-
 cuTPS-server/ClientTaskHandling/BanUserTask.cpp    |   35 +++
 cuTPS-server/ClientTaskHandling/BanUserTask.h      |   17 ++
 .../ClientTaskHandling/ContentMgrTaskFactory.cpp   |   27 +-
 .../ClientTaskHandling/ContentMgrTaskFactory.h     |    2 +-
 .../ClientTaskHandling/GetAllBooksTask.cpp         |   53 ++++
 cuTPS-server/ClientTaskHandling/GetAllBooksTask.h  |   14 +
 .../ClientTaskHandling/GetAllCoursesTask.cpp       |   47 +++
 .../ClientTaskHandling/GetAllCoursesTask.h         |   14 +
 .../ClientTaskHandling/GetRequiredBooksTask.cpp    |    7 +
 .../ClientTaskHandling/GetRequiredBooksTask.h      |    3 -
 .../ClientTaskHandling/LoginTaskFactory.cpp        |    4 +-
 cuTPS-server/ClientTaskHandling/LoginTaskFactory.h |    2 +-
 cuTPS-server/ClientTaskHandling/RmItemTask.cpp     |   56 ++++
 cuTPS-server/ClientTaskHandling/RmItemTask.h       |   17 ++
 cuTPS-server/ClientTaskHandling/SUTaskFactory.cpp  |   33 +-
 cuTPS-server/ClientTaskHandling/SUTaskFactory.h    |    2 +-
 cuTPS-server/ClientTaskHandling/TaskAbsFactory.h   |    2 +-
 .../ClientTaskHandling/UserTaskFactory.cpp         |    4 +-
 cuTPS-server/ClientTaskHandling/UserTaskFactory.h  |    2 +-
 cuTPS-server/Server.cpp                            |   22 +-
 cuTPS-server/Server.h                              |    4 +-
 cuTPS-server/ServerNetworking/NetClient.cpp        |   11 +-
 cuTPS-server/Storage.h                             |    3 -
 cuTPS-server/cuTPS-server.pro                      |   18 +-
 72 files changed, 1290 insertions(+), 419 deletions(-)
 delete mode 100644 cuTPS-common/Utils.h
 delete mode 100644 cuTPS-server/ClientTaskHandling/AddBookTask.cpp
 delete mode 100644 cuTPS-server/ClientTaskHandling/AddBookTask.h
 create mode 100644 cuTPS-server/ClientTaskHandling/AddItemTask.cpp
 create mode 100644 cuTPS-server/ClientTaskHandling/AddItemTask.h
 create mode 100644 cuTPS-server/ClientTaskHandling/AddUserTask.cpp
 create mode 100644 cuTPS-server/ClientTaskHandling/AddUserTask.h
 create mode 100644 cuTPS-server/ClientTaskHandling/BanUserTask.cpp
 create mode 100644 cuTPS-server/ClientTaskHandling/BanUserTask.h
 create mode 100644 cuTPS-server/ClientTaskHandling/GetAllBooksTask.cpp
 create mode 100644 cuTPS-server/ClientTaskHandling/GetAllBooksTask.h
 create mode 100644 cuTPS-server/ClientTaskHandling/GetAllCoursesTask.cpp
 create mode 100644 cuTPS-server/ClientTaskHandling/GetAllCoursesTask.h
 create mode 100644 cuTPS-server/ClientTaskHandling/RmItemTask.cpp
 create mode 100644 cuTPS-server/ClientTaskHandling/RmItemTask.h

diff --git a/cuTPS-client/AddBookControl.h b/cuTPS-client/AddBookControl.h
index 0ea9f45..6a85560 100644
--- a/cuTPS-client/AddBookControl.h
+++ b/cuTPS-client/AddBookControl.h
@@ -8,7 +8,7 @@
 #ifndef ADDBOOKCONTROL_H
 #define ADDBOOKCONTROL_H
 
-#include "Utils.h"
+#include "Defines.h"
 #include "ClientNetworkHandler.h"
 #include "Entity/Textbook.h"
 
diff --git a/cuTPS-client/AddCourseControl.h b/cuTPS-client/AddCourseControl.h
index 9172201..6948e4d 100644
--- a/cuTPS-client/AddCourseControl.h
+++ b/cuTPS-client/AddCourseControl.h
@@ -10,7 +10,7 @@
 #ifndef ADDCOURSECONTROL_H
 #define ADDCOURSECONTROL_H
 
-#include "Utils.h"
+#include "Defines.h"
 #include "CourseRequestAPI.h"
 #include "Entity/Course.h"
 
diff --git a/cuTPS-client/AddRequiredBookWindow.cpp b/cuTPS-client/AddRequiredBookWindow.cpp
index 8a594b4..1115174 100644
--- a/cuTPS-client/AddRequiredBookWindow.cpp
+++ b/cuTPS-client/AddRequiredBookWindow.cpp
@@ -21,10 +21,10 @@ void AddRequiredBookWindow::populateBooks()
 
     // TODO: request books from the CourseRequestAPI
     /////Pretending for now..//////
-    Textbook *b1 = new Textbook(1, "Book name", 55352, true, "1234567");
-    Textbook *b2 = new Textbook(2, "Another book", 2523, true, "1234568");
-    Textbook *b3 = new Textbook(3, "Book here", 8384, true, "1234569");
-    Textbook *b4 = new Textbook(4, "Why so many books already", 88374, true, "1234570");
+    Textbook *b1 = new Textbook(1, "Book name", "Edition for noobs", "derp", 55352, true, "1234567");
+    Textbook *b2 = new Textbook(2, "Another book", "Edition for zombies", "herp", 2523, true, "1234568");
+    Textbook *b3 = new Textbook(3, "Book here", "Edition for people who love mcdonalds", "nerp", 8384, true, "1234569");
+    Textbook *b4 = new Textbook(4, "Why so many books already", "...agree", "merp mcderpson", 88374, true, "1234570");
     this->books->append(b1); this->books->append(b2); this->books->append(b3); this->books->append(b4);
     ////////////////////////////////
 
diff --git a/cuTPS-client/CartRequestsAPI.cpp b/cuTPS-client/CartRequestsAPI.cpp
index 8757ba0..0fd8612 100644
--- a/cuTPS-client/CartRequestsAPI.cpp
+++ b/cuTPS-client/CartRequestsAPI.cpp
@@ -22,9 +22,10 @@ Student* CartRequestsAPI::getStudent() {
     return student;
 }
 
+// TODO: Remove 'username' parameter
 QUuid CartRequestsAPI::getRequiredBooks(QString &username)
 {
-    return network->getRequiredBooks(username);
+    return network->getRequiredBooks();
 }
 
 
diff --git a/cuTPS-client/ClientNetworkHandler.cpp b/cuTPS-client/ClientNetworkHandler.cpp
index b930fbc..ef8b9d4 100644
--- a/cuTPS-client/ClientNetworkHandler.cpp
+++ b/cuTPS-client/ClientNetworkHandler.cpp
@@ -9,8 +9,6 @@
 #include "Entity/NetResponse.h"
 
 #include "Defines.h"
-#include "Utils.h"
-
 
 #define ASSERT_VALID                                                    \
     if (!isValid())                                                     \
@@ -19,7 +17,7 @@
         return QUuid();                                                 \
     }                                                                   \
 
-using namespace TPSNetProtocolDefs;
+using namespace TPSNetProtocolDef;
 
 ClientNetworkHandler::ClientNetworkHandler()
 {
@@ -98,7 +96,7 @@ QUuid ClientNetworkHandler::login(UserCredentials& credentials)
     return requestId;
 }
 
-QUuid ClientNetworkHandler::getRequiredBooks(QString &username)
+QUuid ClientNetworkHandler::getRequiredBooks()
 {
     ASSERT_VALID
 
@@ -108,12 +106,25 @@ QUuid ClientNetworkHandler::getRequiredBooks(QString &username)
     request.setInvocation(IGetRequiredBooks);
     request.setRequestId(requestId);
 
-    QByteArray data;
-    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
 
-    outDataStream << username;
+    outStream << request;
 
-    request.setData(data);
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
+QUuid ClientNetworkHandler::getAllCourses()
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IGetAllCourses);
+    request.setRequestId(requestId);
 
     QByteArray requestBytes;
     QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
@@ -159,6 +170,60 @@ QUuid ClientNetworkHandler::getBookDetails(const QVector<qint32>& ids)
     return requestId;
 }
 
+QUuid ClientNetworkHandler::linkTextbook(qint32 courseId, qint32 textId)
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IBookLink);
+    request.setRequestId(requestId);
+
+    QByteArray data;
+    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+
+    outDataStream << courseId << textId;
+
+    request.setData(data);
+
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
+
+    outStream << request;
+
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
+QUuid ClientNetworkHandler::unlinkTextbook(qint32 courseId, qint32 textId)
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IBookUnlink);
+    request.setRequestId(requestId);
+
+    QByteArray data;
+    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+
+    outDataStream << courseId << textId;
+
+    request.setData(data);
+
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
+
+    outStream << request;
+
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
 QUuid ClientNetworkHandler::submitOrder(Order& order)
 {
     ASSERT_VALID
@@ -240,6 +305,197 @@ QUuid ClientNetworkHandler::addBook(Textbook& text)
     return requestId;
 }
 
+QUuid ClientNetworkHandler::addChapter(qint32 textId, Chapter& c)
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IAddChapter);
+    request.setRequestId(requestId);
+
+    QByteArray data;
+    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+
+    outDataStream << textId;
+    outDataStream << c;
+
+    request.setData(data);
+
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
+
+    outStream << request;
+
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
+QUuid ClientNetworkHandler::addSection(qint32 textId, qint32 chId, Section& s)
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IAddSection);
+    request.setRequestId(requestId);
+
+    QByteArray data;
+    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+
+    outDataStream << textId << chId << s;
+
+    request.setData(data);
+
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
+
+    outStream << request;
+
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
+QUuid ClientNetworkHandler::removeBook(qint32 id)
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IRmBook);
+    request.setRequestId(requestId);
+
+    QByteArray data;
+    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+
+    outDataStream << id;
+
+    request.setData(data);
+
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
+
+    outStream << request;
+
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
+QUuid ClientNetworkHandler::removeChapter(qint32 id)
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IRmChapter);
+    request.setRequestId(requestId);
+
+    QByteArray data;
+    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+
+    outDataStream << id;
+
+    request.setData(data);
+
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
+
+    outStream << request;
+
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
+QUuid ClientNetworkHandler::removeSection(qint32 id)
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IRmSection);
+    request.setRequestId(requestId);
+
+    QByteArray data;
+    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+
+    outDataStream << id;
+
+    request.setData(data);
+
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
+
+    outStream << request;
+
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
+QUuid ClientNetworkHandler::addUser(User& u)
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IAddUser);
+    request.setRequestId(requestId);
+
+    // TODO: User serialization
+//    QByteArray data;
+//    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+
+//    outDataStream << u;
+
+//    request.setData(data);
+
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
+
+    outStream << request;
+
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
+QUuid ClientNetworkHandler::banUser(qint32 uid)
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IBanUser);
+    request.setRequestId(requestId);
+
+    QByteArray data;
+    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+
+    outDataStream << uid;
+
+    request.setData(data);
+
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
+
+    outStream << request;
+
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
 QTcpSocket::SocketState ClientNetworkHandler::getSocketState() const
 {
     return connection->state();
@@ -257,6 +513,11 @@ bool ClientNetworkHandler::isValid() const
     return isConnected() && loggedIn;
 }
 
+QSet<Textbook*>* ClientNetworkHandler::uniqueBooks(QMap<Course*, QSet<Textbook*>*>*)
+{
+
+}
+
 /* public slots */
 
 void ClientNetworkHandler::connected()
@@ -274,7 +535,7 @@ void ClientNetworkHandler::disconnected()
 void ClientNetworkHandler::readyRead()
 {
     QDataStream in(connection);
-    in.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    in.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     if (blockSize == 0)
     {
@@ -323,19 +584,22 @@ void ClientNetworkHandler::readyRead()
 
     switch (response.getInvocation()) {
 
-    case IAddBook: {
-        qDebug() << "emitting update completed evt";
-        emit updateCompleted(response.getInvocation(),
-                             response.getRequestId(),
-                             (int)response.getResponseCode());
-        break;
-    }
+    case IAddBook:
+    case IAddChapter:
+    case IAddSection:
+    case IAddCourse:
+    case IAddUser:
+    {
+        QDataStream in(response.getData(), QIODevice::ReadOnly);
+
+        qint32 id;
+        in >> id;
 
-    case IAddCourse: {
-        qDebug() << "emitting update completed evt";
-        emit updateCompleted(response.getInvocation(),
-                             response.getRequestId(),
-                             response.getResponseCode());
+        qDebug() << "emitting update completed evt. id=" << id;
+        emit updateCompleted(response.getRequestId(),
+                             (int)response.getResponseCode(),
+                             response.getInvocation(),
+                             id);
         break;
     }
 
@@ -375,9 +639,11 @@ void ClientNetworkHandler::readyRead()
             vec->append(id);
         }
 
-        emit textbookLookupCompleted(response.getRequestId(),
-                                     response.getResponseCode(),
-                                     vec);
+        // TODO: implement map reconstruct
+
+        //emit textbookLookupCompleted(response.getRequestId(),
+        //                             response.getResponseCode(),
+        //                             vec);
         break;
     }
 
diff --git a/cuTPS-client/ClientNetworkHandler.h b/cuTPS-client/ClientNetworkHandler.h
index d2ee804..3e572d0 100644
--- a/cuTPS-client/ClientNetworkHandler.h
+++ b/cuTPS-client/ClientNetworkHandler.h
@@ -8,7 +8,7 @@
 //     requests to the server.
 
 // === API change history === //
-// Dec, 2:      --- getBookDetails() now take just the IDs of textbooks
+// Dec, 2:      --- getBookDetails() now takes just the IDs of textbooks
 //                  getBookDetail(qint32) <- will return a single textbook with that id
 //                  getBookDetail(QVector<qint32>&) <- will return a vector of books.
 //
@@ -19,10 +19,7 @@
 //
 //              --- void textbookLookupCompleted(QUuid requestId, int code, QVector<qint32>* booksIds)
 //                  also returns a vector of book ids. You can pass the output right to getBookDetails() 
-//                  to receive details about all of them in one bunch, via textbookDetailsReceived().
-//
-//              --- getRequiredBooks() now returns only IDs of books for performance reasons.
-//                  Use chained requests to receive ids first, then details.
+//                  to receive details about all of them in one bunch, via textbookDetailsReceived().'''''''''''''''''''
 //
 //                  <woyorus>
 
@@ -32,15 +29,20 @@
 #include <QTcpSocket>
 #include <QUuid>
 #include <QVector>
+#include <QMap>
 #include <QDataStream>
 
 #include "Defines.h"
-#include "Utils.h"
+
 #include "Entity/Textbook.h"
+#include "Entity/Chapter.h"
+#include "Entity/Section.h"
 #include "Entity/Order.h"
 #include "Entity/Course.h"
+#include "Entity/User.h"
 
-using namespace TPSNetProtocolDefs;
+using namespace TPSNetProtocolDef;
+using namespace TPSDef;
 
 // metatype declarations for correct signalling
 Q_DECLARE_METATYPE(QVector<Textbook*>*)
@@ -66,31 +68,62 @@ public:
     // Login to the server - request a session id
     QUuid login(UserCredentials&);
 
-    // Request the list of available textbooks
-    // for the user with this session.
-    // TODO: it makes sense to return course objects with linked textbooks
-    QUuid getRequiredBooks(QString&);
-
-    // Request the details of a particular textbook id
+    // What: Request the list of _available_ (available==true) textbooks
+    // for the user on this session. Note: textbooks include sections and chapters
+    // Related reply signal: textbookDetailsReceived(QUuid,int,QMap<Course, QSet<Textbook>>*)
+    // -- use QSet<Textbook>* uniqueBooks(QMap<Course, QSet<Textbook>*); to get books only
+    QUuid getRequiredBooks();
+
+    // What: Request for all the books registered (including unavailable ones)
+    // Note: textbooks include sections and chapters
+    // Related reply signal: textbookDetailsReceived(QUuid,int,QMap<Course, QSet<Textbook>>*)
+    // -- use QSet<Textbook>* uniqueBooks(QMap<Course, QSet<Textbook>*); to get books only
+    QUuid getAllBooks();
+    QUuid getAllCourses();
+
+    // What: Request the details (i.e. Textbook object itself) of a particular textbook id
+    // Note: textbooks include sections and chapters
+    // Related reply signal: textbookDetailsReceived(QUuid,int,QMap<Course, QSet<Textbook>>*)
+    // -- use QSet<Textbook>* uniqueBooks(QMap<Course, QSet<Textbook>*); to get the book only
     QUuid getBookDetails(const qint32 id);
 
-    // Request details for a list of textbook ids
-    QUuid getBookDetails(const QVector<qint32>& ids);
+    // What: Request details for a list of textbook ids
+    // Note: textbooks include sections and chapters
+    // Related reply signal: textbookDetailsReceived(QUuid,int,QMap<Course, QSet<Textbook>>*)
+    // -- use QSet<Textbook>* uniqueBooks(QMap<Course, QSet<Textbook>*); to get the books only
+    QUuid getBookDetails(const QVector<int>& ids);
 
-    // Submit an order to the server
+    // What: Submit an order to the server
+    // Reltated reply signal: orderStatusReceived(QUuid, int);
     QUuid submitOrder(Order&);
 
-    // Add a course to the content availability of the system
+    // What: Add a new course to the system.
+    // Related reply signal: updateCompleted(QUuid, int, InvocationDescriptor, qint32)
     QUuid addCourse(Course&);
+    QUuid linkTextbook(qint32 courseId, qint32 textId);
+    QUuid unlinkTextbook(qint32 courseId, qint32 textId);
 
     // Add a textbook to the content availability of the system
+    // Related reply signal: updateCompleted(QUuid, int, InvocationDescriptor, qint32)
     QUuid addBook(Textbook&);
+    QUuid addChapter(qint32 textId, Chapter&);
+    QUuid addSection(qint32 textId, qint32 chId, Section&);
+
+    QUuid removeBook(qint32 id);
+    QUuid removeChapter(qint32 id);
+    QUuid removeSection(qint32 id);
+
+    QUuid addUser(User&);
+    QUuid banUser(qint32 uid);
 
     // Access modifiers for the state of the connection to the server
     QTcpSocket::SocketState getSocketState() const;
     bool isConnected() const;
     bool isValid() const; // i.e. connected && logged in
 
+    // TODO: implement
+    static QSet<Textbook*>* uniqueBooks(QMap<Course*, QSet<Textbook*>*>*);
+
 signals:
     // Events emitted regarding the network events
     void connectedToServer();
@@ -102,10 +135,12 @@ signals:
     void loginSuccessful(QUuid requestId, Role userRole);
     void loginFailed(QUuid requestId);
     void orderStatusReceived(QUuid requestId, int code);
-    void updateCompleted(TPSNetProtocolDefs::InvocationDescriptor, QUuid requestId, int code);
+    void updateCompleted(QUuid requestId, int code, InvocationDescriptor invo, qint32 id);
+
     // Books in vector are created using new. Delete them using delete after use.
     void textbookDetailsReceived(QUuid requestId, int code, QVector<Textbook*>* books);
-    void textbookLookupCompleted(QUuid requestId, int code, QVector<qint32>* booksIds);
+    void textbookLookupCompleted(QUuid requestId, int code, QMap<Course*, QSet<Textbook*>*>*);
+    void courseLookupCompleted(QUuid requestId, int code, QVector<Course*>* courses);
 
 public slots:
     // Event handlers for events emitted by the TCP socket object
diff --git a/cuTPS-client/CourseDetailsWindow.cpp b/cuTPS-client/CourseDetailsWindow.cpp
index effcd43..87848a3 100644
--- a/cuTPS-client/CourseDetailsWindow.cpp
+++ b/cuTPS-client/CourseDetailsWindow.cpp
@@ -41,12 +41,14 @@ void CourseDetailsWindow::displayCourseList()
     this->courses = new QVector<Course*>();
 
     /// TODO: This stuff will come from a request to the server for courses ///
-    QVector<Textbook*> *books = new QVector<Textbook*>();
-    books->append(new Textbook(1, "Crazy Diagrams", 30593, true, "1234567"));
-    books->append(new Textbook(2, "Whoa diagrams, bro", 435943, true, "1234568"));
-    books->append(new Textbook(3, "More diagrams", 2342356, true, "1234569"));
-    Course *c = new Course("Comp 3004", "Advanced Diagrams", *books);
-    Course *c2 = new Course("Comp 3005", "Database stuff", *books);
+    QVector<int> books;
+    books.append(1);
+    books.append(2);
+    books.append(3);
+    Course *c = new Course("Comp 3004", "Advanced Diagrams");
+    Course *c2 = new Course("Comp 3005", "Database stuff");
+    c->addRequiredTextIds(books);
+    c2->addRequiredTextIds(books);
     //////////////////////////////////////////////////////////////////////
 
     this->courses->append(c);
@@ -75,8 +77,8 @@ void CourseDetailsWindow::displayCourseDetails(Course *c)
     this->ui->courseNameEdit->setText(c->getCourseName());
 
     this->ui->bookList->clear();
-    for (Textbook *book: *(c->getRequiredTexts())) {
-        this->ui->bookList->addItem(book->getTitle());
+    for (int id: (c->getRequiredTextIds())) {
+        this->ui->bookList->addItem(QString::number(id));
     }
 }
 
@@ -132,12 +134,12 @@ void CourseDetailsWindow::on_deleteBookButton_clicked()
 
     Course *c = this->courses->at(courseIndex);
 
-    QVector<qint32> *requiredBookIds = c->getRequiredTextsIds();
+    const QVector<qint32>& requiredBookIds = c->getRequiredTextIds();
     int courseId = c->getId();
 
     int bookIndex = this->ui->bookList->currentIndex().row();
 
-    emit removeRequiredBook((int)requiredBookIds->at(bookIndex), courseId);
+    emit removeRequiredBook((int)requiredBookIds.at(bookIndex), courseId);
 }
 
 void CourseDetailsWindow::on_addBookButton_clicked()
diff --git a/cuTPS-client/Login.cpp b/cuTPS-client/Login.cpp
index 29feac6..45c8fbf 100644
--- a/cuTPS-client/Login.cpp
+++ b/cuTPS-client/Login.cpp
@@ -1,6 +1,6 @@
 #include "Login.h"
 #include "ui_Login.h"
-#include "Utils.h"
+#include "Defines.h"
 #include "LoginControl.h"
 
 #include <QDebug>
diff --git a/cuTPS-client/LoginControl.cpp b/cuTPS-client/LoginControl.cpp
index 9b24624..8dadc08 100644
--- a/cuTPS-client/LoginControl.cpp
+++ b/cuTPS-client/LoginControl.cpp
@@ -50,7 +50,7 @@ void LoginControl::loginSuccessful(QUuid requestId, Role userRole) {
             Student *newStudent = new Student(15, "Joe Smith", "joesmith", 10101010);
 
             // Create dummy items and add them to the shopping cart
-            SellableItem *t1 = new Textbook(1, "The First Book", 554563, 1, "123456678");
+            SellableItem *t1 = new Textbook(1, "The First Book", "1st edition", "Someone", 554563, true, "123456678");
             SellableItem *c1 = new Chapter(5, NULL, 1, "Chapter One", 432, true);
             SellableItem *s1 = new Section(9, NULL, 1, "Section One", 325, true);
 
diff --git a/cuTPS-client/LoginControl.h b/cuTPS-client/LoginControl.h
index c8410e6..0adf36a 100644
--- a/cuTPS-client/LoginControl.h
+++ b/cuTPS-client/LoginControl.h
@@ -7,7 +7,7 @@
 #ifndef LOGINCONTROL_H
 #define LOGINCONTROL_H
 
-#include "Utils.h"
+#include "Defines.h"
 #include "Login.h"
 #include "ClientNetworkHandler.h"
 #include "ContentManagementInterface.h"
diff --git a/cuTPS-client/ManageContentListWindow.cpp b/cuTPS-client/ManageContentListWindow.cpp
index a8c00db..847a0b1 100644
--- a/cuTPS-client/ManageContentListWindow.cpp
+++ b/cuTPS-client/ManageContentListWindow.cpp
@@ -57,10 +57,10 @@ void ManageContentListWindow::displayBookList()
     // Request all books (id, title) from server
     ////////// pretend for now that this list represents actual data: /////////
     QVector<SellableItem*> *books = new QVector<SellableItem*>();
-    Textbook *t1 = new Textbook(1, "The First Book", 554563, 1, "123456678");
-    Textbook *t2 = new Textbook(2, "The Second Book", 34536, 1, "123456679");
-    Textbook *t3 = new Textbook(3, "The Third Book", 2345, 1, "123456680");
-    Textbook *t4 = new Textbook(4, "The Fourth Book", 2234556, 1, "123456681");
+    Textbook *t1 = new Textbook(1, "The First Book", "1st", "Some Dorc", 554563, 1, "123456678");
+    Textbook *t2 = new Textbook(2, "The Second Book", "2nd", "Some Corc", 34536, 1, "123456679");
+    Textbook *t3 = new Textbook(3, "The Third Book", "3rd", "Some Borc", 2345, 1, "123456680");
+    Textbook *t4 = new Textbook(4, "The Fourth Book", "999th", "Some Pork :D", 2234556, 1, "123456681");
     books->append(t1); books->append(t2); books->append(t3); books->append(t4);
     /////////////////////////////////////////////////////////////////////////
 
diff --git a/cuTPS-client/SubmitOrderControl.h b/cuTPS-client/SubmitOrderControl.h
index 47f8685..5af8b96 100644
--- a/cuTPS-client/SubmitOrderControl.h
+++ b/cuTPS-client/SubmitOrderControl.h
@@ -8,7 +8,7 @@
 #ifndef SUBMITORDERCONTROL_H
 #define SUBMITORDERCONTROL_H
 
-#include "Utils.h"
+#include "Defines.h"
 #include "ClientNetworkHandler.h"
 #include "Entity/Order.h"
 
diff --git a/cuTPS-client/Tests.h b/cuTPS-client/Tests.h
index b8976b5..f14d766 100644
--- a/cuTPS-client/Tests.h
+++ b/cuTPS-client/Tests.h
@@ -11,16 +11,15 @@
 
 #include <QDialog>
 #include <QString>
-#include "ClientNetworkHandler.h"
-#include "Utils.h"
 
+#include "ClientNetworkHandler.h"
+#include "Defines.h"
 #include "LoginControl.h"
 #include "ViewRequiredBooksControl.h"
 #include "ViewBookDetailsControl.h"
 #include "SubmitOrderControl.h"
 #include "AddCourseControl.h"
 #include "AddBookControl.h"
-#include "Defines.h"
 
 namespace Ui {
     class Tests;
@@ -54,7 +53,7 @@ class Tests : public QDialog
 
         void orderStatusReceived(QUuid, int);
 
-        void updateCompleted(TPSNetProtocolDefs::InvocationDescriptor, QUuid, int);
+        void updateCompleted(TPSNetProtocolDef::InvocationDescriptor, QUuid, int);
 
         void textbookDetailsReceived(QUuid, int, QVector<Textbook*>*);
 
diff --git a/cuTPS-client/ViewBookDetailsControl.h b/cuTPS-client/ViewBookDetailsControl.h
index c434d44..11f66d4 100644
--- a/cuTPS-client/ViewBookDetailsControl.h
+++ b/cuTPS-client/ViewBookDetailsControl.h
@@ -8,7 +8,7 @@
 #ifndef VIEWBOOKDETAILSCONTROL_H
 #define VIEWBOOKDETAILSCONTROL_H
 
-#include "Utils.h"
+#include "Defines.h"
 #include "ClientNetworkHandler.h"
 #include "Entity/Textbook.h"
 
diff --git a/cuTPS-client/ViewRequiredBooksControl.cpp b/cuTPS-client/ViewRequiredBooksControl.cpp
index 198e1dc..6f72e89 100644
--- a/cuTPS-client/ViewRequiredBooksControl.cpp
+++ b/cuTPS-client/ViewRequiredBooksControl.cpp
@@ -7,6 +7,7 @@ ViewRequiredBooksControl::~ViewRequiredBooksControl() {
 
 }
 
+// TODO: Remove 'username' parameter, unused.
 void ViewRequiredBooksControl::getRequiredBooks(QUuid &reqId, QString& username) {
-    reqId = network.getRequiredBooks(username);
+    reqId = network.getRequiredBooks();
 }
diff --git a/cuTPS-client/ViewRequiredBooksControl.h b/cuTPS-client/ViewRequiredBooksControl.h
index a75b4a7..2a678e6 100644
--- a/cuTPS-client/ViewRequiredBooksControl.h
+++ b/cuTPS-client/ViewRequiredBooksControl.h
@@ -8,7 +8,7 @@
 #ifndef VIEWREQUIREDBOOKSCONTROL_H
 #define VIEWREQUIREDBOOKSCONTROL_H
 
-#include "Utils.h"
+#include "Defines.h"
 #include "ClientNetworkHandler.h"
 
 class ViewRequiredBooksControl {
diff --git a/cuTPS-client/main.cpp b/cuTPS-client/main.cpp
index de01e8c..4288310 100644
--- a/cuTPS-client/main.cpp
+++ b/cuTPS-client/main.cpp
@@ -2,7 +2,6 @@
 #include "LoginControl.h"
 #include <QApplication>
 
-
 int main(int argc, char *argv[])
 {
     QApplication a(argc, argv);
diff --git a/cuTPS-common/Defines.h b/cuTPS-common/Defines.h
index a89932a..8caf0de 100644
--- a/cuTPS-common/Defines.h
+++ b/cuTPS-common/Defines.h
@@ -8,8 +8,10 @@
 #include "libcutps_global.h"
 
 #include <QDataStream>
+#include <QUuid>
+#include <QString>
 
-namespace TPSNetProtocolDefs {
+namespace TPSNetProtocolDef {
 
 static const QDataStream::Version PROTOCOL_VER = QDataStream::Qt_4_8;
 static const qint32 PROTOCOL_MAGIC = 0xDEADBEEF;
@@ -18,10 +20,21 @@ enum InvocationDescriptor {
     ILogin,
     IGetRequiredBooks,
     IGetBookDetails,
+    IGetAllCourses,
     ISubmitOrder,
     IAddCourse,
     IAddBook,
+    IAddChapter,
+    IAddSection,
+    IRmBook,
+    IRmChapter,
+    IRmSection,
+    IBookLink,
+    IBookUnlink,
     IGenerateReport,
+    IGetAllBooks,
+    IAddUser,
+    IBanUser,
     IGoodbye
 };
 
@@ -35,4 +48,39 @@ enum UsrPermissionGroup {
 
 }
 
+namespace TPSDef {
+
+enum ResponseCode {
+    Fail,
+    Success
+};
+
+enum Role {
+    None,
+    StudentUser,
+    ContentManagerUser,
+    AdministratorUser
+};
+
+// Information returned by the server for requests
+struct ServerResponse {
+    QUuid sessionID;
+    ResponseCode code;
+    QString message;
+};
+
+// For user authentication
+struct UserCredentials {
+    QString username;
+    QString password;
+};
+
+// For session identification
+struct SessionCredentials {
+    QString username;
+    int sessionID;
+};
+
+}
+
 #endif // DEFINES_H
diff --git a/cuTPS-common/Entity/Chapter.cpp b/cuTPS-common/Entity/Chapter.cpp
index f9c8465..2d56852 100644
--- a/cuTPS-common/Entity/Chapter.cpp
+++ b/cuTPS-common/Entity/Chapter.cpp
@@ -5,7 +5,10 @@
 Chapter::Chapter() {}
 
 Chapter::Chapter(Chapter& src)
-    : SellableItem(src.getId(), src.getName(), src.getPriceCents(), src.getAvailability()),
+    : SellableItem(src.getId(),
+                   src.getName(),
+                   src.getPriceCents(),
+                   src.getAvailability()),
       parentTextbook(src.getParentTextbook()),
       number(src.getChapterNumber())
 {
@@ -15,10 +18,25 @@ Chapter::Chapter(Chapter& src)
     }
 }
 
-Chapter::Chapter(int id, Textbook* textbook, int chNumber, QString name, int price, bool isAvailable) : SellableItem(id, name, price, isAvailable), parentTextbook(textbook), number(chNumber) {
+Chapter::Chapter(qint32 id,
+                 Textbook* textbook,
+                 quint16 chNumber,
+                 QString name,
+                 quint32 price,
+                 bool available)
+    : SellableItem(id, name, price, available),
+      parentTextbook(textbook), number(chNumber)
+{
 }
 
-Chapter::Chapter(Textbook* textbook, int chNumber, QString name, int price) :  SellableItem(name, price), parentTextbook(textbook), number(chNumber) {
+Chapter::Chapter(Textbook* textbook,
+                 quint16 chNumber,
+                 QString name,
+                 quint32 price,
+                 bool available)
+    :  SellableItem(name, price, available),
+      parentTextbook(textbook), number(chNumber)
+{
 }
 
 Chapter::~Chapter() {
@@ -35,11 +53,11 @@ void Chapter::setParentTextbook(Textbook *newTextbook) {
     parentTextbookId = newTextbook->getId();
 }
 
-int Chapter::getChapterNumber() const {
+quint16 Chapter::getChapterNumber() const {
     return number;
 }
 
-void Chapter::setChapterNumber(int newNumber) {
+void Chapter::setChapterNumber(quint16 newNumber) {
     number = newNumber;
 }
 
@@ -62,6 +80,16 @@ QString Chapter::getDetails() const {
     return details;
 }
 
+qint32 Chapter::getParentTextbookId() const
+{
+    return parentTextbookId;
+}
+
+void Chapter::setParentTextbookId(const qint32 value)
+{
+    parentTextbookId = value;
+}
+
 void Chapter::addSection(const Section& s)
 {
     Section* s_copy = new Section(s);
@@ -89,14 +117,16 @@ int Chapter::numSections() const
 
 QDataStream& operator<<(QDataStream& os, const Chapter& c)
 {
-    os.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     // Insert chapter
     os << dynamic_cast<const SellableItem&>(c);
-    os << static_cast<qint32>(c.number);
-    os << static_cast<qint32>(c.parentTextbookId);
+    os << c.number; // quint16
+    os << c.parentTextbookId; // qint32
+
     // Followed by number of sections
-    os << static_cast<qint32>(c.numSections());
+    os << c.numSections(); // quint16
+
     // And every section
     for (Section* s : c.sections) {
         os << *s;
@@ -107,16 +137,15 @@ QDataStream& operator<<(QDataStream& os, const Chapter& c)
 
 QDataStream& operator>>(QDataStream& is, Chapter& c)
 {
-    is.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     // Read chapter
     is >> dynamic_cast<SellableItem&>(c);
-    qint32 parentId, chNumber, numSections;
-    is >> chNumber >> parentId;
-    c.parentTextbookId = parentId;
-    c.number = chNumber;
+    is >> c.number;
+    is >> c.parentTextbookId;
 
     // Read number of sections
+    quint16 numSections;
     is >> numSections;
 
     // Read sections
diff --git a/cuTPS-common/Entity/Chapter.h b/cuTPS-common/Entity/Chapter.h
index 2d1a9b0..33745fc 100644
--- a/cuTPS-common/Entity/Chapter.h
+++ b/cuTPS-common/Entity/Chapter.h
@@ -23,16 +23,32 @@ class LIBCUTPS_EXPORT Chapter: public SellableItem
 {
 public:
     Chapter();
+
     Chapter(Chapter&); // Copy cTor
-    Chapter(int, Textbook*, int, QString, int, bool);
-    Chapter(Textbook*, int, QString, int);
+
+    Chapter(qint32 id,
+            Textbook* parent,
+            quint16 number,
+            QString title,
+            quint32 price,
+            bool available);
+
+    Chapter(Textbook* parent,
+            quint16 number,
+            QString title,
+            quint32 price,
+            bool available);
+
     virtual ~Chapter();
 
     Textbook* getParentTextbook();
     void setParentTextbook(Textbook*);
 
-    int getChapterNumber() const;
-    void setChapterNumber(int);
+    quint16 getChapterNumber() const;
+    void setChapterNumber(quint16);
+
+    qint32 getParentTextbookId() const;
+    void setParentTextbookId(const qint32 value);
 
     void addSection(const Section& s);
     QVector<Section*> getSectionList();
@@ -47,8 +63,8 @@ public:
 
 private:
     Textbook* parentTextbook;
-    int number;
-    int parentTextbookId;
+    quint16 number;
+    qint32 parentTextbookId;
     QVector<Section*> sections;
 };
 
diff --git a/cuTPS-common/Entity/ContentManager.cpp b/cuTPS-common/Entity/ContentManager.cpp
index bc96848..eeaa11c 100644
--- a/cuTPS-common/Entity/ContentManager.cpp
+++ b/cuTPS-common/Entity/ContentManager.cpp
@@ -1,7 +1,8 @@
 #include "ContentManager.h"
 
-ContentManager::ContentManager(int id, QString name, QString username) : User(id, name, username) {
-
+ContentManager::ContentManager(qint32 id, QString name, QString username)
+    : User(id, name, username)
+{
 }
 
 ContentManager::~ContentManager() {}
diff --git a/cuTPS-common/Entity/ContentManager.h b/cuTPS-common/Entity/ContentManager.h
index 4bf3028..b45916b 100644
--- a/cuTPS-common/Entity/ContentManager.h
+++ b/cuTPS-common/Entity/ContentManager.h
@@ -10,9 +10,9 @@
 
 #include "libcutps_global.h"
 
-#include "User.h"
 #include <QString>
-using namespace std;
+
+#include "User.h"
 
 class LIBCUTPS_EXPORT ContentManager : public User {
 
@@ -20,7 +20,7 @@ class LIBCUTPS_EXPORT ContentManager : public User {
         QString emailAddress;
 
     public:
-        ContentManager(int, QString, QString);
+        ContentManager(qint32, QString, QString);
         ~ContentManager();
 
         QString getEmailAddress();
diff --git a/cuTPS-common/Entity/Course.cpp b/cuTPS-common/Entity/Course.cpp
index 50f5989..de0a6ae 100644
--- a/cuTPS-common/Entity/Course.cpp
+++ b/cuTPS-common/Entity/Course.cpp
@@ -1,60 +1,48 @@
 #include "Course.h"
 #include "Defines.h"
 
-Course::Course()
-{
-    code = "";
-}
-
-Course::Course(QString course)
-{
-    code = course;
-    name = "";
-}
-
 Course::Course(const QString course,
-               const QString courseName,
-               const QVector<Textbook*>& books)
+               const QString courseName)
 {
     code = course;
     name = courseName;
-
-    for (int i=0; i<books.size(); i++) {
-        requiredBooks.append(books[i]);
-        reqBooksIds.append(books[i]->getId());
-    }
 }
 
 Course::~Course() {}
 
-int Course::getId() const {
+qint32 Course::getId() const
+{
     return id;
 }
 
-void Course::setId(const int newId) {
+void Course::setId(const qint32 newId)
+{
     id = newId;
 }
 
-QString Course::getCourseCode() const {
+QString Course::getCourseCode() const
+{
     return code;
 }
 
-void Course::setCourseCode(const QString newCode) {
+void Course::setCourseCode(const QString newCode)
+{
     code = newCode;
 }
 
-void Course::addRequiredText(Textbook *book) {
-    requiredBooks.append(book);
-    reqBooksIds.append(static_cast<qint32>(book->getId()));
+void Course::addRequiredTextId(qint32 id)
+{
+    reqBooksIds.append(id);
 }
 
-QVector<Textbook*>* Course::getRequiredTexts() {
-    // Return a pointer to the vector contatining books
-    return &this->requiredBooks;
+void Course::addRequiredTextIds(const QVector<qint32>& v)
+{
+    for (int i : v) addRequiredTextId(i);
 }
 
-QVector<qint32>* Course::getRequiredTextsIds() {
-    return &this->reqBooksIds;
+const QVector<qint32>& Course::getRequiredTextIds() const
+{
+    return this->reqBooksIds;
 }
 
 QString Course::getCourseName() const
@@ -74,10 +62,10 @@ QString Course::stringRepr() const {
 
 QDataStream& operator<<(QDataStream& os, const Course& c)
 {
-    os.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     // Write course data
-    os << static_cast<qint32>(c.id)
+    os << c.id
        << c.name
        << c.code;
 
@@ -95,19 +83,14 @@ QDataStream& operator<<(QDataStream& os, const Course& c)
 
 QDataStream& operator>>(QDataStream& is, Course& c)
 {
-    is.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
-
-    qint32 courseId;
-    quint16 textCount;
-    QString name, code;
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
-    is >> courseId
-       >> name
-       >> code;
+    is >> c.id
+       >> c.name
+       >> c.code;
 
-    c.name = name;
-    c.code = code;
-    c.id = static_cast<int>(courseId);
+    quint16 textCount;
+    c.reqBooksIds.clear();
 
     is >> textCount;
 
diff --git a/cuTPS-common/Entity/Course.h b/cuTPS-common/Entity/Course.h
index aea8909..12852bc 100644
--- a/cuTPS-common/Entity/Course.h
+++ b/cuTPS-common/Entity/Course.h
@@ -20,20 +20,18 @@ using namespace std;
 class LIBCUTPS_EXPORT Course
 {
 public:
-    Course();
-    Course(const QString ccode);
-    Course(const QString ccode, const QString cname, const QVector<Textbook*>&);
+    Course(const QString ccode="UKWN0000", const QString cname="<NO_COURSE_NAME>");
     ~Course();
 
-    int getId() const;
-    void setId(const int);
+    qint32 getId() const;
+    void setId(const qint32);
 
     QString getCourseCode() const;
     void setCourseCode(const QString);
 
-    void addRequiredText(Textbook*);
-    QVector<Textbook*>* getRequiredTexts();
-    QVector<qint32>* getRequiredTextsIds();
+    void addRequiredTextId(qint32 rtextId);
+    void addRequiredTextIds(const QVector<qint32>& vec);
+    const QVector<qint32>& getRequiredTextIds() const;
 
     QString getCourseName() const;
     void setCourseName(const QString &value);
@@ -44,7 +42,7 @@ public:
     QString stringRepr() const;
 
 private:
-    int id;
+    qint32 id;
     QString code;
     QString name;
 
@@ -53,7 +51,6 @@ private:
     // I.e. freshly received course object from the server only knows how many texts
     // are required by this course + their IDs. To get actual Textbook by id, use
     // getBookDetails() API call.
-    QVector<Textbook*> requiredBooks; // TODO: make it legacy or remove?
     QVector<qint32> reqBooksIds;
 
 };
diff --git a/cuTPS-common/Entity/DeliveryInfo.cpp b/cuTPS-common/Entity/DeliveryInfo.cpp
index dc7fba9..6a075ad 100644
--- a/cuTPS-common/Entity/DeliveryInfo.cpp
+++ b/cuTPS-common/Entity/DeliveryInfo.cpp
@@ -21,14 +21,14 @@ void DeliveryInfo::setEmailAddress(QString newEmail) {
 
 QDataStream& operator<<(QDataStream& os, const DeliveryInfo& d)
 {
-    os.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
     os << d.emailAddress;
     return os;
 }
 
 QDataStream& operator>>(QDataStream& is, DeliveryInfo& d)
 {
-    is.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
     is >> d.emailAddress;
     return is;
 }
diff --git a/cuTPS-common/Entity/NetMessage.cpp b/cuTPS-common/Entity/NetMessage.cpp
index 5f9ca07..49b0bc5 100644
--- a/cuTPS-common/Entity/NetMessage.cpp
+++ b/cuTPS-common/Entity/NetMessage.cpp
@@ -17,7 +17,7 @@ void NetMessage::setRequestId(QUuid id)
     requestId = id;
 }
 
-void NetMessage::setInvocation(TPSNetProtocolDefs::InvocationDescriptor invo)
+void NetMessage::setInvocation(TPSNetProtocolDef::InvocationDescriptor invo)
 {
     invocation = invo;
 }
@@ -36,7 +36,7 @@ QUuid NetMessage::getRequestId() const
     return requestId;
 }
 
-TPSNetProtocolDefs::InvocationDescriptor NetMessage::getInvocation() const
+TPSNetProtocolDef::InvocationDescriptor NetMessage::getInvocation() const
 {
     return invocation;
 }
diff --git a/cuTPS-common/Entity/NetMessage.h b/cuTPS-common/Entity/NetMessage.h
index 9fee269..68d9f5e 100644
--- a/cuTPS-common/Entity/NetMessage.h
+++ b/cuTPS-common/Entity/NetMessage.h
@@ -17,10 +17,10 @@ public:
     virtual ~NetMessage();
 
     void    setRequestId(QUuid id);
-    void    setInvocation(TPSNetProtocolDefs::InvocationDescriptor invo);
+    void    setInvocation(TPSNetProtocolDef::InvocationDescriptor invo);
 
     QUuid   getRequestId() const;
-    TPSNetProtocolDefs::InvocationDescriptor getInvocation() const;
+    TPSNetProtocolDef::InvocationDescriptor getInvocation() const;
 
     QByteArray*     getData();  // nullptr is returned if data not present
     void            setData(const QByteArray& data); // copy-on-write enabled. (fast!)
@@ -46,7 +46,7 @@ protected:
 
     // Identifies the action to be performed for this request message, or the action
     // that has been performed for this response message.
-    TPSNetProtocolDefs::InvocationDescriptor invocation;
+    TPSNetProtocolDef::InvocationDescriptor invocation;
 
     // Holds any extra data to parametrize the request or provide response data.
     QByteArray* data;
diff --git a/cuTPS-common/Entity/NetRequest.cpp b/cuTPS-common/Entity/NetRequest.cpp
index dc53bad..7e6857e 100644
--- a/cuTPS-common/Entity/NetRequest.cpp
+++ b/cuTPS-common/Entity/NetRequest.cpp
@@ -13,13 +13,13 @@ QString NetRequest::stringRepr() const
 
 QDataStream& operator<<(QDataStream& os, const NetRequest& r)
 {
-    os.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     qint8 invocationInteger = static_cast<qint8>(r.invocation);
 
     // Do not change the sequence!
     os << (qint16) 0;
-    os << TPSNetProtocolDefs::PROTOCOL_MAGIC;
+    os << TPSNetProtocolDef::PROTOCOL_MAGIC;
     os << invocationInteger;
     os << r.requestId;
 
@@ -46,7 +46,7 @@ QDataStream& operator<<(QDataStream& os, const NetRequest& r)
 
 QDataStream& operator>>(QDataStream& is, NetRequest& r)
 {
-    is.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     qint8 invocationInteger;
     QUuid requestId;
@@ -54,14 +54,14 @@ QDataStream& operator>>(QDataStream& is, NetRequest& r)
 
     is >> magicCheck;
 
-    if (magicCheck != TPSNetProtocolDefs::PROTOCOL_MAGIC)
+    if (magicCheck != TPSNetProtocolDef::PROTOCOL_MAGIC)
         throw NetMessage::BadRequestException();
 
     is >> invocationInteger
             >> requestId
             >> dataSz;
 
-    r.setInvocation(static_cast<TPSNetProtocolDefs::InvocationDescriptor>(invocationInteger));
+    r.setInvocation(static_cast<TPSNetProtocolDef::InvocationDescriptor>(invocationInteger));
     r.setRequestId(requestId);
 
     if (dataSz > 0) {
diff --git a/cuTPS-common/Entity/NetResponse.cpp b/cuTPS-common/Entity/NetResponse.cpp
index edb1923..fbf4004 100644
--- a/cuTPS-common/Entity/NetResponse.cpp
+++ b/cuTPS-common/Entity/NetResponse.cpp
@@ -41,13 +41,13 @@ qint8 NetResponse::getResponseCode() const
 
 QDataStream& operator<<(QDataStream& os, const NetResponse& r)
 {
-    os.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     qint8 invocationInteger = static_cast<qint8>(r.invocation);
 
     // Do not change the sequence!
     os << (qint16) 0;
-    os << TPSNetProtocolDefs::PROTOCOL_MAGIC;
+    os << TPSNetProtocolDef::PROTOCOL_MAGIC;
     os << invocationInteger;
     os << r.requestId;
     os << r.sessionId;
@@ -76,7 +76,7 @@ QDataStream& operator<<(QDataStream& os, const NetResponse& r)
 
 QDataStream& operator>>(QDataStream& is, NetResponse& r)
 {
-    is.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     qint8 invocationInteger, responseCode;
     QUuid requestId, sessionId;
@@ -84,7 +84,7 @@ QDataStream& operator>>(QDataStream& is, NetResponse& r)
 
     is >> magicCheck;
 
-    if (magicCheck != TPSNetProtocolDefs::PROTOCOL_MAGIC)
+    if (magicCheck != TPSNetProtocolDef::PROTOCOL_MAGIC)
         throw NetMessage::BadRequestException();
 
     is >> invocationInteger
@@ -93,7 +93,7 @@ QDataStream& operator>>(QDataStream& is, NetResponse& r)
         >> responseCode
         >> dataSz;
 
-    r.setInvocation(static_cast<TPSNetProtocolDefs::InvocationDescriptor>(invocationInteger));
+    r.setInvocation(static_cast<TPSNetProtocolDef::InvocationDescriptor>(invocationInteger));
     r.setRequestId(requestId);
     r.setSessionId(sessionId);
     r.setResponseCode(responseCode);
diff --git a/cuTPS-common/Entity/Order.cpp b/cuTPS-common/Entity/Order.cpp
index fd3b9db..afc3d4d 100644
--- a/cuTPS-common/Entity/Order.cpp
+++ b/cuTPS-common/Entity/Order.cpp
@@ -63,7 +63,7 @@ QString Order::getFormattedPaymentInfo()
 
 QDataStream& operator<<(QDataStream& os, const Order& o)
 {
-    os.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     os << *o.deliveryInfo;
     os << dynamic_cast<CreditCardInfo*>(o.billingInfo)->getPaymentDetails();
@@ -79,7 +79,7 @@ QDataStream& operator<<(QDataStream& os, const Order& o)
 
 QDataStream& operator>>(QDataStream& is, Order& o)
 {
-    is.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     DeliveryInfo dInfo;
     QString paymentStr;
diff --git a/cuTPS-common/Entity/Section.cpp b/cuTPS-common/Entity/Section.cpp
index 405ad9d..21e7fe6 100644
--- a/cuTPS-common/Entity/Section.cpp
+++ b/cuTPS-common/Entity/Section.cpp
@@ -3,13 +3,29 @@
 
 Section::Section() {}
 
-Section::Section(int id, Chapter* chapter, int num, QString name, int price, bool isAvailable) : SellableItem(id, name, price, isAvailable), parentChapter(chapter), number(num) {
+Section::Section(qint32 id,
+                 Chapter* chapter,
+                 quint16 num,
+                 QString name,
+                 quint32 price,
+                 bool isAvailable)
+    : SellableItem(id, name, price, isAvailable),
+      parentChapter(chapter), number(num)
+{
 }
 
-Section::Section(Chapter* chapter, int num, QString name, int price) : SellableItem(name, price), parentChapter(chapter), number(num) {
+Section::Section(Chapter* chapter,
+                 quint16 num,
+                 QString name,
+                 quint32 price,
+                 bool available)
+    : SellableItem(name, price, available),
+      parentChapter(chapter), number(num)
+{
 }
 
-Section::~Section() {
+Section::~Section()
+{
 }
 
 Chapter* Section::getParentChapter() {
@@ -21,11 +37,11 @@ void Section::setParentChapter(Chapter* newChapter) {
     parentChapterId = newChapter->getId();
 }
 
-int Section::getSectionNumber() const {
+quint16 Section::getSectionNumber() const {
     return number;
 }
 
-void Section::setSectionNumber(int newNumber) {
+void Section::setSectionNumber(quint16 newNumber) {
     number = newNumber;
 }
 
@@ -68,27 +84,44 @@ QString Section::getTitle() {
 QString Section::getType() {
     return "Section";
 }
+qint32 Section::getParentChapterId() const
+{
+    return parentChapterId;
+}
+
+void Section::setParentChapterId(const qint32 value)
+{
+    parentChapterId = value;
+}
+
+qint32 Section::getParentTextbookId() const
+{
+    return parentTextbookId;
+}
+
+void Section::setParentTextbookId(const qint32 value)
+{
+    parentTextbookId = value;
+}
 
 QDataStream& operator<<(QDataStream& os, const Section& s)
 {
-    os.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     os << dynamic_cast<const SellableItem&>(s);
-    os << static_cast<qint32>(s.number);
-    os << static_cast<qint32>(s.parentChapterId);
+    os << s.number; // quint32
+    os << s.parentChapterId; // qint32
 
     return os;
 }
 
 QDataStream& operator>>(QDataStream& is, Section& s)
 {
-    is.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     is >> dynamic_cast<SellableItem&>(s);
-    qint32 parentId, sNumber;
-    is >> sNumber >> parentId;
-    s.parentChapterId = parentId;
-    s.number = sNumber;
+    is >> s.number;
+    is >> s.parentChapterId;
 
     return is;
 }
diff --git a/cuTPS-common/Entity/Section.h b/cuTPS-common/Entity/Section.h
index afbefad..ea4b59b 100644
--- a/cuTPS-common/Entity/Section.h
+++ b/cuTPS-common/Entity/Section.h
@@ -19,15 +19,33 @@ class LIBCUTPS_EXPORT Section : public SellableItem
 {
 public:
     Section();
-    Section(int, Chapter*, int, QString, int, bool);
-    Section(Chapter*, int, QString, int);
+
+    Section(qint32 id,
+            Chapter* parent,
+            quint16 number,
+            QString title,
+            quint32 price,
+            bool available=false);
+
+    Section(Chapter* parent,
+            quint16 number,
+            QString name,
+            quint32 price,
+            bool available=false);
+
     virtual ~Section();
 
     Chapter* getParentChapter();
     void setParentChapter(Chapter*);
 
-    int getSectionNumber() const;
-    void setSectionNumber(int);
+    quint16 getSectionNumber() const;
+    void setSectionNumber(quint16);
+
+    qint32 getParentChapterId() const;
+    void setParentChapterId(const qint32 value);
+
+    qint32 getParentTextbookId() const;
+    void setParentTextbookId(const qint32 value);
 
     QString getDetails() const;
     QString getTitle();
@@ -36,10 +54,12 @@ public:
     friend QDataStream& operator<<(QDataStream& os, const Section& s); // output
     friend QDataStream& operator>>(QDataStream& is, Section& s); // input
 
+
 private:
     Chapter* parentChapter;
-    int number;
-    int parentChapterId;
+    quint16 number;
+    qint32 parentChapterId;
+    qint32 parentTextbookId;
 };
 
 #endif // SECTION_H
diff --git a/cuTPS-common/Entity/SellableItem.cpp b/cuTPS-common/Entity/SellableItem.cpp
index 75a00e2..731a1b3 100644
--- a/cuTPS-common/Entity/SellableItem.cpp
+++ b/cuTPS-common/Entity/SellableItem.cpp
@@ -1,53 +1,70 @@
 #include "SellableItem.h"
 #include "Defines.h"
 
-SellableItem::SellableItem(int i, QString n, int p, bool isAvailable) : id(i), name(n), priceCents(p), availableForSale(isAvailable) {
+SellableItem::SellableItem(qint32 i,
+                           QString n,
+                           quint32 p,
+                           bool isAvailable)
+    : id(i), name(n), priceCents(p), availableForSale(isAvailable)
+{
 }
 
-SellableItem::SellableItem(QString n, int p) : name(n), priceCents(p), availableForSale(false) {
+SellableItem::SellableItem(QString n, quint32 p, bool available)
+    : name(n), priceCents(p), availableForSale(available)
+{
 }
 
-SellableItem::SellableItem() : name(""), priceCents(0), availableForSale(false) {
+SellableItem::SellableItem()
+    : name(""), priceCents(0), availableForSale(false)
+{
 }
 
 SellableItem::~SellableItem() {}
 
-int SellableItem::getId() const {
+qint32 SellableItem::getId() const
+{
     return id;
 }
 
-void SellableItem::setId(const int newId) {
+void SellableItem::setId(const qint32 newId)
+{
     id = newId;
 }
 
-QString SellableItem::getName() const {
+QString SellableItem::getName() const
+{
     return name;
 }
 
-void SellableItem::setName(const QString newName) {
+void SellableItem::setName(const QString newName)
+{
     name = newName;
 }
 
-int SellableItem::getPriceCents() const {
+quint32 SellableItem::getPriceCents() const
+{
     return priceCents;
 }
 
-void SellableItem::setPriceCents(const int newPriceCents) {
+void SellableItem::setPriceCents(const quint32 newPriceCents)
+{
     priceCents = newPriceCents;
 }
 
 
-bool SellableItem::getAvailability() const {
+bool SellableItem::getAvailability() const
+{
     return availableForSale;
 }
 
-void SellableItem::setAvailability(const bool available) {
+void SellableItem::setAvailability(const bool available)
+{
     availableForSale = available;
 }
 
 QDataStream& operator<<(QDataStream& os, const SellableItem& i)
 {
-    os.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     os << i.id
        << i.name
@@ -59,22 +76,12 @@ QDataStream& operator<<(QDataStream& os, const SellableItem& i)
 
 QDataStream& operator>>(QDataStream& is, SellableItem& i)
 {
-    is.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
-
-    qint32 id;
-    QString name;
-    qint32 price;
-    bool isAvailable;
-
-    is >> id
-       >> name
-       >> price
-       >> isAvailable;
-
-    i.setId(id);
-    i.setName(name);
-    i.setPriceCents(price);
-    i.setAvailability(isAvailable);
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
+
+    is >> i.id
+       >> i.name
+       >> i.priceCents
+       >> i.availableForSale;
 
     return is;
 }
diff --git a/cuTPS-common/Entity/SellableItem.h b/cuTPS-common/Entity/SellableItem.h
index 4d9124d..a050fb7 100644
--- a/cuTPS-common/Entity/SellableItem.h
+++ b/cuTPS-common/Entity/SellableItem.h
@@ -17,18 +17,26 @@ class LIBCUTPS_EXPORT SellableItem
 {
 public:
     SellableItem();
-    SellableItem(int, QString, int, bool);
-    SellableItem(QString, int);
+
+    SellableItem(qint32 id,
+                 QString name,
+                 quint32 price,
+                 bool available=false);
+
+    SellableItem(QString name,
+                 quint32 price,
+                 bool available=false);
+
     ~SellableItem();
 
-    void setId(const int);
+    void setId(const qint32);
     void setName(const QString);
-    void setPriceCents(const int);
+    void setPriceCents(const quint32);
     void setAvailability(const bool);
 
-    int getId() const;
+    qint32 getId() const;
     QString getName() const;
-    int getPriceCents() const;
+    quint32 getPriceCents() const;
     bool getAvailability() const;
 
     // Return the formatted details for the item
@@ -43,9 +51,9 @@ public:
     friend QDataStream& operator>> (QDataStream& is, SellableItem& i); // input
 
 protected:
-    int id;
+    qint32 id;
     QString name;
-    int priceCents;
+    quint32 priceCents;
     bool availableForSale;
 };
 
diff --git a/cuTPS-common/Entity/Textbook.cpp b/cuTPS-common/Entity/Textbook.cpp
index d1553dd..5d35ab5 100644
--- a/cuTPS-common/Entity/Textbook.cpp
+++ b/cuTPS-common/Entity/Textbook.cpp
@@ -3,11 +3,11 @@
 #include "SellableItem.h"
 #include "Defines.h"
 
-Textbook::Textbook(int textId, QString name, int price, bool isAvailable, QString iISBN) : SellableItem(textId, name, price, isAvailable) {
-    ISBN = iISBN;
+Textbook::Textbook(int textId, QString name, QString edition, QString authors, int price, bool isAvailable, QString iISBN) : SellableItem(textId, name, price, isAvailable) {
+    isbn = iISBN;
 }
 
-Textbook::Textbook(const Textbook& src) : SellableItem(src.getId(), src.getName(), src.getPriceCents(), src.getAvailability()), ISBN(src.getISBN())
+Textbook::Textbook(const Textbook& src) : SellableItem(src.getId(), src.getName(), src.getPriceCents(), src.getAvailability()), isbn(src.getISBN())
 {
     // Copy over all the chapters
     for (Chapter* c : src.getConstChapterList())
@@ -20,7 +20,7 @@ Textbook::Textbook(QString name, int price) : SellableItem(name, price) {
 }
 
 Textbook::Textbook() : SellableItem() {
-    ISBN = ""; // This constructor invocation means this book is invalid
+    isbn = ""; // This constructor invocation means this book is invalid
 }
 
 Textbook::~Textbook() {
@@ -29,20 +29,22 @@ Textbook::~Textbook() {
 }
 
 QString Textbook::getISBN() const {
-    return ISBN;
+    return isbn;
 }
 
-void Textbook::setISBN(const QString newISBN) {
-    ISBN = newISBN;
+void Textbook::setISBN(const QString& newISBN) {
+    isbn = newISBN;
 }
 
 QString Textbook::getDetails() const {
-    return QString("[Textbook: ID=%1, Title='%2', ISBN=%3, $$=%4, OnSell? %5]")
+    return QString("[Textbook: ID=%1, '%2' by %6, %7. ISBN=%3, $$=%4, OnSell? %5]")
             .arg(QString::number(getId()),
                  getName(),
                  getISBN(),
                  QString::number(this->getPriceCents() / 100.00f),
-                 (getAvailability() ? "yes" : "no"));
+                 (getAvailability() ? "yes" : "no"),
+                 getAuthors(),
+                 getEdition());
 }
 
 void Textbook::addChapter(const Chapter& c)
@@ -67,6 +69,26 @@ int Textbook::numChapters() const
     return chapters.size();
 }
 
+QString Textbook::getEdition() const
+{
+    return edition;
+}
+
+void Textbook::setEdition(const QString &value)
+{
+    edition = value;
+}
+
+QString Textbook::getAuthors() const
+{
+    return authors;
+}
+
+void Textbook::setAuthors(const QString &value)
+{
+    authors = value;
+}
+
 QString Textbook::getTitle() {
     return this->getName() + " - " + this->getISBN();
 }
@@ -77,11 +99,13 @@ QString Textbook::getType() {
 
 QDataStream& operator<<(QDataStream& os, const Textbook& b)
 {
-    os.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     // Insert Textbook itself
     os << dynamic_cast<const SellableItem&>(b);
-    os << b.ISBN;
+    os << b.edition;
+    os << b.authors;
+    os << b.isbn;
 
     // Followed by number of chapters
     os << static_cast<qint32>(b.numChapters());
@@ -96,11 +120,13 @@ QDataStream& operator<<(QDataStream& os, const Textbook& b)
 
 QDataStream& operator>>(QDataStream& is, Textbook& b)
 {
-    is.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     // Read textbook
     is >> dynamic_cast<SellableItem&>(b);
-    is >> b.ISBN;
+    is >> b.edition;
+    is >> b.authors;
+    is >> b.isbn;
 
     // Read number of chapters
     qint32 numChapters;
diff --git a/cuTPS-common/Entity/Textbook.h b/cuTPS-common/Entity/Textbook.h
index cd9f3d7..76746e1 100644
--- a/cuTPS-common/Entity/Textbook.h
+++ b/cuTPS-common/Entity/Textbook.h
@@ -1,4 +1,4 @@
-// Class: Textbook
+﻿// Class: Textbook
 // Type: Entity
 // Description:
 //     Entity object representing a textbook that
@@ -22,12 +22,22 @@ class LIBCUTPS_EXPORT Textbook : public SellableItem {
 public:
     Textbook();
     Textbook(const Textbook&); // Copy cTor
-    Textbook(int, QString, int, bool, QString);
+    Textbook(int id,
+             QString name,
+             QString edition,
+             QString authors,
+             int price,
+             bool avail,
+             QString isbn);
     Textbook(QString, int);
     virtual ~Textbook();
 
     QString getISBN() const;
-    void setISBN(const QString);
+    void setISBN(const QString&);
+    QString getAuthors() const;
+    void setAuthors(const QString &value);
+    QString getEdition() const;
+    void setEdition(const QString &value);
 
     QString getDetails() const;
     QString getTitle();
@@ -43,7 +53,9 @@ public:
     friend QDataStream& operator>>(QDataStream& is, Textbook& b); // input
 
 private:
-    QString ISBN;
+    QString authors;
+    QString isbn;
+    QString edition;
     QVector<Chapter*> chapters;
 };
 
diff --git a/cuTPS-common/Entity/User.cpp b/cuTPS-common/Entity/User.cpp
index 8f481c0..e8766b6 100644
--- a/cuTPS-common/Entity/User.cpp
+++ b/cuTPS-common/Entity/User.cpp
@@ -1,8 +1,12 @@
 #include "User.h"
 
-User::User(int id, QString n, QString u) : userId(id), name(n), username(u) {
+User::User(QString name, QString uname)
+    : name(name), username(uname)
+{}
 
-}
+User::User(int id, QString n, QString u)
+    : userId(id), name(n), username(u)
+{}
 
 User::~User() {}
 
@@ -29,3 +33,19 @@ QString User::getName() {
 void User::setName(QString newName) {
     name = newName;
 }
+
+QString User::getDetails()
+{
+
+}
+
+Role User::getRole() const
+{
+    return role;
+}
+
+void User::setRole(const Role value)
+{
+    role = value;
+}
+
diff --git a/cuTPS-common/Entity/User.h b/cuTPS-common/Entity/User.h
index f556c5b..55678a0 100644
--- a/cuTPS-common/Entity/User.h
+++ b/cuTPS-common/Entity/User.h
@@ -12,28 +12,36 @@
 
 #include <QString>
 
-using namespace std;
+#include "Defines.h"
 
-class LIBCUTPS_EXPORT User {
+using namespace TPSDef;
 
-    private:
-        int userId;
-        QString name;
-        QString username;
+class LIBCUTPS_EXPORT User
+{
+public:
+    User(QString name="<NO_NAME>", QString uname="alpine");
+    User(qint32 id, QString name, QString uname);
+    ~User();
 
-    public:
-        User(int, QString, QString);
-        ~User();
-        int getUserId();
-        void setUserId(int);
+    qint32 getUserId();
+    void setUserId(qint32);
 
-        QString getUsername();
-        void setUsername(QString);
+    QString getUsername();
+    void setUsername(QString);
 
-        QString getName();
-        void setName(QString);
+    QString getName();
+    void setName(QString);
 
-        virtual QString getDetails() = 0;
+    virtual QString getDetails();
+
+    Role getRole() const;
+    void setRole(const Role value);
+
+private:
+    qint32 userId;
+    QString name;
+    QString username;
+    Role role = None;
 };
 
 #endif // USER_H
diff --git a/cuTPS-common/Utils.h b/cuTPS-common/Utils.h
deleted file mode 100644
index 7bfa693..0000000
--- a/cuTPS-common/Utils.h
+++ /dev/null
@@ -1,52 +0,0 @@
-// Name: Utils
-// Description:
-//     A utilities header, defining various enumerations
-//     and structs that are used in the networking protocol
-//     and in session identification
-
-
-#ifndef UTILS_H
-#define UTILS_H
-
-#include "libcutps_global.h"
-
-#include <QString>
-#include <QDataStream>
-#include <QUuid>
-
-#include "Defines.h"
-
-// A pass/fail response for a test case
-enum ResponseCode {
-    Fail,
-    Success
-};
-
-enum Role {
-    None,
-    StudentUser,
-    ContentManagerUser,
-    AdministratorUser
-};
-
-// Information returned by the server for requests
-struct ServerResponse {
-    QUuid sessionID;
-    ResponseCode code;
-    QString message;
-};
-
-// For user authentication
-struct UserCredentials {
-    QString username;
-    QString password;
-};
-
-// For session identification
-struct SessionCredentials {
-    QString username;
-    int sessionID;
-};
-
-
-#endif // UTILS_H
diff --git a/cuTPS-common/cuTPS-common.pro b/cuTPS-common/cuTPS-common.pro
index 10d2d80..6255b6d 100644
--- a/cuTPS-common/cuTPS-common.pro
+++ b/cuTPS-common/cuTPS-common.pro
@@ -12,7 +12,6 @@ TEMPLATE = lib
 DEFINES += LIBCUTPS_LIBRARY
 
 HEADERS += \
-    Utils.h \
     Entity/BillingInfo.h \
     Entity/Chapter.h \
     Entity/ContentManager.h \
diff --git a/cuTPS-server/ClientTaskHandling/AddBookTask.cpp b/cuTPS-server/ClientTaskHandling/AddBookTask.cpp
deleted file mode 100644
index 0582507..0000000
--- a/cuTPS-server/ClientTaskHandling/AddBookTask.cpp
+++ /dev/null
@@ -1,38 +0,0 @@
-#include "AddBookTask.h"
-
-#include <QDebug>
-
-AddBookTask::AddBookTask(Server* srv)
-    : WorkerTask(srv)
-{
-}
-
-void AddBookTask::run()
-{
-    qDebug() << "Add book task was run";
-    qDebug() << "Doing job for session: " << sessionId
-             << "Request: " << request->getRequestId();
-
-    Textbook book;
-    QDataStream in(request->getData(), QIODevice::ReadOnly);
-
-    in >> book;
-
-    qDebug() << "TPSAddBookTask Deserialized textbook: ";
-    qDebug() << " id = " << QString::number(book.getId());
-    qDebug() << " ISBN = " << book.getISBN();
-    qDebug() << " name = " << book.getName();
-    qDebug() << " price = " << QString::number(book.getPriceCents());
-    qDebug() << "available? = " << book.getAvailability();
-
-    ServerResponse r = server->addTextbook(sessionId, book);
-
-    NetResponse* response = new NetResponse();
-    response->setInvocation(request->getInvocation());
-    response->setRequestId(request->getRequestId());
-    response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
-    response->setSessionId(sessionId);
-
-    emit result(response->getResponseCode(), response);
-}
-
diff --git a/cuTPS-server/ClientTaskHandling/AddBookTask.h b/cuTPS-server/ClientTaskHandling/AddBookTask.h
deleted file mode 100644
index 929b8bd..0000000
--- a/cuTPS-server/ClientTaskHandling/AddBookTask.h
+++ /dev/null
@@ -1,18 +0,0 @@
-#ifndef ADDBOOKTASK_H
-#define ADDBOOKTASK_H
-
-#include <QUuid>
-#include <QDataStream>
-
-#include "WorkerTask.h"
-#include "Server.h"
-#include "Entity/Textbook.h"
-
-class AddBookTask : public WorkerTask
-{
-public:
-    AddBookTask(Server* srv);
-    virtual void run();
-};
-
-#endif // ADDBOOKTASK_H
diff --git a/cuTPS-server/ClientTaskHandling/AddItemTask.cpp b/cuTPS-server/ClientTaskHandling/AddItemTask.cpp
new file mode 100644
index 0000000..1b23a12
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/AddItemTask.cpp
@@ -0,0 +1,76 @@
+#include "AddItemTask.h"
+
+#include <QDebug>
+
+#include "Defines.h"
+
+using namespace TPSNetProtocolDef;
+
+AddItemTask::AddItemTask(Server* srv)
+    : WorkerTask(srv)
+{
+}
+
+void AddItemTask::run()
+{
+    qDebug() << "Add item task was run";
+    qDebug() << "Doing job for session: " << sessionId
+             << "Request: " << request->getRequestId();
+
+    QDataStream in(request->getData(), QIODevice::ReadOnly);
+    ServerResponse r;
+    qint32 itemId = -1;
+
+    // TODO: make server return ids for created items
+    switch (request->getInvocation())
+    {
+
+    case IAddBook:
+    {
+        Textbook text;
+        in >> text;
+        r = server->addTextbook(sessionId, text);
+        // set itemid
+    }
+
+    case IAddChapter:
+    {
+        Chapter ch;
+        qint32 textId;
+
+        in >> textId >> ch;
+
+        ch.setParentTextbookId(textId);
+        r = server->addChapter(sessionId, ch);
+        // set itemId
+    }
+
+    case IAddSection:
+    {
+        Section s;
+        qint32 textId, chId;
+
+        in >> textId >> chId >> s;
+
+        s.setParentChapterId(chId);
+        s.setParentTextbookId(textId);
+        r = server->addSection(sessionId, s);
+        // set Itemid
+    }
+
+    }
+
+    NetResponse* response = new NetResponse();
+    response->setInvocation(request->getInvocation());
+    response->setRequestId(request->getRequestId());
+    response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
+    response->setSessionId(sessionId);
+
+    QByteArray responseDataBytes;
+    QDataStream outData(&responseDataBytes, QIODevice::WriteOnly);
+    outData << itemId;
+    response->setData(responseDataBytes);
+
+    emit result(response->getResponseCode(), response);
+}
+
diff --git a/cuTPS-server/ClientTaskHandling/AddItemTask.h b/cuTPS-server/ClientTaskHandling/AddItemTask.h
new file mode 100644
index 0000000..2bbeea8
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/AddItemTask.h
@@ -0,0 +1,17 @@
+#ifndef ADDITEMTASK_H
+#define ADDITEMTASK_H
+
+#include <QUuid>
+#include <QDataStream>
+
+#include "WorkerTask.h"
+#include "Server.h"
+
+class AddItemTask : public WorkerTask
+{
+public:
+    AddItemTask(Server* srv);
+    virtual void run();
+};
+
+#endif // ADDITEMTASK_H
diff --git a/cuTPS-server/ClientTaskHandling/AddUserTask.cpp b/cuTPS-server/ClientTaskHandling/AddUserTask.cpp
new file mode 100644
index 0000000..7587c34
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/AddUserTask.cpp
@@ -0,0 +1,39 @@
+#include "AddUserTask.h"
+
+#include <QDebug>
+#include <QUuid>
+#include <QByteArray>
+#include <QDataStream>
+
+#include "Entity/NetResponse.h"
+#include "Entity/User.h"
+
+AddUserTask::AddUserTask(Server* srv)
+    : WorkerTask(srv)
+{
+}
+
+void AddUserTask::run()
+{
+    qDebug() << "AddUserTask task was run";
+    qDebug() << "Doing job for session: " << sessionId
+             << "Request: " << request->getRequestId();
+
+    QDataStream in(request->getData(), QIODevice::ReadOnly);
+    User usr;
+
+    // TODO: User serialization
+    // in >> usr;
+
+    // TODO implement this
+    //ServerResponse r = server->addUser(sessionId, usr);
+    ServerResponse r; r.code = Fail;
+
+    NetResponse* response = new NetResponse();
+    response->setInvocation(request->getInvocation());
+    response->setRequestId(request->getRequestId());
+    response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
+    response->setSessionId(sessionId);
+
+    emit result(response->getResponseCode(), response);
+}
diff --git a/cuTPS-server/ClientTaskHandling/AddUserTask.h b/cuTPS-server/ClientTaskHandling/AddUserTask.h
new file mode 100644
index 0000000..7193e65
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/AddUserTask.h
@@ -0,0 +1,14 @@
+#ifndef ADDUSERTASK_H
+#define ADDUSERTASK_H
+
+#include "WorkerTask.h"
+#include "Server.h"
+
+class AddUserTask : public WorkerTask
+{
+public:
+    AddUserTask(Server* srv);
+    virtual void run();
+};
+
+#endif // ADDUSERTASK_H
diff --git a/cuTPS-server/ClientTaskHandling/AdminTaskFactory.cpp b/cuTPS-server/ClientTaskHandling/AdminTaskFactory.cpp
index 79f2c04..ed2c157 100644
--- a/cuTPS-server/ClientTaskHandling/AdminTaskFactory.cpp
+++ b/cuTPS-server/ClientTaskHandling/AdminTaskFactory.cpp
@@ -1,7 +1,9 @@
 #include "AdminTaskFactory.h"
 #include "GenerateReportTask.h"
+#include "AddUserTask.h"
+#include "BanUserTask.h"
 
-using namespace TPSNetProtocolDefs;
+using namespace TPSNetProtocolDef;
 
 AdminTaskFactory::AdminTaskFactory()
 {
@@ -9,7 +11,7 @@ AdminTaskFactory::AdminTaskFactory()
 
 WorkerTask* AdminTaskFactory::createTask(
         Server *srvInst,
-        TPSNetProtocolDefs::InvocationDescriptor invoc)
+        TPSNetProtocolDef::InvocationDescriptor invoc)
 {
     switch (invoc)
     {
@@ -18,6 +20,14 @@ WorkerTask* AdminTaskFactory::createTask(
         return new GenerateReportTask(srvInst);
     }
 
+    case IAddUser: {
+        return new AddUserTask(srvInst);
+    }
+
+    case IBanUser: {
+        return new BanUserTask(srvInst);
+    }
+
     default: {
         throw PermissionDeniedExc();
     }
diff --git a/cuTPS-server/ClientTaskHandling/AdminTaskFactory.h b/cuTPS-server/ClientTaskHandling/AdminTaskFactory.h
index ecba959..342ddf1 100644
--- a/cuTPS-server/ClientTaskHandling/AdminTaskFactory.h
+++ b/cuTPS-server/ClientTaskHandling/AdminTaskFactory.h
@@ -12,7 +12,7 @@ public:
 
     virtual WorkerTask* createTask(
             Server *srvInst,
-            TPSNetProtocolDefs::InvocationDescriptor invoc);
+            TPSNetProtocolDef::InvocationDescriptor invoc);
 
 };
 
diff --git a/cuTPS-server/ClientTaskHandling/BanUserTask.cpp b/cuTPS-server/ClientTaskHandling/BanUserTask.cpp
new file mode 100644
index 0000000..820e794
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/BanUserTask.cpp
@@ -0,0 +1,35 @@
+#include "BanUserTask.h"
+
+#include <QDebug>
+
+#include "Defines.h"
+
+BanUserTask::BanUserTask(Server* srv)
+    : WorkerTask(srv)
+{
+}
+
+void BanUserTask::run()
+{
+    qDebug() << "Ban user task was run";
+    qDebug() << "Doing job for session: " << sessionId
+             << "Request: " << request->getRequestId();
+
+    QDataStream in(request->getData(), QIODevice::ReadOnly);
+
+    qint32 uid;
+    in >> uid;
+
+    // TODO: implement this
+    // ServerResponse r = server->banUser(sessionId, uid);
+
+    NetResponse* response = new NetResponse();
+    response->setInvocation(request->getInvocation());
+    response->setRequestId(request->getRequestId());
+    //response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
+    response->setResponseCode(0x0); // rm this
+    response->setSessionId(sessionId);
+
+    emit result(response->getResponseCode(), response);
+}
+
diff --git a/cuTPS-server/ClientTaskHandling/BanUserTask.h b/cuTPS-server/ClientTaskHandling/BanUserTask.h
new file mode 100644
index 0000000..4cff49a
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/BanUserTask.h
@@ -0,0 +1,17 @@
+#ifndef BANUSERTASK_H
+#define BANUSERTASK_H
+
+#include <QUuid>
+#include <QDataStream>
+
+#include "WorkerTask.h"
+#include "Server.h"
+
+class BanUserTask : public WorkerTask
+{
+public:
+    BanUserTask(Server* srv);
+    virtual void run();
+};
+
+#endif // BANUSERTASK_H
diff --git a/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp b/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp
index 5c88801..59588c1 100644
--- a/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp
+++ b/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp
@@ -1,9 +1,12 @@
 #include "ContentMgrTaskFactory.h"
-#include "AddBookTask.h"
+#include "AddItemTask.h"
 #include "AddCourseTask.h"
 #include "GetBookDetailsTask.h"
+#include "GetAllBooksTask.h"
+#include "GetAllCoursesTask.h"
+#include "RmItemTask.h"
 
-using namespace TPSNetProtocolDefs;
+using namespace TPSNetProtocolDef;
 
 ContentMgrTaskFactory::ContentMgrTaskFactory()
 {
@@ -11,13 +14,15 @@ ContentMgrTaskFactory::ContentMgrTaskFactory()
 
 WorkerTask* ContentMgrTaskFactory::createTask(
         Server *srvInst,
-        TPSNetProtocolDefs::InvocationDescriptor invoc)
+        TPSNetProtocolDef::InvocationDescriptor invoc)
 {
     switch (invoc)
     {
 
+    case IAddChapter:
+    case IAddSection:
     case IAddBook: {
-        return new AddBookTask(srvInst);
+        return new AddItemTask(srvInst);
     }
 
     case IAddCourse: {
@@ -28,6 +33,20 @@ WorkerTask* ContentMgrTaskFactory::createTask(
         return new GetBookDetailsTask(srvInst);
     }
 
+    case IGetAllBooks: {
+        return new GetAllBooksTask(srvInst);
+    }
+
+    case IGetAllCourses: {
+        return new GetAllCoursesTask(srvInst);
+    }
+
+    case IRmBook:
+    case IRmChapter:
+    case IRmSection: {
+        return new RmItemTask(srvInst);
+    }
+
     default: {
         throw PermissionDeniedExc();
     }
diff --git a/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.h b/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.h
index 41bedaa..27e2226 100644
--- a/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.h
+++ b/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.h
@@ -12,7 +12,7 @@ public:
 
     virtual WorkerTask* createTask(
             Server *srvInst,
-            TPSNetProtocolDefs::InvocationDescriptor invoc);
+            TPSNetProtocolDef::InvocationDescriptor invoc);
 };
 
 #endif // CONTENTMGRTASKFACTORY_H
diff --git a/cuTPS-server/ClientTaskHandling/GetAllBooksTask.cpp b/cuTPS-server/ClientTaskHandling/GetAllBooksTask.cpp
new file mode 100644
index 0000000..0c6f933
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/GetAllBooksTask.cpp
@@ -0,0 +1,53 @@
+#include "GetAllBooksTask.h"
+
+#include <QDebug>
+#include <QUuid>
+#include <QByteArray>
+#include <QDataStream>
+
+#include "Entity/NetResponse.h"
+
+GetAllBooksTask::GetAllBooksTask(Server* srv)
+    : WorkerTask(srv)
+{
+}
+
+void GetAllBooksTask::run()
+{
+    qDebug() << "GetAllBooks task was run";
+    qDebug() << "Doing job for session: " << sessionId
+             << "Request: " << request->getRequestId();
+
+    QVector<Textbook> books;
+
+    // TODO: Implement Server::getAllTextbooks(QVector<Textbook>&);
+    //ServerResponse getBooks = server->getAllTextbooks(ids);
+    books.append(Textbook(13, "Everything I Want To Do Is Illegal", "1st", "me", 999, true, "123123123123"));
+    books.append(Textbook(666, "The Zen of Farting", "10th", "george lucas", 1, true, "321321321321"));
+
+    NetResponse* response = new NetResponse();
+    response->setInvocation(request->getInvocation());
+    response->setRequestId(request->getRequestId());
+    //response->setResponseCode(getBooks.code == Fail ? 0x0 : 0x1);
+    response->setResponseCode(0x1); // TODO: remove this
+    response->setSessionId(sessionId);
+
+    QByteArray responseDataBytes;
+    QDataStream outData(&responseDataBytes, QIODevice::WriteOnly);
+
+    // if (getBooks.code == Success)
+    if (true) // TODO: remove this
+    {
+        outData << static_cast<qint32>(books.size());
+
+        for (Textbook t : books)
+        {
+            outData << t;
+        }
+
+        response->setData(responseDataBytes);
+    }
+
+    emit result(response->getResponseCode(), response);
+}
+
diff --git a/cuTPS-server/ClientTaskHandling/GetAllBooksTask.h b/cuTPS-server/ClientTaskHandling/GetAllBooksTask.h
new file mode 100644
index 0000000..3f9b970
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/GetAllBooksTask.h
@@ -0,0 +1,14 @@
+#ifndef GETALLBOOKSTASK_H
+#define GETALLBOOKSTASK_H
+
+#include "WorkerTask.h"
+#include "Server.h"
+
+class GetAllBooksTask : public WorkerTask
+{
+public:
+    GetAllBooksTask(Server* srv);
+    virtual void run();
+};
+
+#endif // GETALLBOOKSTASK_H
diff --git a/cuTPS-server/ClientTaskHandling/GetAllCoursesTask.cpp b/cuTPS-server/ClientTaskHandling/GetAllCoursesTask.cpp
new file mode 100644
index 0000000..c99a42b
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/GetAllCoursesTask.cpp
@@ -0,0 +1,47 @@
+#include "GetAllCoursesTask.h"
+
+#include <QDebug>
+#include <QUuid>
+#include <QByteArray>
+#include <QDataStream>
+
+#include "Entity/NetResponse.h"
+#include "Entity/Course.h"
+
+GetAllCoursesTask::GetAllCoursesTask(Server* srv)
+    : WorkerTask(srv)
+{
+}
+
+void GetAllCoursesTask::run()
+{
+    qDebug() << "GetAllCourses task was run";
+    qDebug() << "Doing job for session: " << sessionId
+             << "Request: " << request->getRequestId();
+
+    QVector<Course> courses;
+
+    // TODO: implement get all courses on the server
+    Course c;
+    c.setId(42);
+    courses.append(c);
+
+    NetResponse* response = new NetResponse();
+    response->setInvocation(request->getInvocation());
+    response->setRequestId(request->getRequestId());
+    //response->setResponseCode(getBooks.code == Fail ? 0x0 : 0x1);
+    response->setResponseCode(0x1); // TODO: remove this
+    response->setSessionId(sessionId);
+
+    QByteArray responseDataBytes;
+    QDataStream outData(&responseDataBytes, QIODevice::WriteOnly);
+
+    outData << static_cast<qint32>(courses.size());
+    for (Course cour : courses)
+        outData << cour;
+
+    response->setData(responseDataBytes);
+
+    emit result(response->getResponseCode(), response);
+}
+
diff --git a/cuTPS-server/ClientTaskHandling/GetAllCoursesTask.h b/cuTPS-server/ClientTaskHandling/GetAllCoursesTask.h
new file mode 100644
index 0000000..cffc3c5
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/GetAllCoursesTask.h
@@ -0,0 +1,14 @@
+#ifndef GETALLCOURSESSTASK_H
+#define GETALLCOURSESSTASK_H
+
+#include "WorkerTask.h"
+#include "Server.h"
+
+class GetAllCoursesTask : public WorkerTask
+{
+public:
+    GetAllCoursesTask(Server* srv);
+    virtual void run();
+};
+
+#endif // GETALLCOURSESSTASK_H
diff --git a/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.cpp b/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.cpp
index db10519..4f64528 100644
--- a/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.cpp
+++ b/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.cpp
@@ -1,6 +1,11 @@
 #include "GetRequiredBooksTask.h"
 
 #include <QDebug>
+#include <QUuid>
+#include <QByteArray>
+#include <QDataStream>
+
+#include "Entity/NetResponse.h"
 
 GetRequiredBooksTask::GetRequiredBooksTask(Server* srv)
     : WorkerTask(srv)
@@ -36,6 +41,8 @@ void GetRequiredBooksTask::run()
 
     if (getBooks.code == Success)
     {
+        // TODO: query also courses, and write them as:
+        // |numcourses|(|course||numbooks||..books..|)(|course||numbooks|...
         outData << static_cast<qint32>(ids.size());
 
         for (qint32 id : ids)
diff --git a/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.h b/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.h
index 26cc117..ee6657f 100644
--- a/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.h
+++ b/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.h
@@ -1,9 +1,6 @@
 #ifndef GETREQUIREDBOOKSTASK_H
 #define GETREQUIREDBOOKSTASK_H
 
-#include <QUuid>
-#include <QDataStream>
-
 #include "WorkerTask.h"
 #include "Server.h"
 
diff --git a/cuTPS-server/ClientTaskHandling/LoginTaskFactory.cpp b/cuTPS-server/ClientTaskHandling/LoginTaskFactory.cpp
index d74f941..7b6af36 100644
--- a/cuTPS-server/ClientTaskHandling/LoginTaskFactory.cpp
+++ b/cuTPS-server/ClientTaskHandling/LoginTaskFactory.cpp
@@ -1,7 +1,7 @@
 #include "LoginTaskFactory.h"
 #include "LoginTask.h"
 
-using namespace TPSNetProtocolDefs;
+using namespace TPSNetProtocolDef;
 
 LoginTaskFactory::LoginTaskFactory()
 {}
@@ -11,7 +11,7 @@ LoginTaskFactory::~LoginTaskFactory()
 
 WorkerTask* LoginTaskFactory::createTask(
         Server *srvInst,
-        TPSNetProtocolDefs::InvocationDescriptor invoc)
+        TPSNetProtocolDef::InvocationDescriptor invoc)
 {
     switch (invoc)
     {
diff --git a/cuTPS-server/ClientTaskHandling/LoginTaskFactory.h b/cuTPS-server/ClientTaskHandling/LoginTaskFactory.h
index 8ffc686..6102dba 100644
--- a/cuTPS-server/ClientTaskHandling/LoginTaskFactory.h
+++ b/cuTPS-server/ClientTaskHandling/LoginTaskFactory.h
@@ -12,7 +12,7 @@ public:
     virtual ~LoginTaskFactory();
     virtual WorkerTask* createTask(
             Server *srvInst,
-            TPSNetProtocolDefs::InvocationDescriptor invoc);
+            TPSNetProtocolDef::InvocationDescriptor invoc);
 
 };
 
diff --git a/cuTPS-server/ClientTaskHandling/RmItemTask.cpp b/cuTPS-server/ClientTaskHandling/RmItemTask.cpp
new file mode 100644
index 0000000..74da1ca
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/RmItemTask.cpp
@@ -0,0 +1,56 @@
+#include "RmItemTask.h"
+
+#include <QDebug>
+
+#include "Defines.h"
+
+using namespace TPSNetProtocolDef;
+
+RmItemTask::RmItemTask(Server* srv)
+    : WorkerTask(srv)
+{
+}
+
+void RmItemTask::run()
+{
+    qDebug() << "Remove item task was run";
+    qDebug() << "Doing job for session: " << sessionId
+             << "Request: " << request->getRequestId();
+
+    QDataStream in(request->getData(), QIODevice::ReadOnly);
+    qint32 itemId;
+    in >> itemId;
+
+    ServerResponse r;
+    switch (request->getInvocation())
+    {
+
+    case IRmBook:
+    {
+        // TODO: implement this
+        //r = server->removeBook(sessionId, itemId);
+    }
+
+    case IRmChapter:
+    {
+        // TODO: implement this
+        //r = server->removeChapter(sessionId, itemId);
+    }
+
+    case IRmSection:
+    {
+        // TODO: implement this
+        // r = server->removeSection(sessionId, itemId);
+    }
+
+    }
+
+    NetResponse* response = new NetResponse();
+    response->setInvocation(request->getInvocation());
+    response->setRequestId(request->getRequestId());
+    response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
+    response->setSessionId(sessionId);
+
+    emit result(response->getResponseCode(), response);
+}
+
diff --git a/cuTPS-server/ClientTaskHandling/RmItemTask.h b/cuTPS-server/ClientTaskHandling/RmItemTask.h
new file mode 100644
index 0000000..3fa7b5d
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/RmItemTask.h
@@ -0,0 +1,17 @@
+#ifndef RMITEMTASK_H
+#define RMITEMTASK_H
+
+#include <QUuid>
+#include <QDataStream>
+
+#include "WorkerTask.h"
+#include "Server.h"
+
+class RmItemTask : public WorkerTask
+{
+public:
+    RmItemTask(Server* srv);
+    virtual void run();
+};
+
+#endif // RMITEMTASK_H
diff --git a/cuTPS-server/ClientTaskHandling/SUTaskFactory.cpp b/cuTPS-server/ClientTaskHandling/SUTaskFactory.cpp
index ba1bcd5..2ce92c5 100644
--- a/cuTPS-server/ClientTaskHandling/SUTaskFactory.cpp
+++ b/cuTPS-server/ClientTaskHandling/SUTaskFactory.cpp
@@ -1,13 +1,18 @@
 #include "SUTaskFactory.h"
 #include "LoginTask.h"
-#include "AddBookTask.h"
+#include "AddItemTask.h"
 #include "AddCourseTask.h"
 #include "GetBookDetailsTask.h"
 #include "GetRequiredBooksTask.h"
 #include "SubmitOrderTask.h"
 #include "GenerateReportTask.h"
+#include "GetAllBooksTask.h"
+#include "GetAllCoursesTask.h"
+#include "AddUserTask.h"
+#include "BanUserTask.h"
+#include "RmItemTask.h"
 
-using namespace TPSNetProtocolDefs;
+using namespace TPSNetProtocolDef;
 
 SUTaskFactory::SUTaskFactory()
 {
@@ -19,7 +24,7 @@ SUTaskFactory::~SUTaskFactory()
 
 WorkerTask* SUTaskFactory::createTask(
         Server *srvInst,
-        TPSNetProtocolDefs::InvocationDescriptor invoc)
+        TPSNetProtocolDef::InvocationDescriptor invoc)
 {
     switch (invoc)
     {
@@ -28,8 +33,18 @@ WorkerTask* SUTaskFactory::createTask(
         return new LoginTask(srvInst);
     }
 
+    case IAddChapter:
+    case IAddSection:
     case IAddBook: {
-        return new AddBookTask(srvInst);
+        return new AddItemTask(srvInst);
+    }
+
+    case IAddUser: {
+        return new AddUserTask(srvInst);
+    }
+
+    case IBanUser: {
+        return new BanUserTask(srvInst);
     }
 
     case IAddCourse: {
@@ -52,6 +67,16 @@ WorkerTask* SUTaskFactory::createTask(
         return new GenerateReportTask(srvInst);
     }
 
+    case IGetAllBooks: {
+        return new GetAllBooksTask(srvInst);
+    }
+
+    case IRmBook:
+    case IRmChapter:
+    case IRmSection: {
+        return new RmItemTask(srvInst);
+    }
+
     default: {
         throw PermissionDeniedExc();
     }
diff --git a/cuTPS-server/ClientTaskHandling/SUTaskFactory.h b/cuTPS-server/ClientTaskHandling/SUTaskFactory.h
index fa7b6be..d83c37f 100644
--- a/cuTPS-server/ClientTaskHandling/SUTaskFactory.h
+++ b/cuTPS-server/ClientTaskHandling/SUTaskFactory.h
@@ -12,7 +12,7 @@ public:
     virtual ~SUTaskFactory();
     virtual WorkerTask* createTask(
             Server *srvInst,
-            TPSNetProtocolDefs::InvocationDescriptor invoc);
+            TPSNetProtocolDef::InvocationDescriptor invoc);
 };
 
 #endif // SUTASKFACTORY_H
diff --git a/cuTPS-server/ClientTaskHandling/TaskAbsFactory.h b/cuTPS-server/ClientTaskHandling/TaskAbsFactory.h
index 3ea3d04..c21864e 100644
--- a/cuTPS-server/ClientTaskHandling/TaskAbsFactory.h
+++ b/cuTPS-server/ClientTaskHandling/TaskAbsFactory.h
@@ -13,7 +13,7 @@ public:
     TaskAbsFactory();
     virtual ~TaskAbsFactory();
     virtual WorkerTask* createTask(Server* srvInst,
-                           TPSNetProtocolDefs::InvocationDescriptor invoc) = 0;
+                           TPSNetProtocolDef::InvocationDescriptor invoc) = 0;
 
     class PermissionDeniedExc : std::exception
     {
diff --git a/cuTPS-server/ClientTaskHandling/UserTaskFactory.cpp b/cuTPS-server/ClientTaskHandling/UserTaskFactory.cpp
index 179fe67..778c594 100644
--- a/cuTPS-server/ClientTaskHandling/UserTaskFactory.cpp
+++ b/cuTPS-server/ClientTaskHandling/UserTaskFactory.cpp
@@ -3,7 +3,7 @@
 #include "GetRequiredBooksTask.h"
 #include "SubmitOrderTask.h"
 
-using namespace TPSNetProtocolDefs;
+using namespace TPSNetProtocolDef;
 
 UserTaskFactory::UserTaskFactory()
 {
@@ -11,7 +11,7 @@ UserTaskFactory::UserTaskFactory()
 
 WorkerTask* UserTaskFactory::createTask(
         Server *srvInst,
-        TPSNetProtocolDefs::InvocationDescriptor invoc)
+        TPSNetProtocolDef::InvocationDescriptor invoc)
 {
     switch (invoc)
     {
diff --git a/cuTPS-server/ClientTaskHandling/UserTaskFactory.h b/cuTPS-server/ClientTaskHandling/UserTaskFactory.h
index 80788fe..fc61e45 100644
--- a/cuTPS-server/ClientTaskHandling/UserTaskFactory.h
+++ b/cuTPS-server/ClientTaskHandling/UserTaskFactory.h
@@ -12,7 +12,7 @@ public:
 
     virtual WorkerTask* createTask(
             Server *srvInst,
-            TPSNetProtocolDefs::InvocationDescriptor invoc);
+            TPSNetProtocolDef::InvocationDescriptor invoc);
 };
 
 #endif // USERTASKFACTORY_H
diff --git a/cuTPS-server/Server.cpp b/cuTPS-server/Server.cpp
index 553366a..463fc15 100755
--- a/cuTPS-server/Server.cpp
+++ b/cuTPS-server/Server.cpp
@@ -176,12 +176,12 @@ ServerResponse Server::addCourse(QUuid sessionID, Course course)
     qDebug() << "About to insert " //<< QString::number(course.getRequiredTexts()->size())
              << " Course_Textbooks";
 
-    for (Textbook* textbook : *(course.getRequiredTexts())) {
+    for (int textbookId : course.getRequiredTextIds()) {
         // TODO: this is we should form the query for all books and execute it once.
         QString queryString = "insert into Course_Textbook (course_id, textbook_id) values (";
         queryString += course.getId();
         queryString += ", ";
-        queryString += textbook->getId();
+        queryString += textbookId;
         queryString += ");";
 
         result = dbManager->runQuery(queryString, &query);
@@ -260,7 +260,7 @@ ServerResponse Server::addChapter(QUuid sessionID, Chapter chapter)
 
     QSqlQuery query;
     QString queryString = "insert into Chapter (textbook_id, name, available) values (";
-    queryString += chapter.getParentTextbook()->getId();
+    queryString += chapter.getParentTextbookId();
     queryString += ", ";
     queryString += chapter.getName();
     queryString += ", ";
@@ -287,6 +287,8 @@ ServerResponse Server::addSection(QUuid sessionID, Section section)
     ServerResponse response;
     response.sessionID = sessionID;
 
+    // TODO: ensure that getParentChapterId() belongs to getParentTextbookId().
+
     QSqlQuery query;
     QString queryString = "insert into Section (chapter_id, name, available) values (";
     queryString += section.getParentChapter()->getId();
@@ -384,12 +386,14 @@ ServerResponse Server::getTextbookDetails(QUuid sessionID, int textbookID, Textb
                      << query.value(4).toString() << ")";
 
             *textbook = new Textbook(
-                query.value(0).toInt(),
-                query.value(1).toString(),
-                query.value(2).toInt(),
-                query.value(3).toBool(),
-                query.value(4).toString()
-            );
+                        query.value(0).toInt(),
+                        query.value(1).toString(),
+                        "<not implemented: Server.cpp:389>",
+                        "<not implemented: Server.cpp:390>",
+                        query.value(2).toInt(),
+                        query.value(3).toBool(),
+                        query.value(4).toString()
+                        );
         }
 
         // TODO : send textbook object to client
diff --git a/cuTPS-server/Server.h b/cuTPS-server/Server.h
index 61419ff..6527ac5 100755
--- a/cuTPS-server/Server.h
+++ b/cuTPS-server/Server.h
@@ -16,7 +16,7 @@
 #include <QSqlDatabase>
 #include <QSqlQuery>
 
-#include "Utils.h"
+#include "Defines.h"
 #include "DatabaseManager.h"
 #include "Entity/Course.h"
 #include "Entity/Textbook.h"
@@ -24,6 +24,8 @@
 #include "Entity/Chapter.h"
 #include "Entity/Section.h"
 
+using namespace TPSDef;
+
 class Server : public QObject
 {
     Q_OBJECT
diff --git a/cuTPS-server/ServerNetworking/NetClient.cpp b/cuTPS-server/ServerNetworking/NetClient.cpp
index 148e039..da4278f 100644
--- a/cuTPS-server/ServerNetworking/NetClient.cpp
+++ b/cuTPS-server/ServerNetworking/NetClient.cpp
@@ -2,20 +2,19 @@
 
 #include <functional>
 
-#include "ServerAsync.h"
-#include "Utils.h"
-#include "Defines.h"
-
 #include <QByteArray>
 #include <QMap>
 
+#include "ServerAsync.h"
+#include "Defines.h"
+
 #include "ClientTaskHandling/LoginTaskFactory.h"
 #include "ClientTaskHandling/UserTaskFactory.h"
 #include "ClientTaskHandling/ContentMgrTaskFactory.h"
 #include "ClientTaskHandling/AdminTaskFactory.h"
 #include "ClientTaskHandling/SUTaskFactory.h"
 
-using namespace TPSNetProtocolDefs;
+using namespace TPSNetProtocolDef;
 
 NetClient::NetClient(QObject *parent) :
     QObject(parent)
@@ -74,7 +73,7 @@ void NetClient::disconnected()
 void NetClient::readyRead()
 {
     QDataStream in(socket);
-    in.setVersion(TPSNetProtocolDefs::PROTOCOL_VER);
+    in.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
     if (blockSize == 0)
     {
diff --git a/cuTPS-server/Storage.h b/cuTPS-server/Storage.h
index c4833e4..a08d726 100644
--- a/cuTPS-server/Storage.h
+++ b/cuTPS-server/Storage.h
@@ -12,9 +12,6 @@
 #include "Entity/Chapter.h"
 #include "Entity/Section.h"
 
-// TODO: remove this
-#include "Utils.h"
-
 class Storage : public QObject
 {
     Q_OBJECT
diff --git a/cuTPS-server/cuTPS-server.pro b/cuTPS-server/cuTPS-server.pro
index 0a29a1c..b2f0883 100644
--- a/cuTPS-server/cuTPS-server.pro
+++ b/cuTPS-server/cuTPS-server.pro
@@ -17,7 +17,6 @@ TEMPLATE = app
 SOURCES += main.cpp \
     DatabaseManager.cpp \
     Server.cpp \
-    ClientTaskHandling/AddBookTask.cpp \
     ClientTaskHandling/AddCourseTask.cpp \
     ClientTaskHandling/GetBookDetailsTask.cpp \
     ClientTaskHandling/GetRequiredBooksTask.cpp \
@@ -34,12 +33,17 @@ SOURCES += main.cpp \
     ClientTaskHandling/AdminTaskFactory.cpp \
     ClientTaskHandling/GenerateReportTask.cpp \
     ClientTaskHandling/SUTaskFactory.cpp \
-    ServerAPI.cpp
+    ServerAPI.cpp \
+    ClientTaskHandling/GetAllBooksTask.cpp \
+    ClientTaskHandling/AddItemTask.cpp \
+    ClientTaskHandling/AddUserTask.cpp \
+    ClientTaskHandling/RmItemTask.cpp \
+    ClientTaskHandling/BanUserTask.cpp \
+    ClientTaskHandling/GetAllCoursesTask.cpp
 
 HEADERS += \
     DatabaseManager.h \
     Server.h \
-    ClientTaskHandling/AddBookTask.h \
     ClientTaskHandling/AddCourseTask.h \
     ClientTaskHandling/GetBookDetailsTask.h \
     ClientTaskHandling/GetRequiredBooksTask.h \
@@ -56,7 +60,13 @@ HEADERS += \
     ClientTaskHandling/AdminTaskFactory.h \
     ClientTaskHandling/GenerateReportTask.h \
     ClientTaskHandling/SUTaskFactory.h \
-    ServerAPI.h
+    ServerAPI.h \
+    ClientTaskHandling/GetAllBooksTask.h \
+    ClientTaskHandling/AddItemTask.h \
+    ClientTaskHandling/AddUserTask.h \
+    ClientTaskHandling/RmItemTask.h \
+    ClientTaskHandling/BanUserTask.h \
+    ClientTaskHandling/GetAllCoursesTask.h
 
 
 OTHER_FILES += \
-- 
1.7.9.5


From c71e435010fdb0e163b42ca2565ec37afad5ef5e Mon Sep 17 00:00:00 2001
From: zachuserid <z.renaud5@gmail.com>
Date: Sun, 7 Dec 2014 17:06:55 -0500
Subject: [PATCH 04/16] adding delete/modify content GUI options, some api
 usage

---
 cuTPS-client/AddBookControl.cpp          |   12 +++-
 cuTPS-client/AddBookControl.h            |   17 +++--
 cuTPS-client/AddChapterWindow.cpp        |   13 +++-
 cuTPS-client/AddChapterWindow.h          |   10 ++-
 cuTPS-client/AddSectionWindow.cpp        |   14 +++-
 cuTPS-client/AddSectionWindow.h          |   13 +++-
 cuTPS-client/AddTextbookWindow.cpp       |   14 +++-
 cuTPS-client/AddTextbookWindow.h         |   10 ++-
 cuTPS-client/ContentRequestAPI.cpp       |   15 ++++
 cuTPS-client/ContentRequestAPI.h         |    3 +
 cuTPS-client/CourseDetailsWindow.cpp     |    3 +-
 cuTPS-client/CourseRequestAPI.cpp        |   10 +++
 cuTPS-client/CourseRequestAPI.h          |    2 +
 cuTPS-client/ManageContentControl.cpp    |   71 +++++++++++++++----
 cuTPS-client/ManageContentControl.h      |    7 +-
 cuTPS-client/ManageContentListWindow.cpp |  112 +++++++++++++++++++++++++++---
 cuTPS-client/ManageContentListWindow.h   |   10 +++
 cuTPS-client/ManageContentListWindow.ui  |   34 ++++++++-
 cuTPS-client/ManageCourseControl.cpp     |   17 ++++-
 cuTPS-common/Entity/User.cpp             |    4 +-
 cuTPS-common/Entity/User.h               |    2 +-
 21 files changed, 342 insertions(+), 51 deletions(-)

diff --git a/cuTPS-client/AddBookControl.cpp b/cuTPS-client/AddBookControl.cpp
index 5b8477c..4a53723 100644
--- a/cuTPS-client/AddBookControl.cpp
+++ b/cuTPS-client/AddBookControl.cpp
@@ -1,6 +1,6 @@
 #include "AddBookControl.h"
 
-AddBookControl::AddBookControl(ClientNetworkHandler &serverAPI)
+AddBookControl::AddBookControl(ContentRequestAPI *serverAPI)
     : network(serverAPI) {}
 
 AddBookControl::~AddBookControl() {
@@ -8,5 +8,13 @@ AddBookControl::~AddBookControl() {
 }
 
 void AddBookControl::addBook(QUuid &reqId, Textbook &newTextbook) {
-    reqId = network.addBook(newTextbook);
+    reqId = network->addBook(newTextbook);
+}
+
+void AddBookControl::addChapter(QUuid &reqId, int textId, Chapter &newChapter) {
+    reqId = network->addChapter(textId, newChapter);
+}
+
+void AddBookControl::addSection(QUuid &reqId, int textId, int chapId, Section &newSection) {
+    reqId = network->addSection(textId, chapId, newSection);
 }
diff --git a/cuTPS-client/AddBookControl.h b/cuTPS-client/AddBookControl.h
index 6a85560..8c59352 100644
--- a/cuTPS-client/AddBookControl.h
+++ b/cuTPS-client/AddBookControl.h
@@ -2,28 +2,35 @@
 // Type: Control
 // Description:
 //     This class is responsible for invoking the client
-//     side API method in the network handler for adding
-//     a book into availability.
+//     side API method in the network handler for sellable
+//     items into availability.
+// Traceability:
+//   AddItemControl class in the ContentManagement subsystem
+//   This class is a Control proxy to the ContentRequestAPI.
 
 #ifndef ADDBOOKCONTROL_H
 #define ADDBOOKCONTROL_H
 
 #include "Defines.h"
-#include "ClientNetworkHandler.h"
+#include "ContentRequestAPI.h"
 #include "Entity/Textbook.h"
+#include "Entity/Chapter.h"
+#include "Entity/Section.h"
 
 class AddBookControl {
 
     private:
-        ClientNetworkHandler &network;
+        ContentRequestAPI *network;
 
     public:
-        AddBookControl(ClientNetworkHandler &);
+        AddBookControl(ContentRequestAPI *);
         ~AddBookControl();
 
         // Add the book object to the database through the
         // network handler, return the request identifier
         void addBook(QUuid &, Textbook &);
+        void addChapter(QUuid &, int, Chapter &);
+        void addSection(QUuid &, int, int, Section &);
 
 };
 
diff --git a/cuTPS-client/AddChapterWindow.cpp b/cuTPS-client/AddChapterWindow.cpp
index d83831d..0b97e83 100644
--- a/cuTPS-client/AddChapterWindow.cpp
+++ b/cuTPS-client/AddChapterWindow.cpp
@@ -1,9 +1,10 @@
 #include "AddChapterWindow.h"
 #include "ui_AddChapterWindow.h"
 
-AddChapterWindow::AddChapterWindow(QWidget *parent, int bookID) :
+AddChapterWindow::AddChapterWindow(QWidget *parent, int bookID, int chapID) :
     QDialog(parent),
     bookId(bookID),
+    chapId(chapID),
     ui(new Ui::AddChapterWindow)
 {
     ui->setupUi(this);
@@ -33,7 +34,15 @@ void AddChapterWindow::on_addButton_clicked()
 
     bool available = this->ui->avaiBox->isChecked();
 
-    emit addChapter(name, priceCents, available, bookId);
+    emit addChapter(name, chapId, priceCents, available, bookId);
 
     this->close();
 }
+
+void AddChapterWindow::populateValues(Chapter *chapter)
+{
+    this->ui->nameEdit->setText(chapter->getName());
+    this->ui->priceEdit->setText(QString::number(
+                                     chapter->getPriceCents() / 100));
+    this->ui->avaiBox->setChecked(chapter->getAvailability());
+}
diff --git a/cuTPS-client/AddChapterWindow.h b/cuTPS-client/AddChapterWindow.h
index d1a3de4..dc96042 100644
--- a/cuTPS-client/AddChapterWindow.h
+++ b/cuTPS-client/AddChapterWindow.h
@@ -7,6 +7,8 @@
 
 #include <QDialog>
 
+#include "Entity/Chapter.h"
+
 namespace Ui {
 class AddChapterWindow;
 }
@@ -17,11 +19,14 @@ class AddChapterWindow : public QDialog
 
 public:
     explicit AddChapterWindow(QWidget *parent = 0,
-                              int bookID = -1);
+                              int bookID = -1,
+                              int chapId = -1);
     ~AddChapterWindow();
 
+    void populateValues(Chapter *); // for modify
+
 signals:
-    void addChapter(QString, int, bool, int);
+    void addChapter(QString, int, int, bool, int);
 
 private slots:
     void on_cancelButton_clicked();
@@ -31,6 +36,7 @@ private slots:
 private:
     Ui::AddChapterWindow *ui;
     int bookId;
+    int chapId; // in case of modify
 };
 
 #endif // ADDCHAPTERWINDOW_H
diff --git a/cuTPS-client/AddSectionWindow.cpp b/cuTPS-client/AddSectionWindow.cpp
index c6d23e1..d803479 100644
--- a/cuTPS-client/AddSectionWindow.cpp
+++ b/cuTPS-client/AddSectionWindow.cpp
@@ -1,9 +1,11 @@
 #include "AddSectionWindow.h"
 #include "ui_AddSectionWindow.h"
 
-AddSectionWindow::AddSectionWindow(QWidget *parent, int chapID) :
+AddSectionWindow::AddSectionWindow(QWidget *parent, int bookID, int chapID, int sectID) :
     QDialog(parent),
+    bookId(bookID),
     chapterId(chapID),
+    secId(sectID),
     ui(new Ui::AddSectionWindow)
 {
     ui->setupUi(this);
@@ -33,7 +35,15 @@ void AddSectionWindow::on_addButton_clicked()
 
     bool available = this->ui->avaiBox->isChecked();
 
-    emit addSection(name, priceCents, available, this->chapterId);
+    emit addSection(name, secId, priceCents, available, this->bookId, this->chapterId);
 
     this->close();
 }
+
+void AddSectionWindow::populateValues(Section *section)
+{
+    this->ui->nameEdit->setText(section->getName());
+    this->ui->priceEdit->setText(QString::number(
+                                     section->getPriceCents() / 100));
+    this->ui->avaiBox->setChecked(section->getAvailability());
+}
diff --git a/cuTPS-client/AddSectionWindow.h b/cuTPS-client/AddSectionWindow.h
index 3bc6751..d406f11 100644
--- a/cuTPS-client/AddSectionWindow.h
+++ b/cuTPS-client/AddSectionWindow.h
@@ -8,6 +8,8 @@
 
 #include <QDialog>
 
+#include "Entity/Section.h"
+
 namespace Ui {
 class AddSectionWindow;
 }
@@ -17,11 +19,16 @@ class AddSectionWindow : public QDialog
     Q_OBJECT
 
 public:
-    explicit AddSectionWindow(QWidget *parent = 0, int chapId = -1);
+    explicit AddSectionWindow(QWidget *parent = 0,
+                              int textId = -1,
+                              int chapId = -1,
+                              int sectId = -1);
     ~AddSectionWindow();
 
+    void populateValues(Section *);
+
 signals:
-    void addSection(QString, int, bool, int);
+    void addSection(QString, int, int, bool, int, int);
 
 private slots:
     void on_cancelButton_clicked();
@@ -31,6 +38,8 @@ private slots:
 private:
     Ui::AddSectionWindow *ui;
     int chapterId;
+    int bookId;
+    int secId; // in case of modify
 };
 
 #endif // ADDSECTIONWINDOW_H
diff --git a/cuTPS-client/AddTextbookWindow.cpp b/cuTPS-client/AddTextbookWindow.cpp
index 5ef911f..e739489 100644
--- a/cuTPS-client/AddTextbookWindow.cpp
+++ b/cuTPS-client/AddTextbookWindow.cpp
@@ -3,8 +3,9 @@
 
 #include <QDebug>
 
-AddTextbookWindow::AddTextbookWindow(QWidget *parent) :
+AddTextbookWindow::AddTextbookWindow(QWidget *parent, int bookID) :
     QDialog(parent),
+    bookId(bookID),
     ui(new Ui::AddTextbookWindow)
 {
     ui->setupUi(this);
@@ -36,7 +37,16 @@ void AddTextbookWindow::on_addButton_clicked()
 
     QString isbn = this->ui->isbnEdit->text();
 
-    emit addTextbook(name, priceCents, available, isbn);
+    emit addTextbook(name, bookId, priceCents, available, isbn);
 
     this->close();
 }
+
+void AddTextbookWindow::populateValues(Textbook *book)
+{
+    this->ui->nameEdit->setText(book->getName());
+    this->ui->isbnEdit->setText(book->getISBN());
+    this->ui->priceEdit->setText(QString::number(
+                                     book->getPriceCents() / 100));
+    this->ui->avaiBox->setChecked(book->getAvailability());
+}
diff --git a/cuTPS-client/AddTextbookWindow.h b/cuTPS-client/AddTextbookWindow.h
index 3dbb3a4..1f5dd90 100644
--- a/cuTPS-client/AddTextbookWindow.h
+++ b/cuTPS-client/AddTextbookWindow.h
@@ -7,6 +7,8 @@
 
 #include <QDialog>
 
+#include "Entity/Textbook.h"
+
 namespace Ui {
 class AddTextbookWindow;
 }
@@ -16,11 +18,14 @@ class AddTextbookWindow : public QDialog
     Q_OBJECT
 
 public:
-    explicit AddTextbookWindow(QWidget *parent = 0);
+    explicit AddTextbookWindow(QWidget *parent = 0, int bookId = -1);
     ~AddTextbookWindow();
 
+    void populateValues(Textbook *);
+
 signals:
-    void addTextbook(QString, int, bool, QString);
+    void addTextbook(QString, int, int, bool, QString);
+
 private slots:
     void on_cancelButton_clicked();
 
@@ -28,6 +33,7 @@ private slots:
 
 private:
     Ui::AddTextbookWindow *ui;
+    int bookId; // in case of modify
 };
 
 #endif // ADDTEXTBOOKWINDOW_H
diff --git a/cuTPS-client/ContentRequestAPI.cpp b/cuTPS-client/ContentRequestAPI.cpp
index f6e579d..870f531 100644
--- a/cuTPS-client/ContentRequestAPI.cpp
+++ b/cuTPS-client/ContentRequestAPI.cpp
@@ -5,3 +5,18 @@ ContentRequestAPI::ContentRequestAPI(QObject *parent, ClientNetworkHandler *net)
 {
     this->networking = net;
 }
+
+QUuid ContentRequestAPI::addBook(Textbook& text)
+{
+    return this->networking->addBook(text);
+}
+
+QUuid ContentRequestAPI::addChapter(int bookId, Chapter& chapter)
+{
+    return this->networking->addChapter(bookId, chapter);
+}
+
+QUuid ContentRequestAPI::addSection(int bookId, int chapId, Section& section)
+{
+    return this->networking->addSection(bookId, chapId, section);
+}
diff --git a/cuTPS-client/ContentRequestAPI.h b/cuTPS-client/ContentRequestAPI.h
index 609eeb7..87b2760 100644
--- a/cuTPS-client/ContentRequestAPI.h
+++ b/cuTPS-client/ContentRequestAPI.h
@@ -11,6 +11,9 @@ class ContentRequestAPI : public QObject
 
     public:
         explicit ContentRequestAPI(QObject *parent = 0, ClientNetworkHandler *net = NULL);
+        QUuid addBook(Textbook&);
+        QUuid addChapter(int, Chapter&);
+        QUuid addSection(int, int, Section&);
 
     signals:
 
diff --git a/cuTPS-client/CourseDetailsWindow.cpp b/cuTPS-client/CourseDetailsWindow.cpp
index 87848a3..a89113a 100644
--- a/cuTPS-client/CourseDetailsWindow.cpp
+++ b/cuTPS-client/CourseDetailsWindow.cpp
@@ -77,8 +77,9 @@ void CourseDetailsWindow::displayCourseDetails(Course *c)
     this->ui->courseNameEdit->setText(c->getCourseName());
 
     this->ui->bookList->clear();
+    // TODO: this should display the required book titles, not IDs
     for (int id: (c->getRequiredTextIds())) {
-        this->ui->bookList->addItem(QString::number(id));
+        this->ui->bookList->addItem("textbook ID: " + QString::number(id));
     }
 }
 
diff --git a/cuTPS-client/CourseRequestAPI.cpp b/cuTPS-client/CourseRequestAPI.cpp
index cfa0d90..fef4839 100644
--- a/cuTPS-client/CourseRequestAPI.cpp
+++ b/cuTPS-client/CourseRequestAPI.cpp
@@ -16,3 +16,13 @@ QUuid CourseRequestAPI::addCourse(Course &c)
     QUuid id;
     return id;
 }
+
+QUuid CourseRequestAPI::linkText(int courseId, int textId)
+{
+    this->networking->linkTextbook(courseId, textId);
+}
+
+QUuid CourseRequestAPI::unlinkText(int courseId, int textId)
+{
+    this->networking->unlinkTextbook(courseId, textId);
+}
diff --git a/cuTPS-client/CourseRequestAPI.h b/cuTPS-client/CourseRequestAPI.h
index c62fa57..0f40ad9 100644
--- a/cuTPS-client/CourseRequestAPI.h
+++ b/cuTPS-client/CourseRequestAPI.h
@@ -17,6 +17,8 @@ public:
     explicit CourseRequestAPI(QObject *parent = 0,
                               ClientNetworkHandler *net = NULL);
     QUuid addCourse(Course&);
+    QUuid linkText(int, int);
+    QUuid unlinkText(int, int);
 
 signals:
 
diff --git a/cuTPS-client/ManageContentControl.cpp b/cuTPS-client/ManageContentControl.cpp
index fc2040d..1fc387d 100644
--- a/cuTPS-client/ManageContentControl.cpp
+++ b/cuTPS-client/ManageContentControl.cpp
@@ -1,5 +1,6 @@
 #include "ManageContentControl.h"
 #include "ContentManagementInterface.h"
+#include "AddBookControl.h"
 
 #include <QDebug>
 
@@ -17,6 +18,8 @@ ManageContentControl::ManageContentControl(ContentManagementInterface *backWin,
     connect(contentManagementWin, SIGNAL(navigateBack()),
             cmIF, SLOT(navigateBack()));
 
+    connect(contentManagementWin, SIGNAL(deleteItem(int)),
+            this, SLOT(deleteItem(int)));
     // TODO: connect slots for requests that the networking will signal
 }
 
@@ -27,37 +30,81 @@ ManageContentControl::~ManageContentControl()
 }
 
 void ManageContentControl::addTextbook(QString name,
+                                       int bookId,
                                        int priceCents,
                                        bool isAvailable,
                                        QString isbn)
 {
-    qDebug() << "Adding new textbook " << name << " " << priceCents
-             << ", available? " << isAvailable << " - " << isbn;
+    qDebug() << "Add/modify textbook " << name << ", id=" << bookId
+             << " " << priceCents << ", available? "
+             << isAvailable << " - " << isbn;
 
-    // TODO: create AddTextbookControl with ContentRequestsAPI
-    // to perform the request operation
+    AddBookControl addBookCtrl(this->requestAPI);
+
+    QUuid reqId;
+
+    if (bookId == -1) {
+        Textbook book(0, name, "", "", priceCents, isAvailable, isbn);
+
+        // TODO: we currently ignore response for this request
+        addBookCtrl.addBook(reqId, book);
+    } else {
+        // TODO: create a modifyBookCtrl...
+    }
 }
 
 void ManageContentControl::addChapter(QString name,
+                                      int chapId,
                                       int priceCents,
                                       bool isAvailable,
                                       int bookId)
 {
-    qDebug() << "Adding new chapter " << name << " " << priceCents
-             << "to bookId = " << bookId << ", isAvailable? " << isAvailable;
+    qDebug() << "Add/modify chapter " << name << ", id=" << chapId
+             << " " << priceCents << "to bookId = " << bookId
+             << ", isAvailable? " << isAvailable;
+
+    AddBookControl addBookCtrl(this->requestAPI);
 
-    // TODO: create AddChapterControl with ContentRequestAPI
-    // to handle the network request
+    QUuid reqId;
+
+    if (chapId == -1) {
+        Chapter chapter(NULL, 0, name, priceCents, isAvailable);
+
+        // TODO: we currently ignore response for this request
+        addBookCtrl.addChapter(reqId, bookId, chapter);
+    } else {
+        // TODO: create a modifyBookCtrl..
+    }
 }
 
 void ManageContentControl::addSection(QString name,
+                                      int secId,
                                       int priceCents,
                                       bool isAvailable,
+                                      int bookId,
                                       int chapterId)
 {
-    qDebug() << "Adding new section " << name << " " << priceCents
-             << "to chapterId = " << chapterId << ", isAvailable? " << isAvailable;
+    qDebug() << "Add/modify section " << name << ", id=" << secId
+             << " " << priceCents << "to chapterId = " << chapterId
+             << "and bookId = " << bookId << ", isAvailable? " << isAvailable;
+
+    AddBookControl addBookCtrl(this->requestAPI);
+
+    QUuid reqId;
+
+    if (secId == -1) {
+        Section section(NULL, 0, name, priceCents, isAvailable);
+
+        // TODO: we currently ignore response for this request
+        addBookCtrl.addSection(reqId, bookId, chapterId, section);
+    } else {
+        // TODO: create a modifyBookControl...
+    }
+}
+
+void ManageContentControl::deleteItem(int itemId)
+{
+    qDebug() << "Deleting item id " << itemId;
 
-    // TODO: create AddSectionControl with ContentRequestAPI
-    // to handle the network request
+    // TODO: create a DeleteItemControl with the requestAPI
 }
diff --git a/cuTPS-client/ManageContentControl.h b/cuTPS-client/ManageContentControl.h
index e80c1a8..1e7b92a 100644
--- a/cuTPS-client/ManageContentControl.h
+++ b/cuTPS-client/ManageContentControl.h
@@ -24,9 +24,10 @@ class ManageContentControl : public QObject
         Q_OBJECT
 
     public slots:
-        void addTextbook(QString, int, bool, QString);
-        void addChapter(QString,int,bool, int);
-        void addSection(QString, int, bool, int);
+        void addTextbook(QString, int, int, bool, QString);
+        void addChapter(QString, int, int, bool, int);
+        void addSection(QString, int, int, bool, int, int);
+        void deleteItem(int);
 
     public:
         ManageContentControl(ContentManagementInterface *, ClientNetworkHandler *);
diff --git a/cuTPS-client/ManageContentListWindow.cpp b/cuTPS-client/ManageContentListWindow.cpp
index 847a0b1..4c93cc5 100644
--- a/cuTPS-client/ManageContentListWindow.cpp
+++ b/cuTPS-client/ManageContentListWindow.cpp
@@ -54,6 +54,9 @@ void ManageContentListWindow::displayBookList()
 {
     qDebug() << "Displaying book list";
 
+    this->ui->modifyItemButton->setEnabled(false);
+    this->ui->deleteItemButton->setEnabled(false);
+
     // Request all books (id, title) from server
     ////////// pretend for now that this list represents actual data: /////////
     QVector<SellableItem*> *books = new QVector<SellableItem*>();
@@ -86,6 +89,9 @@ void ManageContentListWindow::displayChapterList(int bookId)
 {
     qDebug() << "Displaying chapter list for bookId = " << bookId;
 
+    this->ui->modifyItemButton->setEnabled(false);
+    this->ui->deleteItemButton->setEnabled(false);
+
     this->bookId = bookId;
 
     // Request all chapters (id, title) from server for bookId
@@ -121,6 +127,9 @@ void ManageContentListWindow::displaySectionList(int chapterId)
 {
     qDebug() << "Displaying section list for chapterId = " << chapterId;
 
+    this->ui->modifyItemButton->setEnabled(false);
+    this->ui->deleteItemButton->setEnabled(false);
+
     this->chapterId = chapterId;
 
     // Request all sections (id, title) from server for chapterId
@@ -152,6 +161,9 @@ void ManageContentListWindow::displaySectionList(int chapterId)
 
 void ManageContentListWindow::on_contentList_clicked(const QModelIndex &index)
 {
+    this->ui->modifyItemButton->setEnabled(true);
+    this->ui->deleteItemButton->setEnabled(true);
+
     qDebug() << "Single click on item at index: " << QString::number(index.row());
 
     SellableItem *selectedItem = this->listedItems->at(index.row());
@@ -218,10 +230,10 @@ void ManageContentListWindow::on_newContentButton_clicked()
 void ManageContentListWindow::addTextbook()
 {
     qDebug() << "ManageContentListWindow::addTextbook";
-    this->addBookWin = new AddTextbookWindow(this);
+    this->addBookWin = new AddTextbookWindow(this, -1);
 
-    connect(this->addBookWin, SIGNAL(addTextbook(QString,int,bool,QString)),
-            this->contentManagementCtrl, SLOT(addTextbook(QString,int,bool,QString)));
+    connect(this->addBookWin, SIGNAL(addTextbook(QString,int,int,bool,QString)),
+            this->contentManagementCtrl, SLOT(addTextbook(QString,int,int,bool,QString)));
 
     this->addBookWin->setModal(true);
     this->addBookWin->show();
@@ -231,10 +243,10 @@ void ManageContentListWindow::addChapter()
 {
     qDebug() << "ManageContentListWindow::addChapter";
 
-    this->addChapterWin = new AddChapterWindow(this, this->bookId);
+    this->addChapterWin = new AddChapterWindow(this, this->bookId, -1);
 
-    connect(this->addChapterWin, SIGNAL(addChapter(QString,int,bool,int)),
-            this->contentManagementCtrl, SLOT(addChapter(QString,int,bool,int)));
+    connect(this->addChapterWin, SIGNAL(addChapter(QString,int,int,bool,int)),
+            this->contentManagementCtrl, SLOT(addChapter(QString,int,int,bool,int)));
 
     this->addChapterWin->setModal(true);
     this->addChapterWin->show();
@@ -244,11 +256,93 @@ void ManageContentListWindow::addSection()
 {
    qDebug() << "ManageContentListWindow::addSection()";
 
-   this->addSectionWin = new AddSectionWindow(this, this->chapterId);
+   this->addSectionWin = new AddSectionWindow(this, this->bookId, this->chapterId, -1);
 
-   connect(this->addSectionWin, SIGNAL(addSection(QString,int,bool,int)),
-           this->contentManagementCtrl, SLOT(addSection(QString,int,bool,int)));
+   connect(this->addSectionWin, SIGNAL(addSection(QString,int,int,bool,int,int)),
+           this->contentManagementCtrl, SLOT(addSection(QString,int,int,bool,int,int)));
 
    this->addSectionWin->setModal(true);
    this->addSectionWin->show();
 }
+
+void ManageContentListWindow::on_modifyItemButton_clicked()
+{
+    switch (this->contentDepth) {
+        case (0):
+            this->modTextbook();
+            break;
+        case (1):
+            this->modChapter();
+            break;
+        case (2):
+            this->modSection();
+            break;
+    }
+}
+
+void ManageContentListWindow::modTextbook()
+{
+    qDebug() << "ManageContentListWindow::modTextbook";
+
+    Textbook *item = dynamic_cast<Textbook *>(this->getSelectedItem());
+    if (item == NULL) return;
+
+    this->addBookWin = new AddTextbookWindow(this, item->getId());
+
+    this->addBookWin->populateValues(item);
+
+    connect(this->addBookWin, SIGNAL(addTextbook(QString,int,int,bool,QString)),
+            this->contentManagementCtrl, SLOT(addTextbook(QString,int,int,bool,QString)));
+
+    this->addBookWin->setModal(true);
+    this->addBookWin->show();
+}
+
+void ManageContentListWindow::modChapter()
+{
+    qDebug() << "ManageContentListWindow::modChapter";
+
+    Chapter *item = dynamic_cast<Chapter *>(this->getSelectedItem());
+    if (item == NULL) return;
+
+    this->addChapterWin = new AddChapterWindow(this, this->bookId, item->getId());
+
+    this->addChapterWin->populateValues(item);
+
+    connect(this->addChapterWin, SIGNAL(addChapter(QString,int,int,bool,int)),
+            this->contentManagementCtrl, SLOT(addChapter(QString,int,int,bool,int)));
+
+    this->addChapterWin->setModal(true);
+    this->addChapterWin->show();
+}
+
+void ManageContentListWindow::modSection()
+{
+    qDebug() << "ManageContentListWindow::modSection()";
+
+    Section *item = dynamic_cast<Section *>(this->getSelectedItem());
+    if (item == NULL) return;
+
+    this->addSectionWin = new AddSectionWindow(this, this->bookId,
+                                               this->chapterId, item->getId());
+
+    this->addSectionWin->populateValues(item);
+
+    connect(this->addSectionWin, SIGNAL(addSection(QString,int,int,bool,int,int)),
+            this->contentManagementCtrl, SLOT(addSection(QString,int,int,bool,int,int)));
+
+    this->addSectionWin->setModal(true);
+    this->addSectionWin->show();
+}
+
+void ManageContentListWindow::on_deleteItemButton_clicked()
+{
+    int itemId = this->getSelectedItem()->getId();
+    emit deleteItem(itemId);
+}
+
+SellableItem* ManageContentListWindow::getSelectedItem()
+{
+    int index = this->ui->contentList->currentIndex().row();
+    return this->listedItems->at(index);
+}
diff --git a/cuTPS-client/ManageContentListWindow.h b/cuTPS-client/ManageContentListWindow.h
index 31e896b..6c643b3 100644
--- a/cuTPS-client/ManageContentListWindow.h
+++ b/cuTPS-client/ManageContentListWindow.h
@@ -32,6 +32,7 @@ public:
 
 signals:
     void navigateBack();
+    void deleteItem(int);
 
 private slots:
     void on_backButton_clicked();
@@ -44,7 +45,13 @@ private slots:
 
     void on_newContentButton_clicked();
 
+    void on_deleteItemButton_clicked();
+
+    void on_modifyItemButton_clicked();
+
 private:
+    SellableItem *getSelectedItem();
+
     int contentDepth;
 
     Ui::ManageContentListWindow *ui;
@@ -74,6 +81,9 @@ private:
     void addTextbook();
     void addChapter();
     void addSection();
+    void modTextbook();
+    void modChapter();
+    void modSection();
 };
 
 #endif // MANAGECONTENTLISTWINDOW_H
diff --git a/cuTPS-client/ManageContentListWindow.ui b/cuTPS-client/ManageContentListWindow.ui
index 8938b8f..b57fae2 100644
--- a/cuTPS-client/ManageContentListWindow.ui
+++ b/cuTPS-client/ManageContentListWindow.ui
@@ -78,13 +78,45 @@
       <x>620</x>
       <y>20</y>
       <width>22</width>
-      <height>24</height>
+      <height>21</height>
      </rect>
     </property>
     <property name="text">
      <string>+</string>
     </property>
    </widget>
+   <widget class="QPushButton" name="deleteItemButton">
+    <property name="enabled">
+     <bool>false</bool>
+    </property>
+    <property name="geometry">
+     <rect>
+      <x>440</x>
+      <y>20</y>
+      <width>88</width>
+      <height>27</height>
+     </rect>
+    </property>
+    <property name="text">
+     <string>Delete Item</string>
+    </property>
+   </widget>
+   <widget class="QPushButton" name="modifyItemButton">
+    <property name="enabled">
+     <bool>false</bool>
+    </property>
+    <property name="geometry">
+     <rect>
+      <x>530</x>
+      <y>20</y>
+      <width>88</width>
+      <height>27</height>
+     </rect>
+    </property>
+    <property name="text">
+     <string>Modify Item</string>
+    </property>
+   </widget>
   </widget>
   <widget class="QMenuBar" name="menubar">
    <property name="geometry">
diff --git a/cuTPS-client/ManageCourseControl.cpp b/cuTPS-client/ManageCourseControl.cpp
index df288d2..44bb7d5 100644
--- a/cuTPS-client/ManageCourseControl.cpp
+++ b/cuTPS-client/ManageCourseControl.cpp
@@ -1,5 +1,6 @@
 #include "ManageCourseControl.h"
 #include "ContentManagementInterface.h"
+#include "AddCourseControl.h"
 
 #include <QDebug>
 
@@ -42,7 +43,13 @@ void ManageCourseControl::saveNewCourse(QString code, QString name)
 {
     qDebug() << "Saving new course " << code << ": " << name;
 
-    // TODO: create an AddCourseControl with the courseReqAPI and delegate.
+    AddCourseControl ctrl(this->requestAPI);
+
+    Course c(code, name);
+
+    // TODO: we are not currently handling the response for this
+    QUuid id;
+    ctrl.addCourse(id, c);
 
     this->courseDetailsWin->displayCourseList();
 }
@@ -68,14 +75,18 @@ void ManageCourseControl::removeRequiredBook(int bookId, int courseId)
 {
     qDebug() << "Removing book with id=" << bookId
              << " from required texts for course id=" << courseId;
+
+    // TODO: ignoring response from this request
+    this->requestAPI->unlinkText(courseId, bookId);
 }
 
 void ManageCourseControl::addRequiredBooks(QVector<int>& books, int courseId)
 {
-    // TODO: spawn an AddRequiredBooks control to handle the requestAPI call
-
     for (int id: books) {
         qDebug() << "Adding bookId = " << id
                  << " as required text for course ID = " << courseId;
+
+        // TODO: ignoring response from this request
+        this->requestAPI->linkText(courseId, id);
     }
 }
diff --git a/cuTPS-common/Entity/User.cpp b/cuTPS-common/Entity/User.cpp
index e8766b6..26daf46 100644
--- a/cuTPS-common/Entity/User.cpp
+++ b/cuTPS-common/Entity/User.cpp
@@ -1,11 +1,11 @@
 #include "User.h"
 
 User::User(QString name, QString uname)
-    : name(name), username(uname)
+    : name(name), username(uname), role(None)
 {}
 
 User::User(int id, QString n, QString u)
-    : userId(id), name(n), username(u)
+    : userId(id), name(n), username(u), role(None)
 {}
 
 User::~User() {}
diff --git a/cuTPS-common/Entity/User.h b/cuTPS-common/Entity/User.h
index 55678a0..d911389 100644
--- a/cuTPS-common/Entity/User.h
+++ b/cuTPS-common/Entity/User.h
@@ -41,7 +41,7 @@ private:
     qint32 userId;
     QString name;
     QString username;
-    Role role = None;
+    Role role;
 };
 
 #endif // USER_H
-- 
1.7.9.5


From 99bb45d7d65d9d6bf5681f2a0102367fe72c5b98 Mon Sep 17 00:00:00 2001
From: zachuserid <z.renaud5@gmail.com>
Date: Sun, 7 Dec 2014 21:12:26 -0500
Subject: [PATCH 05/16] Added missing control classes, preparing for client
 API requests

---
 cuTPS-client/AddSectionWindow.ui         |    2 +-
 cuTPS-client/ContentRequestAPI.cpp       |    8 ++++++
 cuTPS-client/ContentRequestAPI.h         |    1 +
 cuTPS-client/CourseRequestAPI.cpp        |   16 ++++++++++++
 cuTPS-client/CourseRequestAPI.h          |    2 ++
 cuTPS-client/DeleteCourseControl.cpp     |   11 ++++++++
 cuTPS-client/DeleteCourseControl.h       |   23 +++++++++++++++++
 cuTPS-client/DeleteItemControl.cpp       |   12 +++++++++
 cuTPS-client/DeleteItemControl.h         |   27 ++++++++++++++++++++
 cuTPS-client/ManageContentControl.cpp    |   41 ++++++++++++++++++++----------
 cuTPS-client/ManageContentListWindow.cpp |    6 +++++
 cuTPS-client/ManageCourseControl.cpp     |    9 +++++++
 cuTPS-client/ModifyCourseControl.cpp     |   11 ++++++++
 cuTPS-client/ModifyCourseControl.h       |   20 +++++++++++++++
 cuTPS-client/ModifyItemControl.cpp       |   27 ++++++++++++++++++++
 cuTPS-client/ModifyItemControl.h         |   32 +++++++++++++++++++++++
 cuTPS-client/cuTPS-client.pro            |   12 +++++++--
 17 files changed, 244 insertions(+), 16 deletions(-)
 create mode 100644 cuTPS-client/DeleteCourseControl.cpp
 create mode 100644 cuTPS-client/DeleteCourseControl.h
 create mode 100644 cuTPS-client/DeleteItemControl.cpp
 create mode 100644 cuTPS-client/DeleteItemControl.h
 create mode 100644 cuTPS-client/ModifyCourseControl.cpp
 create mode 100644 cuTPS-client/ModifyCourseControl.h
 create mode 100644 cuTPS-client/ModifyItemControl.cpp
 create mode 100644 cuTPS-client/ModifyItemControl.h

diff --git a/cuTPS-client/AddSectionWindow.ui b/cuTPS-client/AddSectionWindow.ui
index 3fbabc4..aaec96c 100644
--- a/cuTPS-client/AddSectionWindow.ui
+++ b/cuTPS-client/AddSectionWindow.ui
@@ -11,7 +11,7 @@
    </rect>
   </property>
   <property name="windowTitle">
-   <string>Dialog</string>
+   <string>Add New Section</string>
   </property>
   <widget class="QLabel" name="nameLabel">
    <property name="geometry">
diff --git a/cuTPS-client/ContentRequestAPI.cpp b/cuTPS-client/ContentRequestAPI.cpp
index 870f531..849fa34 100644
--- a/cuTPS-client/ContentRequestAPI.cpp
+++ b/cuTPS-client/ContentRequestAPI.cpp
@@ -20,3 +20,11 @@ QUuid ContentRequestAPI::addSection(int bookId, int chapId, Section& section)
 {
     return this->networking->addSection(bookId, chapId, section);
 }
+
+QUuid ContentRequestAPI::deleteItem(int itemId)
+{
+    // TODO: return the result of the actual networking request
+
+    QUuid id;
+    return id;
+}
diff --git a/cuTPS-client/ContentRequestAPI.h b/cuTPS-client/ContentRequestAPI.h
index 87b2760..aeb31c8 100644
--- a/cuTPS-client/ContentRequestAPI.h
+++ b/cuTPS-client/ContentRequestAPI.h
@@ -14,6 +14,7 @@ class ContentRequestAPI : public QObject
         QUuid addBook(Textbook&);
         QUuid addChapter(int, Chapter&);
         QUuid addSection(int, int, Section&);
+        QUuid deleteItem(int);
 
     signals:
 
diff --git a/cuTPS-client/CourseRequestAPI.cpp b/cuTPS-client/CourseRequestAPI.cpp
index fef4839..6fff7f8 100644
--- a/cuTPS-client/CourseRequestAPI.cpp
+++ b/cuTPS-client/CourseRequestAPI.cpp
@@ -17,6 +17,14 @@ QUuid CourseRequestAPI::addCourse(Course &c)
     return id;
 }
 
+QUuid CourseRequestAPI::modifyCourse(Course &c)
+{
+    QUuid id;
+    return id;
+
+    // TODO: invoke networking method
+}
+
 QUuid CourseRequestAPI::linkText(int courseId, int textId)
 {
     this->networking->linkTextbook(courseId, textId);
@@ -26,3 +34,11 @@ QUuid CourseRequestAPI::unlinkText(int courseId, int textId)
 {
     this->networking->unlinkTextbook(courseId, textId);
 }
+
+QUuid CourseRequestAPI::deleteCourse(int courseId)
+{
+    QUuid id;
+    return id;
+
+    // TODO: invoke networking method
+}
diff --git a/cuTPS-client/CourseRequestAPI.h b/cuTPS-client/CourseRequestAPI.h
index 0f40ad9..0c2defb 100644
--- a/cuTPS-client/CourseRequestAPI.h
+++ b/cuTPS-client/CourseRequestAPI.h
@@ -17,6 +17,8 @@ public:
     explicit CourseRequestAPI(QObject *parent = 0,
                               ClientNetworkHandler *net = NULL);
     QUuid addCourse(Course&);
+    QUuid modifyCourse(Course &);
+    QUuid deleteCourse(int);
     QUuid linkText(int, int);
     QUuid unlinkText(int, int);
 
diff --git a/cuTPS-client/DeleteCourseControl.cpp b/cuTPS-client/DeleteCourseControl.cpp
new file mode 100644
index 0000000..4232ae2
--- /dev/null
+++ b/cuTPS-client/DeleteCourseControl.cpp
@@ -0,0 +1,11 @@
+#include "DeleteCourseControl.h"
+
+DeleteCourseControl::DeleteCourseControl(CourseRequestAPI *api) :
+    requestAPI(api)
+{
+}
+
+void DeleteCourseControl::deleteCourse(QUuid &uid, int courseId)
+{
+    uid = requestAPI->deleteCourse(courseId);
+}
diff --git a/cuTPS-client/DeleteCourseControl.h b/cuTPS-client/DeleteCourseControl.h
new file mode 100644
index 0000000..e8dfad7
--- /dev/null
+++ b/cuTPS-client/DeleteCourseControl.h
@@ -0,0 +1,23 @@
+// Traceability:
+//   DeleteCourseControl class in the CourseManagement subsystem
+
+#ifndef DELETECOURSECONTROL_H
+#define DELETECOURSECONTROL_H
+
+#include <QObject>
+
+#include "CourseRequestAPI.h"
+
+class DeleteCourseControl : QObject
+{
+    Q_OBJECT
+
+public:
+    DeleteCourseControl(CourseRequestAPI *);
+
+private:
+    CourseRequestAPI *requestAPI;
+    void deleteCourse(QUuid &, int);
+};
+
+#endif // DELETECOURSECONTROL_H
diff --git a/cuTPS-client/DeleteItemControl.cpp b/cuTPS-client/DeleteItemControl.cpp
new file mode 100644
index 0000000..7449e55
--- /dev/null
+++ b/cuTPS-client/DeleteItemControl.cpp
@@ -0,0 +1,12 @@
+#include "DeleteItemControl.h"
+
+DeleteItemControl::DeleteItemControl(QObject *parent, ContentRequestAPI *api) :
+    QObject(parent),
+    requestAPI(api)
+{
+}
+
+void DeleteItemControl::deleteItem(QUuid &uid, int itemId)
+{
+    uid = requestAPI->deleteItem(itemId);
+}
diff --git a/cuTPS-client/DeleteItemControl.h b/cuTPS-client/DeleteItemControl.h
new file mode 100644
index 0000000..6ce6867
--- /dev/null
+++ b/cuTPS-client/DeleteItemControl.h
@@ -0,0 +1,27 @@
+// Traceability:
+//   DeleteItemControl class in the ContentManagement subsystem
+
+#ifndef DELETEITEMCONTROL_H
+#define DELETEITEMCONTROL_H
+
+#include "ContentRequestAPI.h"
+
+#include <QObject>
+
+class DeleteItemControl : public QObject
+{
+    Q_OBJECT
+public:
+    explicit DeleteItemControl(QObject *parent = 0, ContentRequestAPI *api = NULL);
+    void deleteItem(QUuid&, int);
+
+signals:
+
+public slots:
+
+private:
+    ContentRequestAPI *requestAPI;
+
+};
+
+#endif // DELETEITEMCONTROL_H
diff --git a/cuTPS-client/ManageContentControl.cpp b/cuTPS-client/ManageContentControl.cpp
index 1fc387d..75abba7 100644
--- a/cuTPS-client/ManageContentControl.cpp
+++ b/cuTPS-client/ManageContentControl.cpp
@@ -1,6 +1,8 @@
 #include "ManageContentControl.h"
 #include "ContentManagementInterface.h"
 #include "AddBookControl.h"
+#include "ModifyItemControl.h"
+#include "DeleteItemControl.h"
 
 #include <QDebug>
 
@@ -39,17 +41,20 @@ void ManageContentControl::addTextbook(QString name,
              << " " << priceCents << ", available? "
              << isAvailable << " - " << isbn;
 
-    AddBookControl addBookCtrl(this->requestAPI);
-
     QUuid reqId;
 
+    Textbook book(bookId, name, "", "", priceCents, isAvailable, isbn);
+
     if (bookId == -1) {
-        Textbook book(0, name, "", "", priceCents, isAvailable, isbn);
+        AddBookControl addBookCtrl(this->requestAPI);
 
         // TODO: we currently ignore response for this request
         addBookCtrl.addBook(reqId, book);
     } else {
-        // TODO: create a modifyBookCtrl...
+        ModifyItemControl modCtrl(0, this->requestAPI);
+
+        // TODO: not currently handling response
+        modCtrl.modifyBook(reqId, book);
     }
 }
 
@@ -63,17 +68,20 @@ void ManageContentControl::addChapter(QString name,
              << " " << priceCents << "to bookId = " << bookId
              << ", isAvailable? " << isAvailable;
 
-    AddBookControl addBookCtrl(this->requestAPI);
-
     QUuid reqId;
 
+    Chapter chapter(NULL, chapId, name, priceCents, isAvailable);
+
     if (chapId == -1) {
-        Chapter chapter(NULL, 0, name, priceCents, isAvailable);
+        AddBookControl addBookCtrl(this->requestAPI);
 
         // TODO: we currently ignore response for this request
         addBookCtrl.addChapter(reqId, bookId, chapter);
     } else {
-        // TODO: create a modifyBookCtrl..
+        ModifyItemControl modCtrl(0, this->requestAPI);
+
+        // TODO: curently ignoring response
+        modCtrl.modifyChapter(reqId, bookId, chapter);
     }
 }
 
@@ -88,17 +96,20 @@ void ManageContentControl::addSection(QString name,
              << " " << priceCents << "to chapterId = " << chapterId
              << "and bookId = " << bookId << ", isAvailable? " << isAvailable;
 
-    AddBookControl addBookCtrl(this->requestAPI);
-
     QUuid reqId;
 
+    Section section(NULL, secId, name, priceCents, isAvailable);
+
     if (secId == -1) {
-        Section section(NULL, 0, name, priceCents, isAvailable);
+        AddBookControl addBookCtrl(this->requestAPI);
 
         // TODO: we currently ignore response for this request
         addBookCtrl.addSection(reqId, bookId, chapterId, section);
     } else {
-        // TODO: create a modifyBookControl...
+        ModifyItemControl modCtrl(0, this->requestAPI);
+
+        // TODO: not currently handling response
+        modCtrl.modifySection(reqId, bookId, chapterId, section);
     }
 }
 
@@ -106,5 +117,9 @@ void ManageContentControl::deleteItem(int itemId)
 {
     qDebug() << "Deleting item id " << itemId;
 
-    // TODO: create a DeleteItemControl with the requestAPI
+    DeleteItemControl ctrl(this->requestAPI);
+
+    // TODO: not yet handling response
+    QUuid uid;
+    ctrl.deleteItem(uid, itemId);
 }
diff --git a/cuTPS-client/ManageContentListWindow.cpp b/cuTPS-client/ManageContentListWindow.cpp
index 4c93cc5..b4fdada 100644
--- a/cuTPS-client/ManageContentListWindow.cpp
+++ b/cuTPS-client/ManageContentListWindow.cpp
@@ -289,6 +289,8 @@ void ManageContentListWindow::modTextbook()
 
     this->addBookWin = new AddTextbookWindow(this, item->getId());
 
+    this->addBookWin->setWindowTitle("Modify Textbook");
+
     this->addBookWin->populateValues(item);
 
     connect(this->addBookWin, SIGNAL(addTextbook(QString,int,int,bool,QString)),
@@ -307,6 +309,8 @@ void ManageContentListWindow::modChapter()
 
     this->addChapterWin = new AddChapterWindow(this, this->bookId, item->getId());
 
+    this->addChapterWin->setWindowTitle("Modify Chapter");
+
     this->addChapterWin->populateValues(item);
 
     connect(this->addChapterWin, SIGNAL(addChapter(QString,int,int,bool,int)),
@@ -326,6 +330,8 @@ void ManageContentListWindow::modSection()
     this->addSectionWin = new AddSectionWindow(this, this->bookId,
                                                this->chapterId, item->getId());
 
+    this->addSectionWin->setWindowTitle("Modify Section");
+
     this->addSectionWin->populateValues(item);
 
     connect(this->addSectionWin, SIGNAL(addSection(QString,int,int,bool,int,int)),
diff --git a/cuTPS-client/ManageCourseControl.cpp b/cuTPS-client/ManageCourseControl.cpp
index 44bb7d5..6530fdf 100644
--- a/cuTPS-client/ManageCourseControl.cpp
+++ b/cuTPS-client/ManageCourseControl.cpp
@@ -1,6 +1,8 @@
 #include "ManageCourseControl.h"
 #include "ContentManagementInterface.h"
 #include "AddCourseControl.h"
+#include "ModifyCourseControl.h"
+
 
 #include <QDebug>
 
@@ -61,7 +63,14 @@ void ManageCourseControl::modifyCourse(int courseId,
     qDebug() << "Modifying existing course id=" << courseId
              << " code = " << courseCode
              << " name = " << courseName;
+
     // TODO: create a modifyCourseControl to handle the request
+    ModifyCourseControl ctrl(this->requestAPI);
+    QUuid uid;
+
+    Course c(courseCode, courseName);
+
+    ctrl.modifyCourse(uid, c);
 }
 
 void ManageCourseControl::deleteCourse(int courseId)
diff --git a/cuTPS-client/ModifyCourseControl.cpp b/cuTPS-client/ModifyCourseControl.cpp
new file mode 100644
index 0000000..4488463
--- /dev/null
+++ b/cuTPS-client/ModifyCourseControl.cpp
@@ -0,0 +1,11 @@
+#include "ModifyCourseControl.h"
+
+ModifyCourseControl::ModifyCourseControl(CourseRequestAPI *api) :
+    requestAPI(api)
+{
+}
+
+void ModifyCourseControl::modifyCourse(QUuid &uid, Course &c)
+{
+    uid = requestAPI->modifyCourse(c);
+}
diff --git a/cuTPS-client/ModifyCourseControl.h b/cuTPS-client/ModifyCourseControl.h
new file mode 100644
index 0000000..9298d60
--- /dev/null
+++ b/cuTPS-client/ModifyCourseControl.h
@@ -0,0 +1,20 @@
+#ifndef MODIFYCOURSECONTROL_H
+#define MODIFYCOURSECONTROL_H
+
+#include <QObject>
+
+#include "CourseRequestAPI.h"
+
+class ModifyCourseControl : public QObject
+{
+    Q_OBJECT
+
+public:
+    ModifyCourseControl(CourseRequestAPI *);
+    void modifyCourse(QUuid &, Course &);
+
+private:
+    CourseRequestAPI *requestAPI;
+};
+
+#endif // MODIFYCOURSECONTROL_H
diff --git a/cuTPS-client/ModifyItemControl.cpp b/cuTPS-client/ModifyItemControl.cpp
new file mode 100644
index 0000000..0eaa0f8
--- /dev/null
+++ b/cuTPS-client/ModifyItemControl.cpp
@@ -0,0 +1,27 @@
+#include "ModifyItemControl.h"
+
+ModifyItemControl::ModifyItemControl(QObject *parent, ContentRequestAPI *api) :
+    QObject(parent),
+    requestAPI(api)
+{
+}
+
+void ModifyItemControl::modifyBook(QUuid &reqId,Textbook &modTextbook)
+{
+    // TODO: make actual request to network
+    // reqId = requestAPI->modifyBook(newTextbook);
+}
+
+void ModifyItemControl::modifyChapter(QUuid &reqId, int textId,
+                                      Chapter &modChapter)
+{
+    // TODO: make actual request to network
+    // reqId = requestAPI->modifyChapter(textId, newChapter);
+}
+
+void ModifyItemControl::modifySection(QUuid &reqId, int bookId,
+                                      int chapId, Section &modSection)
+{
+    // TODO: make actual request to network
+    // reqId = requestAPI->modifySection(textId, chapId, newSection);
+}
diff --git a/cuTPS-client/ModifyItemControl.h b/cuTPS-client/ModifyItemControl.h
new file mode 100644
index 0000000..d94747f
--- /dev/null
+++ b/cuTPS-client/ModifyItemControl.h
@@ -0,0 +1,32 @@
+// traceability:
+//   ModifyItemControl class in the ContentManagement subsystem
+
+#ifndef MODIFYITEMCONTROL_H
+#define MODIFYITEMCONTROL_H
+
+#include <QObject>
+
+#include "ContentRequestAPI.h"
+
+class ModifyItemControl : public QObject
+{
+    Q_OBJECT
+public:
+    explicit ModifyItemControl(QObject *parent = 0,
+                               ContentRequestAPI *api = NULL);
+    void modifyBook(QUuid &reqId, Textbook &modTextbook);
+    void modifyChapter(QUuid &reqId, int textId,
+                                          Chapter &modChapter);
+    void modifySection(QUuid &reqId, int bookId,
+                                          int chapId, Section &modSection);
+
+signals:
+
+public slots:
+
+private:
+    ContentRequestAPI *requestAPI;
+
+};
+
+#endif // MODIFYITEMCONTROL_H
diff --git a/cuTPS-client/cuTPS-client.pro b/cuTPS-client/cuTPS-client.pro
index a5792e9..f7fae90 100644
--- a/cuTPS-client/cuTPS-client.pro
+++ b/cuTPS-client/cuTPS-client.pro
@@ -40,7 +40,11 @@ SOURCES += main.cpp \
     BillingWindow.cpp \
     AddTextbookWindow.cpp \
     AddChapterWindow.cpp \
-    AddSectionWindow.cpp
+    AddSectionWindow.cpp \
+    ModifyCourseControl.cpp \
+    DeleteCourseControl.cpp \
+    DeleteItemControl.cpp \
+    ModifyItemControl.cpp
 
 HEADERS  += \
     ClientNetworkHandler.h \
@@ -70,7 +74,11 @@ HEADERS  += \
     BillingWindow.h \
     AddTextbookWindow.h \
     AddChapterWindow.h \
-    AddSectionWindow.h
+    AddSectionWindow.h \
+    ModifyCourseControl.h \
+    DeleteCourseControl.h \
+    DeleteItemControl.h \
+    ModifyItemControl.h
 
 FORMS    += \
     Login.ui \
-- 
1.7.9.5


From 3ffc8c17f10fe0e58dca4a8b1a20769d6369a7a7 Mon Sep 17 00:00:00 2001
From: Kirill Kravinsky <woyorus@gmail.com>
Date: Sun, 7 Dec 2014 22:24:48 -0500
Subject: [PATCH 06/16] API changes + Implementations. Some requests will fail
 due to missing storage functionality

---
 cuTPS-client/ClientNetworkHandler.cpp              |   95 ++++++++++++-----
 cuTPS-client/ClientNetworkHandler.h                |  107 ++++++++++++--------
 cuTPS-common/Entity/Textbook.cpp                   |    6 +-
 .../ClientTaskHandling/GetAllBooksTask.cpp         |    2 +
 .../ClientTaskHandling/GetBookDetailsTask.cpp      |    2 +-
 .../ClientTaskHandling/GetRequiredBooksTask.cpp    |   39 ++++---
 cuTPS-server/ClientTaskHandling/RmItemTask.cpp     |   10 ++
 7 files changed, 177 insertions(+), 84 deletions(-)

diff --git a/cuTPS-client/ClientNetworkHandler.cpp b/cuTPS-client/ClientNetworkHandler.cpp
index ef8b9d4..33431cb 100644
--- a/cuTPS-client/ClientNetworkHandler.cpp
+++ b/cuTPS-client/ClientNetworkHandler.cpp
@@ -513,11 +513,6 @@ bool ClientNetworkHandler::isValid() const
     return isConnected() && loggedIn;
 }
 
-QSet<Textbook*>* ClientNetworkHandler::uniqueBooks(QMap<Course*, QSet<Textbook*>*>*)
-{
-
-}
-
 /* public slots */
 
 void ClientNetworkHandler::connected()
@@ -589,6 +584,12 @@ void ClientNetworkHandler::readyRead()
     case IAddSection:
     case IAddCourse:
     case IAddUser:
+    case IBanUser:
+    case IRmBook:
+    case IRmChapter:
+    case IRmSection:
+    case IBookLink:
+    case IBookUnlink:
     {
         QDataStream in(response.getData(), QIODevice::ReadOnly);
 
@@ -603,50 +604,92 @@ void ClientNetworkHandler::readyRead()
         break;
     }
 
+    case IGetAllBooks:
     case IGetBookDetails: {
         QDataStream in(response.getData(), QIODevice::ReadOnly);
 
         qint32 numBooks;
         in >> numBooks;
 
-        QVector<Textbook*>* vec = new QVector<Textbook*>();
+        if (numBooks > 1 || response.getInvocation() == IGetAllBooks) {
+            QList<Textbook*>* bList = new QList<Textbook*>();
 
-        for (int i = 0; i < numBooks; ++i)
-        {
+            while (numBooks > 0) {
+                Textbook* book = new Textbook();
+                in >> *book;
+                bList->append(book);
+                numBooks--;
+            }
+
+            emit textbookListReceived(response.getRequestId(),
+                                         response.getResponseCode(),
+                                         bList);
+        } else if (numBooks == 1) {
             Textbook* book = new Textbook();
             in >> *book;
-            vec->append(book);
+
+            emit textbookReceived(response.getRequestId(),
+                                  response.getResponseCode(),
+                                  book);
         }
 
-        emit textbookDetailsReceived(response.getRequestId(),
-                                     response.getResponseCode(),
-                                     vec);
         break;
     }
 
     case IGetRequiredBooks: {
         QDataStream in(response.getData(), QIODevice::ReadOnly);
 
-        qint32 numBooks;
-        in >> numBooks;
+        QMap<Course*, QList<Textbook*>*>* cmap = new QMap<Course*, QList<Textbook*>*>();
 
-        QVector<qint32>* vec = new QVector<qint32>();
+        qint32 numCourses;
+        in >> numCourses;
 
-        for (int i = 0; i < numBooks; ++i)
-        {
-            qint32 id;
-            in >> id;
-            vec->append(id);
+        while (numCourses > 0) {
+            QList<Textbook*>* tbList = new QList<Textbook*>();
+            Course* c = new Course();
+            in >> *c;
+
+            qint32 numBooks;
+            in >> numBooks;
+
+            while (numBooks > 0) {
+                Textbook* book = new Textbook();
+                in >> *book;
+                tbList->append(book);
+                numBooks--;
+            }
+
+            cmap->insert(c, tbList);
+
+            numCourses--;
         }
 
-        // TODO: implement map reconstruct
+        emit requiredBooksReceived(response.getRequestId(),
+                                   response.getResponseCode(),
+                                   cmap);
+
+        break;
+    }
+
+    case IGetAllCourses: {
+        QList<Course*>* clist = new QList<Course*>();
+        qint32 count;
+        in >> count;
 
-        //emit textbookLookupCompleted(response.getRequestId(),
-        //                             response.getResponseCode(),
-        //                             vec);
+        while (count > 0) {
+            Course* c = new Course();
+            in >> *c;
+            clist->append(c);
+            count--;
+        }
+
+        emit courseListReceived(response.getRequestId(),
+                                response.getResponseCode(),
+                                clist);
         break;
     }
 
+
     case ILogin: {
         QDataStream in(response.getData(), QIODevice::ReadOnly);
 
@@ -675,6 +718,10 @@ void ClientNetworkHandler::readyRead()
         break;
     }
 
+    case IGenerateReport: {
+        break;
+    }
+
     case IGoodbye:
     default:
         this->disconnectFromServer();
diff --git a/cuTPS-client/ClientNetworkHandler.h b/cuTPS-client/ClientNetworkHandler.h
index 3e572d0..689979c 100644
--- a/cuTPS-client/ClientNetworkHandler.h
+++ b/cuTPS-client/ClientNetworkHandler.h
@@ -7,28 +7,13 @@
 //     This class offers the client side API for possible
 //     requests to the server.
 
-// === API change history === //
-// Dec, 2:      --- getBookDetails() now takes just the IDs of textbooks
-//                  getBookDetail(qint32) <- will return a single textbook with that id
-//                  getBookDetail(QVector<qint32>&) <- will return a vector of books.
-//
-//              --- textbookDetailsReceived(QUuid requestId, int code, QVector<Textbook*>* books)
-//                  now returns vector of textbook pointers. All textbooks and vector itself are
-//                  created using new, so delete them after use. qDeleteAll().
-//                  You may want to use qDeleteAll(const Container& c) from <QtAlgorithms> header.
-//
-//              --- void textbookLookupCompleted(QUuid requestId, int code, QVector<qint32>* booksIds)
-//                  also returns a vector of book ids. You can pass the output right to getBookDetails() 
-//                  to receive details about all of them in one bunch, via textbookDetailsReceived().'''''''''''''''''''
-//
-//                  <woyorus>
-
 #include <QObject>
 #include <QMetaObject>
 #include <QHostAddress>
 #include <QTcpSocket>
 #include <QUuid>
 #include <QVector>
+#include <QList>
 #include <QMap>
 #include <QDataStream>
 
@@ -45,8 +30,11 @@ using namespace TPSNetProtocolDef;
 using namespace TPSDef;
 
 // metatype declarations for correct signalling
-Q_DECLARE_METATYPE(QVector<Textbook*>*)
-Q_DECLARE_METATYPE(QVector<qint32>*)
+typedef QMap<Course*, QList<Textbook*>*>* CourseTextMap;
+Q_DECLARE_METATYPE(CourseTextMap)
+Q_DECLARE_METATYPE(Textbook*)
+Q_DECLARE_METATYPE(QList<Textbook*>*)
+Q_DECLARE_METATYPE(QList<Course*>*)
 
 // Note, this could inherit from a NetworkHandler
 // that manages the networking
@@ -65,55 +53,92 @@ public:
     // Disconnect from the server
     void disconnectFromServer();
 
-    // Login to the server - request a session id
+    // What: attemt to log in into the server.
+    // Available for: anonymous user.
+    // Related reply: loginSuccessful / loginFailed.
     QUuid login(UserCredentials&);
 
+    //// STUDENT USER OPERATIONS
+
     // What: Request the list of _available_ (available==true) textbooks
     // for the user on this session. Note: textbooks include sections and chapters
-    // Related reply signal: textbookDetailsReceived(QUuid,int,QMap<Course, QSet<Textbook>>*)
-    // -- use QSet<Textbook>* uniqueBooks(QMap<Course, QSet<Textbook>*); to get books only
+    // Related reply signal: requiredBooksReceived()
     QUuid getRequiredBooks();
 
-    // What: Request for all the books registered (including unavailable ones)
-    // Note: textbooks include sections and chapters
-    // Related reply signal: textbookDetailsReceived(QUuid,int,QMap<Course, QSet<Textbook>>*)
-    // -- use QSet<Textbook>* uniqueBooks(QMap<Course, QSet<Textbook>*); to get books only
-    QUuid getAllBooks();
-    QUuid getAllCourses();
+    // What: Submit an order to the server
+    // Reltated reply signal: orderStatusReceived(QUuid, int);
+    QUuid submitOrder(Order&);
+
+    //// STUDENT + CONTENT MANAGER OPERATIONS
 
     // What: Request the details (i.e. Textbook object itself) of a particular textbook id
     // Note: textbooks include sections and chapters
-    // Related reply signal: textbookDetailsReceived(QUuid,int,QMap<Course, QSet<Textbook>>*)
-    // -- use QSet<Textbook>* uniqueBooks(QMap<Course, QSet<Textbook>*); to get the book only
+    // Available for: Students, ContentManagers.
+    // Related reply signal: textbookRecevied(Textbook*)
     QUuid getBookDetails(const qint32 id);
 
     // What: Request details for a list of textbook ids
     // Note: textbooks include sections and chapters
-    // Related reply signal: textbookDetailsReceived(QUuid,int,QMap<Course, QSet<Textbook>>*)
-    // -- use QSet<Textbook>* uniqueBooks(QMap<Course, QSet<Textbook>*); to get the books only
-    QUuid getBookDetails(const QVector<int>& ids);
+    // Available for: Students, ContentManagers.
+    // Related reply signal: textbookListReceived(QList<Textbook*>*)
+    QUuid getBookDetails(const QVector<qint32>& ids);
 
-    // What: Submit an order to the server
-    // Reltated reply signal: orderStatusReceived(QUuid, int);
-    QUuid submitOrder(Order&);
+    //// CONTENT MANAGER OPERATIONS
+
+    // What: Request for all the books registered (including unavailable ones)
+    // Note: textbooks include sections and chapters
+    // Available for: ContentManagers
+    // Related reply signal: textbookListReceived(QList<Textbook*>*)
+    QUuid getAllBooks();
+
+    // What: request a list of all courses in the system.
+    // Available for: content managers
+    // Related reply signal: courseListRecevied(QList<Course*>*)
+    QUuid getAllCourses();
 
     // What: Add a new course to the system.
+    // Available for content managers
     // Related reply signal: updateCompleted(QUuid, int, InvocationDescriptor, qint32)
     QUuid addCourse(Course&);
+
+    // What: assign an existing textbook to an existing course
+    // Available for content managers
+    // Related reply signal: updateCompleted() --- returns courseId in id arg.
     QUuid linkTextbook(qint32 courseId, qint32 textId);
+
+    // What: remove a linked textbook from course.
+    // Available for content managers
+    // Related reply signal: updateCompleted() --- returns courseId in id arg.
     QUuid unlinkTextbook(qint32 courseId, qint32 textId);
 
-    // Add a textbook to the content availability of the system
+    // Add new items routines.
+    // Available for content managers.
     // Related reply signal: updateCompleted(QUuid, int, InvocationDescriptor, qint32)
     QUuid addBook(Textbook&);
     QUuid addChapter(qint32 textId, Chapter&);
     QUuid addSection(qint32 textId, qint32 chId, Section&);
 
+
+    // What: removing items routines
+    // Available for content managers.
+    // Related reply signal: updateCompleted(QUuid, int, InvocationDescriptor, qint32)
     QUuid removeBook(qint32 id);
     QUuid removeChapter(qint32 id);
     QUuid removeSection(qint32 id);
 
+    // CONTENT MANAGERS + ADMINISTRATOR OPERATIONS
+
+    // What: add a new user to the system.
+    // Available for: ContentManagers, Administrators.
+    // Note: ContentManagers cannot add administrator users.
+    // Reletaed reply: updateCompete()
     QUuid addUser(User&);
+
+    // ADMINISTRATOR OPERATIONS
+
+    // What: flags user as inactive. 
+    // Available for: administrators
+    // Related reply: updateCompleted()
     QUuid banUser(qint32 uid);
 
     // Access modifiers for the state of the connection to the server
@@ -121,9 +146,6 @@ public:
     bool isConnected() const;
     bool isValid() const; // i.e. connected && logged in
 
-    // TODO: implement
-    static QSet<Textbook*>* uniqueBooks(QMap<Course*, QSet<Textbook*>*>*);
-
 signals:
     // Events emitted regarding the network events
     void connectedToServer();
@@ -138,9 +160,10 @@ signals:
     void updateCompleted(QUuid requestId, int code, InvocationDescriptor invo, qint32 id);
 
     // Books in vector are created using new. Delete them using delete after use.
-    void textbookDetailsReceived(QUuid requestId, int code, QVector<Textbook*>* books);
-    void textbookLookupCompleted(QUuid requestId, int code, QMap<Course*, QSet<Textbook*>*>*);
-    void courseLookupCompleted(QUuid requestId, int code, QVector<Course*>* courses);
+    void requiredBooksReceived(QUuid requestId, int code, QMap<Course*, QList<Textbook*>*>*);
+    void textbookReceived(QUuid requestId, int code, Textbook* text);
+    void textbookListReceived(QUuid requestId, int code, QList<Textbook*>*);
+    void courseListReceived(QUuid requestId, int code, QList<Course*>*);
 
 public slots:
     // Event handlers for events emitted by the TCP socket object
diff --git a/cuTPS-common/Entity/Textbook.cpp b/cuTPS-common/Entity/Textbook.cpp
index 5d35ab5..9d60ba1 100644
--- a/cuTPS-common/Entity/Textbook.cpp
+++ b/cuTPS-common/Entity/Textbook.cpp
@@ -3,8 +3,10 @@
 #include "SellableItem.h"
 #include "Defines.h"
 
-Textbook::Textbook(int textId, QString name, QString edition, QString authors, int price, bool isAvailable, QString iISBN) : SellableItem(textId, name, price, isAvailable) {
-    isbn = iISBN;
+Textbook::Textbook(int textId, QString name, QString edition, QString authors, int price, bool isAvailable, QString iISBN)
+    : SellableItem(textId, name, price, isAvailable),
+    authors(authors), isbn(iISBN), edition(edition)
+{
 }
 
 Textbook::Textbook(const Textbook& src) : SellableItem(src.getId(), src.getName(), src.getPriceCents(), src.getAvailability()), isbn(src.getISBN())
diff --git a/cuTPS-server/ClientTaskHandling/GetAllBooksTask.cpp b/cuTPS-server/ClientTaskHandling/GetAllBooksTask.cpp
index 0c6f933..02aa930 100644
--- a/cuTPS-server/ClientTaskHandling/GetAllBooksTask.cpp
+++ b/cuTPS-server/ClientTaskHandling/GetAllBooksTask.cpp
@@ -46,6 +46,8 @@ void GetAllBooksTask::run()
         }
 
         response->setData(responseDataBytes);
+    } else {
+        outData << static_cast<qint32>(0);
     }
 
     emit result(response->getResponseCode(), response);
diff --git a/cuTPS-server/ClientTaskHandling/GetBookDetailsTask.cpp b/cuTPS-server/ClientTaskHandling/GetBookDetailsTask.cpp
index c91df88..be5fdb3 100644
--- a/cuTPS-server/ClientTaskHandling/GetBookDetailsTask.cpp
+++ b/cuTPS-server/ClientTaskHandling/GetBookDetailsTask.cpp
@@ -52,7 +52,7 @@ void GetBookDetailsTask::run()
 
         response->setData(responseDataBytes);
     } else {
-        outData << (qint32)0;
+        outData << static_cast<qint32>(0);
     }
 
     emit result(response->getResponseCode(), response);
diff --git a/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.cpp b/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.cpp
index 4f64528..c81ac05 100644
--- a/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.cpp
+++ b/cuTPS-server/ClientTaskHandling/GetRequiredBooksTask.cpp
@@ -6,6 +6,8 @@
 #include <QDataStream>
 
 #include "Entity/NetResponse.h"
+#include "Entity/Course.h"
+#include "Entity/Textbook.h"
 
 GetRequiredBooksTask::GetRequiredBooksTask(Server* srv)
     : WorkerTask(srv)
@@ -18,36 +20,43 @@ void GetRequiredBooksTask::run()
     qDebug() << "Doing job for session: " << sessionId
              << "Request: " << request->getRequestId();
 
-    QString username;
-
     QDataStream in(request->getData(), QIODevice::ReadOnly);
 
-    in >> username;
-
-    QVector<qint32> ids;
-
-    qDebug() << "calling the getRequiredTextbooks API for user " << username;
-
-    ServerResponse getBooks = server->getRequiredTextbooks(sessionId, username, &ids);
+    // TODO: get list of actual user's courses
+    QVector<Course> courses;
+    Course c;
+    c.setId(42);
+    c.addRequiredTextId(1);
+    c.addRequiredTextId(2);
+    courses.append(c);
 
     NetResponse* response = new NetResponse();
     response->setInvocation(request->getInvocation());
     response->setRequestId(request->getRequestId());
-    response->setResponseCode(getBooks.code == Fail ? 0x0 : 0x1);
+    //response->setResponseCode(getBooks.code == Fail ? 0x0 : 0x1);
+    response->setResponseCode(0x1);
     response->setSessionId(sessionId);
 
     QByteArray responseDataBytes;
     QDataStream outData(&responseDataBytes, QIODevice::WriteOnly);
 
-    if (getBooks.code == Success)
+    if (response->getResponseCode() > 0)
     {
-        // TODO: query also courses, and write them as:
         // |numcourses|(|course||numbooks||..books..|)(|course||numbooks|...
-        outData << static_cast<qint32>(ids.size());
+        outData << static_cast<qint32>(courses.size());
 
-        for (qint32 id : ids)
+        for (Course course : courses)
         {
-            outData << id;
+            outData << course;
+            outData << static_cast<qint32>(course.getRequiredTextIds().size());
+
+            for (qint32 textId : course.getRequiredTextIds())
+            {
+                Textbook* tPtr;
+                ServerResponse r = server->getTextbookDetails(sessionId, textId, &tPtr);
+                outData << *tPtr;
+                delete tPtr;
+            }
         }
 
         response->setData(responseDataBytes);
diff --git a/cuTPS-server/ClientTaskHandling/RmItemTask.cpp b/cuTPS-server/ClientTaskHandling/RmItemTask.cpp
index 74da1ca..80fbff0 100644
--- a/cuTPS-server/ClientTaskHandling/RmItemTask.cpp
+++ b/cuTPS-server/ClientTaskHandling/RmItemTask.cpp
@@ -29,20 +29,30 @@ void RmItemTask::run()
     {
         // TODO: implement this
         //r = server->removeBook(sessionId, itemId);
+        r.code = Fail;
+        break;
     }
 
     case IRmChapter:
     {
         // TODO: implement this
         //r = server->removeChapter(sessionId, itemId);
+        r.code = Fail;
+        break;
     }
 
     case IRmSection:
     {
         // TODO: implement this
         // r = server->removeSection(sessionId, itemId);
+        r.code = Fail;
+        break;
     }
 
+    default:
+        r.code = Fail;
+        break;
+
     }
 
     NetResponse* response = new NetResponse();
-- 
1.7.9.5


From 58e1bc9cbc2640cf55027e17572dbe9cbadc4117 Mon Sep 17 00:00:00 2001
From: Kirill Kravinsky <woyorus@gmail.com>
Date: Mon, 8 Dec 2014 02:04:23 -0500
Subject: [PATCH 07/16] Student user registration implementation

---
 cuTPS-client/ClientNetworkHandler.cpp             |   11 ++-
 cuTPS-client/ClientNetworkHandler.h               |    7 +-
 cuTPS-common/Entity/BillingInfo.cpp               |    4 +
 cuTPS-common/Entity/BillingInfo.h                 |    1 +
 cuTPS-common/Entity/Course.cpp                    |    3 +-
 cuTPS-common/Entity/CreditCardInfo.cpp            |   41 +++++++++-
 cuTPS-common/Entity/CreditCardInfo.h              |    6 +-
 cuTPS-common/Entity/SellableItem.cpp              |    4 +-
 cuTPS-common/Entity/Student.cpp                   |   85 +++++++++++++++++++--
 cuTPS-common/Entity/Student.h                     |   52 +++++++------
 cuTPS-common/Entity/User.cpp                      |   25 ++++--
 cuTPS-common/Entity/User.h                        |    5 +-
 cuTPS-server/ClientTaskHandling/AddCourseTask.cpp |   25 +++---
 cuTPS-server/ClientTaskHandling/AddItemTask.cpp   |   47 ++++++++----
 cuTPS-server/ClientTaskHandling/AddUserTask.cpp   |   18 +++--
 cuTPS-server/Server.cpp                           |   47 +++++++++++-
 cuTPS-server/Server.h                             |   14 +++-
 cuTPS-server/ServerPrefs.cpp                      |   20 ++---
 cuTPS-server/ServerPrefs.h                        |    4 +-
 19 files changed, 316 insertions(+), 103 deletions(-)

diff --git a/cuTPS-client/ClientNetworkHandler.cpp b/cuTPS-client/ClientNetworkHandler.cpp
index 33431cb..a85c59b 100644
--- a/cuTPS-client/ClientNetworkHandler.cpp
+++ b/cuTPS-client/ClientNetworkHandler.cpp
@@ -441,7 +441,7 @@ QUuid ClientNetworkHandler::removeSection(qint32 id)
     return requestId;
 }
 
-QUuid ClientNetworkHandler::addUser(User& u)
+QUuid ClientNetworkHandler::addStudentUser(Student& usr)
 {
     ASSERT_VALID
 
@@ -451,13 +451,12 @@ QUuid ClientNetworkHandler::addUser(User& u)
     request.setInvocation(IAddUser);
     request.setRequestId(requestId);
 
-    // TODO: User serialization
-//    QByteArray data;
-//    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+    QByteArray data;
+    QDataStream outDataStream(&data, QIODevice::WriteOnly);
 
-//    outDataStream << u;
+    outDataStream << usr;
 
-//    request.setData(data);
+    request.setData(data);
 
     QByteArray requestBytes;
     QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
diff --git a/cuTPS-client/ClientNetworkHandler.h b/cuTPS-client/ClientNetworkHandler.h
index 689979c..894822c 100644
--- a/cuTPS-client/ClientNetworkHandler.h
+++ b/cuTPS-client/ClientNetworkHandler.h
@@ -24,7 +24,7 @@
 #include "Entity/Section.h"
 #include "Entity/Order.h"
 #include "Entity/Course.h"
-#include "Entity/User.h"
+#include "Entity/Student.h"
 
 using namespace TPSNetProtocolDef;
 using namespace TPSDef;
@@ -128,11 +128,10 @@ public:
 
     // CONTENT MANAGERS + ADMINISTRATOR OPERATIONS
 
-    // What: add a new user to the system.
+    // What: add a new student user to the system.
     // Available for: ContentManagers, Administrators.
-    // Note: ContentManagers cannot add administrator users.
     // Reletaed reply: updateCompete()
-    QUuid addUser(User&);
+    QUuid addStudentUser(Student&);
 
     // ADMINISTRATOR OPERATIONS
 
diff --git a/cuTPS-common/Entity/BillingInfo.cpp b/cuTPS-common/Entity/BillingInfo.cpp
index 6535da6..e5f8597 100644
--- a/cuTPS-common/Entity/BillingInfo.cpp
+++ b/cuTPS-common/Entity/BillingInfo.cpp
@@ -1,5 +1,9 @@
 #include "BillingInfo.h"
 
+BillingInfo::BillingInfo()
+{
+}
+
 BillingInfo::BillingInfo(QString name, QString email, QString addr, QString number) {
     billingName    = name;
     emailAddress   = email;
diff --git a/cuTPS-common/Entity/BillingInfo.h b/cuTPS-common/Entity/BillingInfo.h
index aff7902..1bfa4e3 100644
--- a/cuTPS-common/Entity/BillingInfo.h
+++ b/cuTPS-common/Entity/BillingInfo.h
@@ -15,6 +15,7 @@
 class LIBCUTPS_EXPORT BillingInfo
 {
 public:
+    BillingInfo();
     BillingInfo(QString name, QString email, QString addr, QString number);
     virtual inline ~BillingInfo() {}
     // This string will represent the information required to
diff --git a/cuTPS-common/Entity/Course.cpp b/cuTPS-common/Entity/Course.cpp
index de0a6ae..0941b66 100644
--- a/cuTPS-common/Entity/Course.cpp
+++ b/cuTPS-common/Entity/Course.cpp
@@ -3,9 +3,8 @@
 
 Course::Course(const QString course,
                const QString courseName)
+    : id(-1), code(course), name(courseName)
 {
-    code = course;
-    name = courseName;
 }
 
 Course::~Course() {}
diff --git a/cuTPS-common/Entity/CreditCardInfo.cpp b/cuTPS-common/Entity/CreditCardInfo.cpp
index 3a998e8..97089ad 100644
--- a/cuTPS-common/Entity/CreditCardInfo.cpp
+++ b/cuTPS-common/Entity/CreditCardInfo.cpp
@@ -1,9 +1,14 @@
 #include "CreditCardInfo.h"
 #include "Defines.h"
 
+CreditCardInfo::CreditCardInfo()
+{
+}
+
 CreditCardInfo::CreditCardInfo(QString name, QString email, QString addr, QString pnumber,
                                QString cholder, QString cnumber, QString expiry, QString sCode)
-                               : BillingInfo(name, email, addr, pnumber) {
+                               : BillingInfo(name, email, addr, pnumber)
+{
     cardholder = cholder;
     number = cnumber;
     expiryDate = expiry;
@@ -54,3 +59,37 @@ CreditCardInfo* CreditCardInfo::clone() const
 {
     return new CreditCardInfo(*this);
 }
+
+// TODO: add basic text encryption
+QDataStream& operator<<(QDataStream& os, const CreditCardInfo& d)
+{
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
+
+    os << d.billingName
+       << d.billingAddress
+       << d.emailAddress
+       << d.phoneNumber
+       << d.cardholder
+       << d.number
+       << d.expiryDate
+       << d.securityCode;
+
+    return os;
+}
+
+QDataStream& operator>>(QDataStream& is, CreditCardInfo& d)
+{
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
+
+    is >> d.billingName
+       >> d.billingAddress
+       >> d.emailAddress
+       >> d.phoneNumber
+       >> d.cardholder
+       >> d.number
+       >> d.expiryDate
+       >> d.securityCode;
+
+    return is;
+}
+
diff --git a/cuTPS-common/Entity/CreditCardInfo.h b/cuTPS-common/Entity/CreditCardInfo.h
index 21c4fbe..b737e13 100644
--- a/cuTPS-common/Entity/CreditCardInfo.h
+++ b/cuTPS-common/Entity/CreditCardInfo.h
@@ -10,7 +10,6 @@
 
 #include "libcutps_global.h"
 
-#include <memory>
 #include <QString>
 
 #include "BillingInfo.h"
@@ -18,6 +17,7 @@
 class LIBCUTPS_EXPORT CreditCardInfo : public BillingInfo
 {
 public:
+    CreditCardInfo();
     CreditCardInfo(QString name, QString email, QString addr, QString pnumber,
                    QString cholder, QString cnumber, QString expiry, QString sCode);
     virtual inline ~CreditCardInfo() {}
@@ -33,6 +33,10 @@ public:
     virtual QString getPaymentDetails() const;
     virtual CreditCardInfo* clone() const;
 
+    // Serialization routines
+    friend QDataStream& operator<<(QDataStream& os, const CreditCardInfo& d); // output
+    friend QDataStream& operator>>(QDataStream& is, CreditCardInfo& d); // input
+
 private:
     // QString type; >> no need; it is very easy to determine card type by its number
     QString cardholder; // this might be different from name in BillingInfo.
diff --git a/cuTPS-common/Entity/SellableItem.cpp b/cuTPS-common/Entity/SellableItem.cpp
index 731a1b3..897c712 100644
--- a/cuTPS-common/Entity/SellableItem.cpp
+++ b/cuTPS-common/Entity/SellableItem.cpp
@@ -10,12 +10,12 @@ SellableItem::SellableItem(qint32 i,
 }
 
 SellableItem::SellableItem(QString n, quint32 p, bool available)
-    : name(n), priceCents(p), availableForSale(available)
+    : id(-1), name(n), priceCents(p), availableForSale(available)
 {
 }
 
 SellableItem::SellableItem()
-    : name(""), priceCents(0), availableForSale(false)
+    : id (-1), name(""), priceCents(0), availableForSale(false)
 {
 }
 
diff --git a/cuTPS-common/Entity/Student.cpp b/cuTPS-common/Entity/Student.cpp
index a24d4c3..caef0d7 100644
--- a/cuTPS-common/Entity/Student.cpp
+++ b/cuTPS-common/Entity/Student.cpp
@@ -1,7 +1,14 @@
 #include "Student.h"
 
-Student::Student(int id, QString name, QString username, int studentNum) : User(id, name, username), studentNumber(studentNum) {
+Student::Student()
+{}
+
+Student::Student(int id, QString name, QString username, int studentNum)
+    : User(id, name, username), studentNumber(studentNum)
+{
     cart = new ShoppingCart();
+    billing = nullptr;
+    delivery = nullptr;
 }
 
 Student::~Student() {
@@ -31,8 +38,8 @@ void Student::setEmailAddress(QString newEmail) {
     emailAddress = newEmail;
 }
 
-QVector<Course*> Student::getCourses() {
-    return courses;
+QVector<qint32>& Student::getCourses() {
+    return courseIds;
 }
 
 CreditCardInfo* Student::getCreditCardInfo() {
@@ -40,6 +47,9 @@ CreditCardInfo* Student::getCreditCardInfo() {
 }
 
 void Student::setCreditCardInfo(CreditCardInfo *info) {
+    if (billing)
+        delete billing;
+
     billing = info;
 }
 
@@ -48,11 +58,13 @@ DeliveryInfo* Student::getDeliveryInfo() {
 }
 
 void Student::setDeliveryInfo(DeliveryInfo *info) {
+    if (delivery)
+        delete delivery;
     delivery = info;
 }
 
-void Student::enrollInCourse(Course *newCourse) {
-    courses.append(newCourse);
+void Student::enrollInCourse(qint32 courseId) {
+    courseIds.append(courseId);
 }
 
 ShoppingCart* Student::getCart() {
@@ -77,11 +89,70 @@ QString Student::getDetails() {
     details += this->getEmailAddress();
     details += "\nCourses Enrolled in: ";
 
-    foreach(Course *course, this->getCourses()) {
-        details += course->getCourseCode();
+    foreach(qint32 cid, this->getCourses()) {
+        details += QString::number(cid);
         details += ", ";
     }
     details += "\n";
 
     return details;
 }
+
+QDataStream& operator<<(QDataStream& os, const Student& s)
+{
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
+
+    os << dynamic_cast<const User&>(s);
+    os << static_cast<qint32>(s.studentNumber);
+    os << s.emailAddress
+       << s.courseIds;
+
+    if (s.billing)
+    {
+        os << (qint8) 1; // presence flag
+        os << *s.billing;
+    } else {
+        os << (qint8) 0; // i.e. billinginfo not present
+    }
+
+    if (s.delivery)
+    {
+        os << (qint8) 1;
+        os << *s.delivery;
+    } else {
+        os << (qint8) 0;
+    }
+
+    return os;
+}
+
+QDataStream& operator>>(QDataStream& is, Student& s)
+{
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
+
+    is >> dynamic_cast<User&>(s);
+    is >> s.studentNumber;
+    is >> s.emailAddress
+       >> s.courseIds;
+
+    qint8 presenceFlag;
+    is >> presenceFlag;
+
+    if (presenceFlag)
+    {
+        CreditCardInfo* cc = new CreditCardInfo();
+        is >> *cc;
+        s.setCreditCardInfo(cc);
+    }
+
+    is >> presenceFlag;
+
+    if (presenceFlag)
+    {
+        DeliveryInfo* di = new DeliveryInfo();
+        is >> *di;
+        s.setDeliveryInfo(di);
+    }
+
+    return is;
+}
diff --git a/cuTPS-common/Entity/Student.h b/cuTPS-common/Entity/Student.h
index ae314f4..64ebe04 100644
--- a/cuTPS-common/Entity/Student.h
+++ b/cuTPS-common/Entity/Student.h
@@ -21,40 +21,42 @@
 using namespace std;
 
 class LIBCUTPS_EXPORT Student : public User {
+public:
+    Student();
+    Student(int, QString, QString, int);
+    ~Student();
 
-    private:
-        int studentNumber;
-        QString emailAddress;
-        QVector<Course*> courses;
-        ShoppingCart *cart;
-        CreditCardInfo *billing;
-        DeliveryInfo *delivery;
+    int getStudentNumber();
+    void setStudentNumber(int);
 
+    QString getEmailAddress();
+    void setEmailAddress(QString);
 
+    QVector<qint32>& getCourses();
+    void enrollInCourse(qint32 cId);
 
-    public:
-        Student(int, QString, QString, int);
-        ~Student();
+    ShoppingCart* getCart();
+    void setCart(ShoppingCart*);
 
-        int getStudentNumber();
-        void setStudentNumber(int);
+    CreditCardInfo* getCreditCardInfo();
+    void setCreditCardInfo(CreditCardInfo*);
 
-        QString getEmailAddress();
-        void setEmailAddress(QString);
+    DeliveryInfo* getDeliveryInfo();
+    void setDeliveryInfo(DeliveryInfo*);
 
-        QVector<Course*> getCourses();
-        void enrollInCourse(Course*);
+    QString getDetails();
 
-        ShoppingCart* getCart();
-        void setCart(ShoppingCart*);
+    // Serialization routines
+    friend QDataStream& operator<<(QDataStream& os, const Student& s); // output
+    friend QDataStream& operator>>(QDataStream& is, Student& s); // input
 
-        CreditCardInfo* getCreditCardInfo();
-        void setCreditCardInfo(CreditCardInfo*);
-
-        DeliveryInfo* getDeliveryInfo();
-        void setDeliveryInfo(DeliveryInfo*);
-
-        QString getDetails();
+private:
+    int studentNumber;
+    QString emailAddress;
+    QVector<qint32> courseIds;
+    ShoppingCart *cart;
+    CreditCardInfo *billing;
+    DeliveryInfo *delivery;
 };
 
 #endif // STUDENT_H
diff --git a/cuTPS-common/Entity/User.cpp b/cuTPS-common/Entity/User.cpp
index 26daf46..74e68c1 100644
--- a/cuTPS-common/Entity/User.cpp
+++ b/cuTPS-common/Entity/User.cpp
@@ -1,11 +1,11 @@
 #include "User.h"
 
 User::User(QString name, QString uname)
-    : name(name), username(uname), role(None)
+    : name(name), username(uname)
 {}
 
 User::User(int id, QString n, QString u)
-    : userId(id), name(n), username(u), role(None)
+    : userId(id), name(n), username(u)
 {}
 
 User::~User() {}
@@ -39,13 +39,24 @@ QString User::getDetails()
 
 }
 
-Role User::getRole() const
+QDataStream& operator<<(QDataStream& os, const User& u)
 {
-    return role;
+    os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
+
+    os << u.userId
+       << u.username
+       << u.name;
+
+    return os;
 }
 
-void User::setRole(const Role value)
+QDataStream& operator>>(QDataStream& is, User& u)
 {
-    role = value;
-}
+    is.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
 
+    is >> u.userId
+       >> u.username
+       >> u.name;
+
+    return is;
+}
diff --git a/cuTPS-common/Entity/User.h b/cuTPS-common/Entity/User.h
index d911389..eb5a7db 100644
--- a/cuTPS-common/Entity/User.h
+++ b/cuTPS-common/Entity/User.h
@@ -37,11 +37,14 @@ public:
     Role getRole() const;
     void setRole(const Role value);
 
+    // Serialization routines
+    friend QDataStream& operator<<(QDataStream& os, const User& u); // output
+    friend QDataStream& operator>>(QDataStream& is, User& u); // input
+
 private:
     qint32 userId;
     QString name;
     QString username;
-    Role role;
 };
 
 #endif // USER_H
diff --git a/cuTPS-server/ClientTaskHandling/AddCourseTask.cpp b/cuTPS-server/ClientTaskHandling/AddCourseTask.cpp
index 21307c6..d57133e 100644
--- a/cuTPS-server/ClientTaskHandling/AddCourseTask.cpp
+++ b/cuTPS-server/ClientTaskHandling/AddCourseTask.cpp
@@ -14,20 +14,19 @@ void AddCourseTask::run()
              << "Request: " << request->getRequestId();
 
     Course course;
+    qint32 courseId;
+    ServerResponse r;
     QDataStream in(request->getData(), QIODevice::ReadOnly);
 
     in >> course;
 
-    qDebug() << "TPSAddCourseTask deserialized course:";
-    qDebug() << " courseCode = " << course.getCourseCode();
-    qDebug() << " course name = " << course.getCourseName();
-    qDebug() << " id = " << QString::number(course.getId());
+    courseId = course.getId();
 
-    qDebug() << "TPSAddCourseTask calling server addCourse API";
-
-    ServerResponse r = server->addCourse(sessionId, course);
-
-    qDebug() << "TPSAddCourseTask finished server API call";
+    if (courseId < 0) {
+        r = server->addCourse(sessionId, course, &courseId);
+    } else {
+        r = server->replaceCourse(sessionId, courseId, course);
+    }
 
     NetResponse* response = new NetResponse();
     response->setInvocation(request->getInvocation());
@@ -35,6 +34,14 @@ void AddCourseTask::run()
     response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
     response->setSessionId(sessionId);
 
+    if (response->getResponseCode() > 0)
+    {
+        QByteArray responseDataBytes;
+        QDataStream outData(&responseDataBytes, QIODevice::WriteOnly);
+        outData << courseId;
+        response->setData(responseDataBytes);
+    }
+
     emit result(response->getResponseCode(), response);
 }
 
diff --git a/cuTPS-server/ClientTaskHandling/AddItemTask.cpp b/cuTPS-server/ClientTaskHandling/AddItemTask.cpp
index 1b23a12..ca9ede4 100644
--- a/cuTPS-server/ClientTaskHandling/AddItemTask.cpp
+++ b/cuTPS-server/ClientTaskHandling/AddItemTask.cpp
@@ -21,7 +21,6 @@ void AddItemTask::run()
     ServerResponse r;
     qint32 itemId = -1;
 
-    // TODO: make server return ids for created items
     switch (request->getInvocation())
     {
 
@@ -29,35 +28,50 @@ void AddItemTask::run()
     {
         Textbook text;
         in >> text;
-        r = server->addTextbook(sessionId, text);
-        // set itemid
+        itemId = text.getId();
+
+        if (itemId < 0) {
+            // Add a new textbook
+            r = server->addTextbook(sessionId, text, &itemId);
+        } else {
+            // Replace an existing one
+            r = server->replaceTextbook(sessionId, itemId, text);
+        }
     }
 
     case IAddChapter:
     {
         Chapter ch;
         qint32 textId;
-
         in >> textId >> ch;
-
         ch.setParentTextbookId(textId);
-        r = server->addChapter(sessionId, ch);
-        // set itemId
+        itemId = ch.getId();
+
+        if (itemId < 0) {
+            r = server->addChapter(sessionId, ch, &itemId);
+        } else {
+            r = server->replaceChapter(sessionId, itemId, ch);
+        }
     }
 
     case IAddSection:
     {
         Section s;
         qint32 textId, chId;
-
         in >> textId >> chId >> s;
-
         s.setParentChapterId(chId);
         s.setParentTextbookId(textId);
-        r = server->addSection(sessionId, s);
-        // set Itemid
+        itemId = s.getId();
+
+        if (itemId < 0) {
+            r = server->addSection(sessionId, s, &itemId);
+        } else {
+            r = server->replaceSection(sessionId, itemId, s);
+        }
     }
 
+    default:
+        r.code = Fail;
     }
 
     NetResponse* response = new NetResponse();
@@ -66,10 +80,13 @@ void AddItemTask::run()
     response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
     response->setSessionId(sessionId);
 
-    QByteArray responseDataBytes;
-    QDataStream outData(&responseDataBytes, QIODevice::WriteOnly);
-    outData << itemId;
-    response->setData(responseDataBytes);
+    if (response->getResponseCode() > 0)
+    {
+        QByteArray responseDataBytes;
+        QDataStream outData(&responseDataBytes, QIODevice::WriteOnly);
+        outData << itemId;
+        response->setData(responseDataBytes);
+    }
 
     emit result(response->getResponseCode(), response);
 }
diff --git a/cuTPS-server/ClientTaskHandling/AddUserTask.cpp b/cuTPS-server/ClientTaskHandling/AddUserTask.cpp
index 7587c34..4b17abd 100644
--- a/cuTPS-server/ClientTaskHandling/AddUserTask.cpp
+++ b/cuTPS-server/ClientTaskHandling/AddUserTask.cpp
@@ -6,7 +6,7 @@
 #include <QDataStream>
 
 #include "Entity/NetResponse.h"
-#include "Entity/User.h"
+#include "Entity/Student.h"
 
 AddUserTask::AddUserTask(Server* srv)
     : WorkerTask(srv)
@@ -20,13 +20,13 @@ void AddUserTask::run()
              << "Request: " << request->getRequestId();
 
     QDataStream in(request->getData(), QIODevice::ReadOnly);
-    User usr;
+    Student usr;
+    qint32 usrId;
 
-    // TODO: User serialization
-    // in >> usr;
+    in >> usr;
 
     // TODO implement this
-    //ServerResponse r = server->addUser(sessionId, usr);
+    //ServerResponse r = server->registerUser(sessionId, usr, &usrId);
     ServerResponse r; r.code = Fail;
 
     NetResponse* response = new NetResponse();
@@ -35,5 +35,13 @@ void AddUserTask::run()
     response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
     response->setSessionId(sessionId);
 
+    if (response->getResponseCode())
+    {
+        QByteArray responseDataBytes;
+        QDataStream outData(&responseDataBytes, QIODevice::WriteOnly);
+        outData << usrId;
+        response->setData(responseDataBytes);
+    }
+
     emit result(response->getResponseCode(), response);
 }
diff --git a/cuTPS-server/Server.cpp b/cuTPS-server/Server.cpp
index 463fc15..3994e9b 100755
--- a/cuTPS-server/Server.cpp
+++ b/cuTPS-server/Server.cpp
@@ -144,7 +144,7 @@ ServerResponse Server::authenticateUser(QUuid sessionID, Role &userRole, UserCre
     return response;
 }
 
-ServerResponse Server::addCourse(QUuid sessionID, Course course)
+ServerResponse Server::addCourse(QUuid sessionID, Course& course, qint32* newId)
 {
     ServerResponse response;
     response.sessionID = sessionID;
@@ -202,8 +202,10 @@ ServerResponse Server::addCourse(QUuid sessionID, Course course)
     return response;
 }
 
-ServerResponse Server::addTextbook(QUuid sessionID, Textbook textbook)
+ServerResponse Server::addTextbook(QUuid sessionID, Textbook& textbook, qint32* newId)
 {
+    // TODO: For every chapter in textbook (i.e. textbook.getChapterList()) -- add them all as well.
+    //       Same goes for every section of every chapter (i.e. chapter.getSectionList())
     ServerResponse response;
     response.sessionID = sessionID;
 
@@ -253,8 +255,9 @@ ServerResponse Server::addTextbook(QUuid sessionID, Textbook textbook)
     return response;
 }
 
-ServerResponse Server::addChapter(QUuid sessionID, Chapter chapter)
+ServerResponse Server::addChapter(QUuid sessionID, Chapter& chapter, qint32* newId)
 {
+    // TODO: Also add every section of the chapter -- i.e. chapter.getSectionList()
     ServerResponse response;
     response.sessionID = sessionID;
 
@@ -282,7 +285,7 @@ ServerResponse Server::addChapter(QUuid sessionID, Chapter chapter)
     return response;
 }
 
-ServerResponse Server::addSection(QUuid sessionID, Section section)
+ServerResponse Server::addSection(QUuid sessionID, Section& section, qint32* newId)
 {
     ServerResponse response;
     response.sessionID = sessionID;
@@ -313,6 +316,42 @@ ServerResponse Server::addSection(QUuid sessionID, Section section)
     return response;
 }
 
+ServerResponse Server::replaceCourse(QUuid sessionID, qint32 id, Course& c)
+{
+    // TODO: Implement
+    ServerResponse response;
+    response.sessionID = sessionID;
+    response.code = Fail;
+    return response;
+}
+
+ServerResponse Server::replaceTextbook(QUuid sessionID, qint32 id, Textbook& c)
+{
+    // TODO: Implement
+    ServerResponse response;
+    response.sessionID = sessionID;
+    response.code = Fail;
+    return response;
+}
+
+ServerResponse Server::replaceChapter(QUuid sessionID, qint32 id, Chapter& c)
+{
+    // TODO: Implement
+    ServerResponse response;
+    response.sessionID = sessionID;
+    response.code = Fail;
+    return response;
+}
+
+ServerResponse Server::replaceSection(QUuid sessionID, qint32 id, Section& c)
+{
+    // TODO: Implement
+    ServerResponse response;
+    response.sessionID = sessionID;
+    response.code = Fail;
+    return response;
+}
+
 ServerResponse Server::getRequiredTextbooks(QUuid sessionID,const QString& username, QVector<int>* textbookIDs)
 {
     ServerResponse response;
diff --git a/cuTPS-server/Server.h b/cuTPS-server/Server.h
index 6527ac5..e29b5ed 100755
--- a/cuTPS-server/Server.h
+++ b/cuTPS-server/Server.h
@@ -53,10 +53,16 @@ public:
     // Content Manager request API. Each of these requests
     // adds some content into the system availability
 
-    ServerResponse addCourse(QUuid, Course);
-    ServerResponse addTextbook(QUuid, Textbook);
-    ServerResponse addChapter(QUuid, Chapter);
-    ServerResponse addSection(QUuid, Section);
+    // TODO: make server return ids for created items (i.e. set newId)
+    ServerResponse addCourse(QUuid, Course&, qint32* newId);
+    ServerResponse addTextbook(QUuid, Textbook&, qint32* newId);
+    ServerResponse addChapter(QUuid, Chapter&, qint32* newId);
+    ServerResponse addSection(QUuid, Section&, qint32* newId);
+
+    ServerResponse replaceCourse(QUuid, qint32 id, Course&);
+    ServerResponse replaceTextbook(QUuid, qint32 id, Textbook&);
+    ServerResponse replaceChapter(QUuid, qint32 id, Chapter&);
+    ServerResponse replaceSection(QUuid, qint32 id, Section&);
 
     // Student request API.
 
diff --git a/cuTPS-server/ServerPrefs.cpp b/cuTPS-server/ServerPrefs.cpp
index 4fe15f0..9170a28 100644
--- a/cuTPS-server/ServerPrefs.cpp
+++ b/cuTPS-server/ServerPrefs.cpp
@@ -4,30 +4,32 @@
 #include <QSettings>
 #include <QDir>
 
+using namespace TPSPrefDef;
+
 ServerPrefs::ServerPrefs()
 {
 }
 
 const QString ServerPrefs::GetDbPath()
 {
-    QSettings settings("cutpsd.conf", QSettings::IniFormat);
-    const QString dbPath = settings.value(TPSConstants::PREF_DB_PATH_SEC, QDir::currentPath() + QString("/db/cutpsd.db")).toString();
-    settings.setValue(TPSConstants::PREF_DB_PATH_SEC, dbPath);
+    QSettings settings(PREF_CONF_FILE, QSettings::IniFormat);
+    const QString dbPath = settings.value(PREF_DB_PATH_SEC, QDir::currentPath() + QString("/db/cutpsd.db")).toString();
+    settings.setValue(PREF_DB_PATH_SEC, dbPath);
     return dbPath;
 }
 
 int ServerPrefs::GetPort()
 {
-    QSettings settings("cutpsd.conf", QSettings::IniFormat);
-    const int port = settings.value(TPSConstants::PREF_PORT, TPSConstants::PREF_PORT_DEF).toInt();
-    settings.setValue(TPSConstants::PREF_PORT, port);
+    QSettings settings(PREF_CONF_FILE, QSettings::IniFormat);
+    const int port = settings.value(PREF_PORT, PREF_PORT_DEF).toInt();
+    settings.setValue(PREF_PORT, port);
     return port;
 }
 
 int ServerPrefs::MaxThreads()
 {
-    QSettings settings("cutpsd.conf", QSettings::IniFormat);
-    const int nThreads = settings.value(TPSConstants::PREF_MAX_THR, TPSConstants::PREF_MAX_THR_DEF).toInt();
-    settings.setValue(TPSConstants::PREF_MAX_THR, nThreads);
+    QSettings settings(PREF_CONF_FILE, QSettings::IniFormat);
+    const int nThreads = settings.value(PREF_MAX_THR, PREF_MAX_THR_DEF).toInt();
+    settings.setValue(PREF_MAX_THR, nThreads);
     return nThreads;
 }
diff --git a/cuTPS-server/ServerPrefs.h b/cuTPS-server/ServerPrefs.h
index d4f85fd..316bb36 100644
--- a/cuTPS-server/ServerPrefs.h
+++ b/cuTPS-server/ServerPrefs.h
@@ -14,9 +14,11 @@ public:
 
 };
 
-namespace TPSConstants
+namespace TPSPrefDef
 {
 
+static const QString PREF_CONF_FILE     = "cutpsd.conf";
+
 static const QString PREF_DB_PATH_SEC   = "Database/Database_Path";
 
 static const QString PREF_PORT          = "Network/Port";
-- 
1.7.9.5


From c3eac652578bb1d7c4fbd8d1345e2e38923c6c7c Mon Sep 17 00:00:00 2001
From: Kirill Kravinsky <woyorus@gmail.com>
Date: Mon, 8 Dec 2014 02:08:00 -0500
Subject: [PATCH 08/16] Student registation API call update (now it takes
 password argument)

---
 cuTPS-client/ClientNetworkHandler.cpp |    2 +-
 cuTPS-client/ClientNetworkHandler.h   |    2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/cuTPS-client/ClientNetworkHandler.cpp b/cuTPS-client/ClientNetworkHandler.cpp
index a85c59b..4f2384e 100644
--- a/cuTPS-client/ClientNetworkHandler.cpp
+++ b/cuTPS-client/ClientNetworkHandler.cpp
@@ -441,7 +441,7 @@ QUuid ClientNetworkHandler::removeSection(qint32 id)
     return requestId;
 }
 
-QUuid ClientNetworkHandler::addStudentUser(Student& usr)
+QUuid ClientNetworkHandler::addStudentUser(Student& usr, QString passwd)
 {
     ASSERT_VALID
 
diff --git a/cuTPS-client/ClientNetworkHandler.h b/cuTPS-client/ClientNetworkHandler.h
index 894822c..d5b7acd 100644
--- a/cuTPS-client/ClientNetworkHandler.h
+++ b/cuTPS-client/ClientNetworkHandler.h
@@ -131,7 +131,7 @@ public:
     // What: add a new student user to the system.
     // Available for: ContentManagers, Administrators.
     // Reletaed reply: updateCompete()
-    QUuid addStudentUser(Student&);
+    QUuid addStudentUser(Student&, QString passwd);
 
     // ADMINISTRATOR OPERATIONS
 
-- 
1.7.9.5


From 348ff0e0cf2fdaf3ed7f751fcfdd79afef595fff Mon Sep 17 00:00:00 2001
From: Kirill Kravinsky <woyorus@gmail.com>
Date: Mon, 8 Dec 2014 02:23:32 -0500
Subject: [PATCH 09/16] getAllBooks() implementation

---
 cuTPS-client/ClientNetworkHandler.cpp |   20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/cuTPS-client/ClientNetworkHandler.cpp b/cuTPS-client/ClientNetworkHandler.cpp
index 4f2384e..c280f62 100644
--- a/cuTPS-client/ClientNetworkHandler.cpp
+++ b/cuTPS-client/ClientNetworkHandler.cpp
@@ -116,6 +116,26 @@ QUuid ClientNetworkHandler::getRequiredBooks()
     return requestId;
 }
 
+QUuid ClientNetworkHandler::getAllBooks()
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IGetAllBooks);
+    request.setRequestId(requestId);
+
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
+
+    outStream << request;
+
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
 QUuid ClientNetworkHandler::getAllCourses()
 {
     ASSERT_VALID
-- 
1.7.9.5


From acb7b3b918e5a9cb7aa197e902a7d49b0f67f293 Mon Sep 17 00:00:00 2001
From: zachuserid <z.renaud5@gmail.com>
Date: Mon, 8 Dec 2014 02:26:23 -0500
Subject: [PATCH 10/16] Refactored ContentWindow to use new request

---
 cuTPS-client/ClientNetworkHandler.cpp    |    8 +
 cuTPS-client/ContentRequestAPI.cpp       |    5 +
 cuTPS-client/ContentRequestAPI.h         |    1 +
 cuTPS-client/CourseDetailsWindow.cpp     |    9 ++
 cuTPS-client/CourseDetailsWindow.h       |    2 +
 cuTPS-client/ManageContentControl.cpp    |    4 +
 cuTPS-client/ManageContentListWindow.cpp |  239 +++++++++++++++++++++---------
 cuTPS-client/ManageContentListWindow.h   |   26 +++-
 cuTPS-common/Entity/Chapter.cpp          |    2 +-
 cuTPS-common/Entity/Textbook.cpp         |    2 +-
 10 files changed, 217 insertions(+), 81 deletions(-)

diff --git a/cuTPS-client/ClientNetworkHandler.cpp b/cuTPS-client/ClientNetworkHandler.cpp
index 33431cb..18c2a7c 100644
--- a/cuTPS-client/ClientNetworkHandler.cpp
+++ b/cuTPS-client/ClientNetworkHandler.cpp
@@ -136,6 +136,14 @@ QUuid ClientNetworkHandler::getAllCourses()
     return requestId;
 }
 
+QUuid ClientNetworkHandler::getAllBooks()
+{
+    // TODO: Implement this.
+
+    QUuid reqId;
+    return reqId;
+}
+
 QUuid ClientNetworkHandler::getBookDetails(const qint32 id)
 {
     return getBookDetails(QVector<qint32>({id}));
diff --git a/cuTPS-client/ContentRequestAPI.cpp b/cuTPS-client/ContentRequestAPI.cpp
index 849fa34..4a5022e 100644
--- a/cuTPS-client/ContentRequestAPI.cpp
+++ b/cuTPS-client/ContentRequestAPI.cpp
@@ -28,3 +28,8 @@ QUuid ContentRequestAPI::deleteItem(int itemId)
     QUuid id;
     return id;
 }
+
+QUuid ContentRequestAPI::getAllBooks()
+{
+    return this->networking->getAllBooks();
+}
diff --git a/cuTPS-client/ContentRequestAPI.h b/cuTPS-client/ContentRequestAPI.h
index aeb31c8..88b8ab3 100644
--- a/cuTPS-client/ContentRequestAPI.h
+++ b/cuTPS-client/ContentRequestAPI.h
@@ -15,6 +15,7 @@ class ContentRequestAPI : public QObject
         QUuid addChapter(int, Chapter&);
         QUuid addSection(int, int, Section&);
         QUuid deleteItem(int);
+        QUuid getAllBooks();
 
     signals:
 
diff --git a/cuTPS-client/CourseDetailsWindow.cpp b/cuTPS-client/CourseDetailsWindow.cpp
index a89113a..b6999e0 100644
--- a/cuTPS-client/CourseDetailsWindow.cpp
+++ b/cuTPS-client/CourseDetailsWindow.cpp
@@ -159,3 +159,12 @@ void CourseDetailsWindow::on_addBookButton_clicked()
 
     this->addReqBooksWin->show();
 }
+
+void CourseDetailsWindow::on_courseList_currentRowChanged(int currentRow)
+{
+    // Handle disabling actions that required a selection when the
+    // widget loses focus/selection
+    if (currentRow < 0) {
+        this->ui->deleteCourseButton->setEnabled(false);
+    }
+}
diff --git a/cuTPS-client/CourseDetailsWindow.h b/cuTPS-client/CourseDetailsWindow.h
index 2941ea6..b52823f 100644
--- a/cuTPS-client/CourseDetailsWindow.h
+++ b/cuTPS-client/CourseDetailsWindow.h
@@ -54,6 +54,8 @@ private slots:
 
     void on_addBookButton_clicked();
 
+    void on_courseList_currentRowChanged(int currentRow);
+
 private:
     Ui::CourseDetailsWindow *ui;
     ManageCourseControl *manageCourseCtrl;
diff --git a/cuTPS-client/ManageContentControl.cpp b/cuTPS-client/ManageContentControl.cpp
index 75abba7..d9f713e 100644
--- a/cuTPS-client/ManageContentControl.cpp
+++ b/cuTPS-client/ManageContentControl.cpp
@@ -22,6 +22,10 @@ ManageContentControl::ManageContentControl(ContentManagementInterface *backWin,
 
     connect(contentManagementWin, SIGNAL(deleteItem(int)),
             this, SLOT(deleteItem(int)));
+
+    connect(networking, SIGNAL(textbookListReceived(QUuid,int,QList<Textbook*>*)),
+            contentManagementWin, SLOT(textbookListReceived(QUuid,int,QList<Textbook*>*)));
+
     // TODO: connect slots for requests that the networking will signal
 }
 
diff --git a/cuTPS-client/ManageContentListWindow.cpp b/cuTPS-client/ManageContentListWindow.cpp
index b4fdada..4fa88dd 100644
--- a/cuTPS-client/ManageContentListWindow.cpp
+++ b/cuTPS-client/ManageContentListWindow.cpp
@@ -19,7 +19,10 @@ ManageContentListWindow::ManageContentListWindow(QWidget *parent,
 
     this->contentDepth = 0;
 
-    this->listedItems = NULL;
+    this->textbookList = NULL;
+    this->chapterList = NULL;
+    this->sectionList = NULL;
+
     this->addBookWin = NULL;
     this->addChapterWin = NULL;
     this->addSectionWin = NULL;
@@ -27,7 +30,48 @@ ManageContentListWindow::ManageContentListWindow(QWidget *parent,
     this->bookId = -1;
     this->chapterId = -1;
 
-    this->displayBookList();
+    //this->refreshContents(); // TODO: remove below, uncomment this once tested
+
+    // Request all sections (id, title) from server for chapterId
+    ////////// pretend for now that this list represents actual data: /////////
+    Section *s1 = new Section(9, NULL, 1, "Section One", 325, true);
+    Section *s2 = new Section(10, NULL, 2, "Section Two", 354, true);
+    Section *s3 = new Section(11, NULL, 3, "Section Three", 311, true);
+    Section *s4 = new Section(12, NULL, 4, "Section Four", 166, true);
+    /////////////////////////////////////////////////////////////////////////
+
+    ////////// pretend for now that this list represents actual data: /////////
+    Chapter *c1 = new Chapter(5, NULL, 1, "Chapter One", 432, true);
+    Chapter *c2 = new Chapter(6, NULL, 2, "Chapter Two", 2345, true);
+    Chapter *c3 = new Chapter(7, NULL, 3, "Chapter Three", 234, true);
+    Chapter *c4 = new Chapter(8, NULL, 4, "Chapter Four", 123, true);
+    /////////////////////////////////////////////////////////////////////////
+
+    ////////// pretend for now that this list represents actual data: /////////
+    QList<Textbook*> *books = new QList<Textbook*>();
+    Textbook *t1 = new Textbook(1, "The First Book", "1st", "Some Dorc", 554563, 1, "123456678");
+    Textbook *t2 = new Textbook(2, "The Second Book", "2nd", "Some Corc", 34536, 1, "123456679");
+    Textbook *t3 = new Textbook(3, "The Third Book", "3rd", "Some Borc", 2345, 1, "123456680");
+    Textbook *t4 = new Textbook(4, "The Fourth Book", "999th", "Some Pork :D", 2234556, 1, "123456681");
+    books->append(t1); books->append(t2); books->append(t3); books->append(t4);
+    /////////////////////////////////////////////////////////////////////////
+    /*
+    s1->setParentChapter(c1); s2->setParentChapter(c3); s3->setParentChapter(c3); s4->setParentChapter(c4);
+
+    c1->setParentTextbook(t1); c2->setParentTextbook(t2); c3->setParentTextbook(t1); c4->setParentTextbook(t3);
+    */
+    c1->addSection(*s1); //c1->addSection(*s2); c1->addSection(*s3); c1->addSection(*s4);
+    c2->addSection(*s2); //c2->addSection(*s2); c2->addSection(*s3); c2->addSection(*s4);
+    c3->addSection(*s3); //c3->addSection(*s2); c3->addSection(*s3); c3->addSection(*s4);
+    c4->addSection(*s4); //c4->addSection(*s2); c4->addSection(*s3); c4->addSection(*s4);
+
+    t1->addChapter(*c1); //t1->addChapter(*c2); t1->addChapter(*c3); t1->addChapter(*c4);
+    t2->addChapter(*c2); //t2->addChapter(*c2); t2->addChapter(*c3); t2->addChapter(*c4);
+    t3->addChapter(*c3); //t3->addChapter(*c2); t3->addChapter(*c3); t3->addChapter(*c4);
+    t4->addChapter(*c4); //t4->addChapter(*c2); t4->addChapter(*c3); t4->addChapter(*c4);
+
+    QUuid uid;
+    this->textbookListReceived(uid, 0, books);
 }
 
 ManageContentListWindow::~ManageContentListWindow()
@@ -42,6 +86,21 @@ ManageContentListWindow::~ManageContentListWindow()
 
     if (this->addSectionWin != NULL)
         delete this->addSectionWin;
+
+    // Clear the containers
+    this->clearSections();
+    this->clearChapters();
+
+    // Deep delete on textbook container and all contents.
+    // This will propogate down to the chapters and sections
+    if (this->textbookList != NULL) {
+        int size = this->textbookList->size();
+        for (int i = 0; i < size; i++)
+            delete this->textbookList->at(i);
+
+        delete this->textbookList;
+        this ->textbookList = NULL;
+    }
 }
 
 void ManageContentListWindow::on_backButton_clicked()
@@ -50,111 +109,120 @@ void ManageContentListWindow::on_backButton_clicked()
     emit navigateBack();
 }
 
-void ManageContentListWindow::displayBookList()
+void ManageContentListWindow::refreshContents()
 {
-    qDebug() << "Displaying book list";
+    this->requestAPI->getAllBooks();
+}
 
-    this->ui->modifyItemButton->setEnabled(false);
-    this->ui->deleteItemButton->setEnabled(false);
+void ManageContentListWindow::textbookListReceived(
+        QUuid reqId, int code,
+        QList<Textbook*>* bookList)
+{
+    qDebug() << "ManageContentListWindow::TextbookListReceived "
+             << "num books: " << bookList->size();
 
-    // Request all books (id, title) from server
-    ////////// pretend for now that this list represents actual data: /////////
-    QVector<SellableItem*> *books = new QVector<SellableItem*>();
-    Textbook *t1 = new Textbook(1, "The First Book", "1st", "Some Dorc", 554563, 1, "123456678");
-    Textbook *t2 = new Textbook(2, "The Second Book", "2nd", "Some Corc", 34536, 1, "123456679");
-    Textbook *t3 = new Textbook(3, "The Third Book", "3rd", "Some Borc", 2345, 1, "123456680");
-    Textbook *t4 = new Textbook(4, "The Fourth Book", "999th", "Some Pork :D", 2234556, 1, "123456681");
-    books->append(t1); books->append(t2); books->append(t3); books->append(t4);
-    /////////////////////////////////////////////////////////////////////////
+    this->clearTextbooks();
+
+    // Fill the text list from the QList
+    this->textbookList = new QVector<Textbook*>(); // current display
+    for (Textbook *book: *bookList)
+        this->textbookList->append(book);
+
+    this->displayBookList();
+}
+
+void ManageContentListWindow::clearTextbooks()
+{
+    if (this->textbookList != NULL) {
+        qDebug() << "clearing textbookList";
+
+        delete this->textbookList;
+        this->textbookList = NULL;
+    }
+}
+
+void ManageContentListWindow::clearChapters()
+{
+    if (this->chapterList != NULL) {
+        qDebug() << "Clearing chapterList";
 
-    // Update the window's item list vector
-    if (this->listedItems != NULL) {
-        for (int i = 0; i < books->size(); i++)
-            delete this->listedItems->at(i);
+        delete this->chapterList;
+        this->chapterList = NULL;
+    }
+}
+
+void ManageContentListWindow::clearSections()
+{
+    if (this->sectionList != NULL) {
+        qDebug() << "Clearing sectionList";
 
-        delete this->listedItems;
+        delete this->sectionList;
+        this->sectionList = NULL;
     }
+}
+
+void ManageContentListWindow::displayBookList()
+{
+    qDebug() << "Displaying book list";
+
+    this->ui->modifyItemButton->setEnabled(false);
+    this->ui->deleteItemButton->setEnabled(false);
 
-    this->listedItems = books;
+    // Clear lower level content lists
+    this->clearChapters();
+    this->clearSections();
 
-    // Display the books in the itemList.
+    // Display the books in the item list.
     this->ui->contentList->clear();
-    for (SellableItem *book: *books) {
+    for (Textbook *book: *(this->textbookList)) {
         this->ui->contentList->addItem(book->getTitle());
     }
 
 }
 
-void ManageContentListWindow::displayChapterList(int bookId)
+void ManageContentListWindow::displayChapterList(Textbook *book)
 {
     qDebug() << "Displaying chapter list for bookId = " << bookId;
 
     this->ui->modifyItemButton->setEnabled(false);
     this->ui->deleteItemButton->setEnabled(false);
 
-    this->bookId = bookId;
+    // Clean up memory for lower level content lists
+    this->clearSections();
 
-    // Request all chapters (id, title) from server for bookId
-    ////////// pretend for now that this list represents actual data: /////////
-    QVector<SellableItem*> *chapters = new QVector<SellableItem*>();
-    Chapter *c1 = new Chapter(5, NULL, 1, "Chapter One", 432, true);
-    Chapter *c2 = new Chapter(6, NULL, 2, "Chapter Two", 2345, true);
-    Chapter *c3 = new Chapter(7, NULL, 3, "Chapter Three", 234, true);
-    Chapter *c4 = new Chapter(8, NULL, 4, "Chapter Four", 123, true);
-    chapters->append(c1); chapters->append(c2); chapters->append(c3); chapters->append(c4);
-    /////////////////////////////////////////////////////////////////////////
-
-    // Update the window's item list vector
-    if (this->listedItems != NULL) {
-        for (int i = 0; i < chapters->size(); i++)
-            delete this->listedItems->at(i);
+    this->bookId = -1;
 
-        delete this->listedItems;
+    if (this->chapterList == NULL) {
+        this->chapterList = new QVector<Chapter*>(book->getChapterList());
+        this->bookId = book->getId();
     }
 
-    this->listedItems = chapters;
-
-    // Display the books in the itemList.
+    // Display the books in the item list.
     this->ui->contentList->clear();
-    for (SellableItem *chapter: *chapters) {
+    for (Chapter *chapter: *(this->chapterList)) {
         qDebug() << "adding chapter ptr: " << chapter;
         qDebug() << "its id is " << chapter->getId();
         this->ui->contentList->addItem(chapter->getTitle());
     }
 }
 
-void ManageContentListWindow::displaySectionList(int chapterId)
+void ManageContentListWindow::displaySectionList(Chapter *chapter)
 {
     qDebug() << "Displaying section list for chapterId = " << chapterId;
 
     this->ui->modifyItemButton->setEnabled(false);
     this->ui->deleteItemButton->setEnabled(false);
 
-    this->chapterId = chapterId;
-
-    // Request all sections (id, title) from server for chapterId
-    ////////// pretend for now that this list represents actual data: /////////
-    QVector<SellableItem*> *sections = new QVector<SellableItem*>();
-    Section *s1 = new Section(9, NULL, 1, "Section One", 325, true);
-    Section *s2 = new Section(10, NULL, 2, "Section Two", 354, true);
-    Section *s3 = new Section(11, NULL, 3, "Section Three", 311, true);
-    Section *s4 = new Section(12, NULL, 4, "Section Four", 166, true);
-    sections->append(s1); sections->append(s2); sections->append(s3); sections->append(s4);
-    /////////////////////////////////////////////////////////////////////////
-
-    // Update the window's item list vector
-    if (this->listedItems != NULL) {
-        for (int i = 0; i < sections->size(); i++)
-            delete this->listedItems->at(i);
+    this->chapterId = -1;
 
-        delete this->listedItems;
+    if (this->sectionList == NULL) { // re-use if not null
+        this->sectionList = new QVector<Section*>(chapter->getSectionList());
+        this->chapterId = chapter->getId();
     }
 
-    this->listedItems = sections;
-
-    // Display the books in the itemList.
+    // Display the books in the item list.
     this->ui->contentList->clear();
-    for (SellableItem *section: *sections) {
+    for (Section *section: *(this->sectionList)) {
         this->ui->contentList->addItem(section->getTitle());
     }
 }
@@ -166,7 +234,7 @@ void ManageContentListWindow::on_contentList_clicked(const QModelIndex &index)
 
     qDebug() << "Single click on item at index: " << QString::number(index.row());
 
-    SellableItem *selectedItem = this->listedItems->at(index.row());
+    SellableItem *selectedItem = this->getSelectedItem(index.row());
 
     qDebug() << "Selected item details: " << selectedItem->getDetails();
 
@@ -178,7 +246,7 @@ void ManageContentListWindow::on_contentList_doubleClicked(const QModelIndex &in
     if (this->contentDepth >= MAX_ITEM_DEPTH)
         return;
 
-    SellableItem *selectedItem = this->listedItems->at(index.row());
+    SellableItem *selectedItem = this->getSelectedItem(index.row());
 
     this->contentDepth++;
 
@@ -187,9 +255,9 @@ void ManageContentListWindow::on_contentList_doubleClicked(const QModelIndex &in
     this->ui->metadataView->setText("");
 
     if (this->contentDepth == 1)
-        this->displayChapterList(selectedItem->getId());
+        this->displayChapterList(dynamic_cast<Textbook*>(selectedItem));
     else if(this->contentDepth == 2)
-        this->displaySectionList(selectedItem->getId());
+        this->displaySectionList(dynamic_cast<Chapter*>(selectedItem));
 }
 
 void ManageContentListWindow::on_contentBackButton_clicked()
@@ -204,12 +272,10 @@ void ManageContentListWindow::on_contentBackButton_clicked()
 
     this->ui->metadataView->setText("");
 
-    // TODO: Depending on whether the parents are guaranteed to be defined,
-    // we can get the ID that way, or store it as a temp value when descending.
     if (this->contentDepth == 0)
         this->displayBookList();
     else if(this->contentDepth == 1)
-        this->displayChapterList(-1);
+        this->displayChapterList(NULL);
 }
 
 void ManageContentListWindow::on_newContentButton_clicked()
@@ -347,8 +413,33 @@ void ManageContentListWindow::on_deleteItemButton_clicked()
     emit deleteItem(itemId);
 }
 
+SellableItem* ManageContentListWindow::getSelectedItem(int index)
+{
+    // Note: this is pretty ugly.. As mentioned in header
+    SellableItem *item;
+
+    switch (this->contentDepth) {
+        case 0:
+            qDebug() << "Getting book at index " << index
+                     << ", size of list " << this->textbookList->size();
+            item = this->textbookList->at(index);
+            break;
+        case 1:
+            qDebug() << "Getting chapter at index " << index
+                     << ", size of list " << this->chapterList->size();
+            item = this->chapterList->at(index);
+            break;
+        case 2:
+            qDebug() << "Getting section at index " << index
+                     << ", size of list " << this->sectionList->size();
+            item = this->sectionList->at(index);
+            break;
+    }
+    return item;
+}
+
 SellableItem* ManageContentListWindow::getSelectedItem()
 {
     int index = this->ui->contentList->currentIndex().row();
-    return this->listedItems->at(index);
+    return this->getSelectedItem(index);
 }
diff --git a/cuTPS-client/ManageContentListWindow.h b/cuTPS-client/ManageContentListWindow.h
index 6c643b3..5c53edc 100644
--- a/cuTPS-client/ManageContentListWindow.h
+++ b/cuTPS-client/ManageContentListWindow.h
@@ -13,6 +13,10 @@
 #include "AddChapterWindow.h"
 #include "AddSectionWindow.h"
 
+#include "Entity/Section.h"
+#include "Entity/Chapter.h"
+#include "Entity/Textbook.h"
+
 // Forward decleration to avoid circular dep
 class ManageContentControl;
 
@@ -34,6 +38,10 @@ signals:
     void navigateBack();
     void deleteItem(int);
 
+public slots:
+    // Response from networking for getAllBooks()
+    void textbookListReceived(QUuid,int,QList<Textbook*>*);
+
 private slots:
     void on_backButton_clicked();
 
@@ -50,8 +58,6 @@ private slots:
     void on_modifyItemButton_clicked();
 
 private:
-    SellableItem *getSelectedItem();
-
     int contentDepth;
 
     Ui::ManageContentListWindow *ui;
@@ -60,7 +66,11 @@ private:
 
     ContentRequestAPI *requestAPI;
 
-    QVector<SellableItem*> *listedItems;
+    // There is probably a much nicer approach to this
+    // using polymorphism. Taking a shortcut to get a P.O.C.
+    QVector<Textbook*> *textbookList;
+    QVector<Chapter*> *chapterList;
+    QVector<Section*> *sectionList;
 
     AddTextbookWindow *addBookWin;
 
@@ -75,15 +85,21 @@ private:
     int bookId;
     int chapterId;
 
+    SellableItem *getSelectedItem();
+    SellableItem *getSelectedItem(int);
+    void refreshContents();
     void displayBookList();
-    void displayChapterList(int);
-    void displaySectionList(int);
+    void displayChapterList(Textbook*);
+    void displaySectionList(Chapter*);
     void addTextbook();
     void addChapter();
     void addSection();
     void modTextbook();
     void modChapter();
     void modSection();
+    void clearTextbooks();
+    void clearChapters();
+    void clearSections();
 };
 
 #endif // MANAGECONTENTLISTWINDOW_H
diff --git a/cuTPS-common/Entity/Chapter.cpp b/cuTPS-common/Entity/Chapter.cpp
index 2d56852..a3baaae 100644
--- a/cuTPS-common/Entity/Chapter.cpp
+++ b/cuTPS-common/Entity/Chapter.cpp
@@ -41,7 +41,7 @@ Chapter::Chapter(Textbook* textbook,
 
 Chapter::~Chapter() {
     for (Section* s : sections)
-        delete s;
+        if (s != NULL) delete s;
 }
 
 Textbook* Chapter::getParentTextbook() {
diff --git a/cuTPS-common/Entity/Textbook.cpp b/cuTPS-common/Entity/Textbook.cpp
index 9d60ba1..635232a 100644
--- a/cuTPS-common/Entity/Textbook.cpp
+++ b/cuTPS-common/Entity/Textbook.cpp
@@ -27,7 +27,7 @@ Textbook::Textbook() : SellableItem() {
 
 Textbook::~Textbook() {
     for (Chapter* c : chapters)
-        delete c;
+        if (c != NULL) delete c;
 }
 
 QString Textbook::getISBN() const {
-- 
1.7.9.5


From c6857ada0c1d7f16e07bff1f216f368fbb16aac3 Mon Sep 17 00:00:00 2001
From: zachuserid <z.renaud5@gmail.com>
Date: Mon, 8 Dec 2014 03:04:24 -0500
Subject: [PATCH 11/16] merge conflict fixed

---
 cuTPS-client/ClientNetworkHandler.cpp |    8 --------
 1 file changed, 8 deletions(-)

diff --git a/cuTPS-client/ClientNetworkHandler.cpp b/cuTPS-client/ClientNetworkHandler.cpp
index 20c4a6d..c280f62 100644
--- a/cuTPS-client/ClientNetworkHandler.cpp
+++ b/cuTPS-client/ClientNetworkHandler.cpp
@@ -156,14 +156,6 @@ QUuid ClientNetworkHandler::getAllCourses()
     return requestId;
 }
 
-QUuid ClientNetworkHandler::getAllBooks()
-{
-    // TODO: Implement this.
-
-    QUuid reqId;
-    return reqId;
-}
-
 QUuid ClientNetworkHandler::getBookDetails(const qint32 id)
 {
     return getBookDetails(QVector<qint32>({id}));
-- 
1.7.9.5


From cb6635dd484462eba2ec0cbef91168a9d5728b11 Mon Sep 17 00:00:00 2001
From: Kirill Kravinsky <woyorus@gmail.com>
Date: Mon, 8 Dec 2014 07:01:35 -0500
Subject: [PATCH 12/16] Add Text,Chapter,Section storage implementations User
 paswords are now stored as salted HMAC-SHA1 hashes
 Database modifications

---
 create_db.sql                                   |   32 +++-
 cuTPS-client/ClientNetworkHandler.cpp           |    2 +-
 cuTPS-client/ClientNetworkHandler.h             |    1 -
 cuTPS-common/Entity/Chapter.cpp                 |    2 +-
 cuTPS-common/Entity/Chapter.h                   |    2 +-
 cuTPS-common/Entity/Course.cpp                  |   21 +++
 cuTPS-common/Entity/Course.h                    |   10 +-
 cuTPS-common/Entity/Textbook.cpp                |    2 +-
 cuTPS-common/Entity/Textbook.h                  |    2 +-
 cuTPS-server/ClientTaskHandling/AddUserTask.cpp |    3 +-
 cuTPS-server/Secrets.h                          |   11 ++
 cuTPS-server/SecurityUtils.cpp                  |  109 ++++++++++++
 cuTPS-server/SecurityUtils.h                    |   32 ++++
 cuTPS-server/Server.cpp                         |  205 +++++++++++++++++++----
 cuTPS-server/Server.h                           |    3 +
 cuTPS-server/ServerPrefs.cpp                    |    2 +-
 cuTPS-server/cuTPS-server.pro                   |    7 +-
 cuTPS-server/db/cutps.db                        |  Bin 0 -> 73728 bytes
 cuTPS-server/db/cutpsd.db                       |  Bin 22528 -> 0 bytes
 19 files changed, 390 insertions(+), 56 deletions(-)
 create mode 100644 cuTPS-server/Secrets.h
 create mode 100644 cuTPS-server/SecurityUtils.cpp
 create mode 100644 cuTPS-server/SecurityUtils.h
 create mode 100644 cuTPS-server/db/cutps.db
 delete mode 100644 cuTPS-server/db/cutpsd.db

diff --git a/create_db.sql b/create_db.sql
index 5518b16..330a4d4 100644
--- a/create_db.sql
+++ b/create_db.sql
@@ -2,7 +2,8 @@ create table if not exists User (
     id int primary key not null,
     username text not null,
     name text not null,
-    password text not null
+    password text not null,
+    role int not null
 );
 
 create table if not exists Student(
@@ -30,7 +31,6 @@ create table if not exists DeliveryInfo(
 
 create table if not exists CreditCardInfo(
     user_id integer primary key not null,
-    type text not null,
     holder_name text not null,
     number char(19) not null,
     expiry_date text not null,
@@ -49,7 +49,9 @@ create table if not exists User_Course(
 create table if not exists Course(
     id integer primary key not null,
     code char(10) not null,
-    name text not null
+    name text not null,
+    term_section char(1) not null,
+    term_year int not null
 );
 
 create table if not exists Course_Textbook(
@@ -84,7 +86,7 @@ create table if not exists Chapter(
 create table if not exists Section(
     item_id integer primary key not null,
     chapter_id int not null,
-    section_num float not null,
+    section_num int not null,
     foreign key(chapter_id) references Chapter(id),
     foreign key(item_id) references SellableItem(id)
 );
@@ -95,22 +97,34 @@ create table if not exists Report(
     script text not null
 );
 
-insert into User values (1, "admin", "Administrator", "pass");
+insert into User values (1, "admin", "Administrator", "6768baac184359a3aab593bceec8fe4882fc8b6d|FP2BX", 0);
 insert into Administrator values (1);
 
-insert into User values (2, "cm", "Content Manager", "pass");
+insert into User values (2, "cm", "Content Manager", "ad52a56dcdcc1348a60d639b952e4b22ef2675fc|8U8GW", 1);
 insert into ContentManager values (2);
 
-insert into User values (3, "joesmith", "Joe Smith", "alamepassword");
+insert into User values (3, "joesmith", "Joe Smith", "246a98379322b1065d1f047a5b19e2fa1985265d|A3SY6", 2);
 insert into Student values (3, "100123457", "joesmith@cmail.carleton.ca");
 
-insert into User_Course values (3,1);
+insert into User values (4, "woyorus", "woyorus", "c5bfcce2af6b93a2f9509549ffcbe0016ce56f44|JPO7X", 2);
+insert into Student values (4, "100867357", "woyorus@gmail.com");
+
+insert into Course values (1, "COMP3004", "Object-Oriented Software Engineering", 'A', 2014);
+insert into Course values (2, "COMP3000", "Operating Systems", 'A', 2014);
 
-insert into Course values (1, "COMP3004", "Object-Oriented Software Engineering");
+insert into User_Course values (3,1);
+insert into User_Course values (4,1);
+insert into User_Course values (4,2);
 
 insert into SellableItem values (1, "Object-Oriented Software Engineering: Using UML, Patterns, and Java", "12356", 1);
+insert into SellableItem values (2, "Introduction", "1000", 1);
+insert into SellableItem values (3, "Welcome", "345", 1);
 
 insert into Textbook values (1, "123-456-7890");
 
+insert into Chapter values (2, 1, 1);
+
+insert into Section values (3, 2, 1);
+
 insert into Course_Textbook values (1,1);
 
diff --git a/cuTPS-client/ClientNetworkHandler.cpp b/cuTPS-client/ClientNetworkHandler.cpp
index c280f62..b1f4de9 100644
--- a/cuTPS-client/ClientNetworkHandler.cpp
+++ b/cuTPS-client/ClientNetworkHandler.cpp
@@ -475,6 +475,7 @@ QUuid ClientNetworkHandler::addStudentUser(Student& usr, QString passwd)
     QDataStream outDataStream(&data, QIODevice::WriteOnly);
 
     outDataStream << usr;
+    outDataStream << passwd;
 
     request.setData(data);
 
@@ -761,4 +762,3 @@ void ClientNetworkHandler::error(QAbstractSocket::SocketError e)
     emit networkError(e);
 }
 
-
diff --git a/cuTPS-client/ClientNetworkHandler.h b/cuTPS-client/ClientNetworkHandler.h
index d5b7acd..2ef4391 100644
--- a/cuTPS-client/ClientNetworkHandler.h
+++ b/cuTPS-client/ClientNetworkHandler.h
@@ -179,7 +179,6 @@ private:
     bool loggedIn;
     // Block size for reads from the connection
     qint16 blockSize;
-
 };
 
 #endif // CLIENTNETWORKHANDLER_H
diff --git a/cuTPS-common/Entity/Chapter.cpp b/cuTPS-common/Entity/Chapter.cpp
index a3baaae..531d6a2 100644
--- a/cuTPS-common/Entity/Chapter.cpp
+++ b/cuTPS-common/Entity/Chapter.cpp
@@ -105,7 +105,7 @@ QString Chapter::getType() {
     return "Chapter";
 }
 
-QVector<Section*> Chapter::getSectionList()
+QVector<Section*>& Chapter::getSectionList()
 {
     return sections;
 }
diff --git a/cuTPS-common/Entity/Chapter.h b/cuTPS-common/Entity/Chapter.h
index 33745fc..35a7666 100644
--- a/cuTPS-common/Entity/Chapter.h
+++ b/cuTPS-common/Entity/Chapter.h
@@ -51,7 +51,7 @@ public:
     void setParentTextbookId(const qint32 value);
 
     void addSection(const Section& s);
-    QVector<Section*> getSectionList();
+    QVector<Section*>& getSectionList();
     int numSections() const;
     
     QString getTitle();
diff --git a/cuTPS-common/Entity/Course.cpp b/cuTPS-common/Entity/Course.cpp
index 0941b66..bd71ccf 100644
--- a/cuTPS-common/Entity/Course.cpp
+++ b/cuTPS-common/Entity/Course.cpp
@@ -59,6 +59,27 @@ QString Course::stringRepr() const {
             .arg(getCourseCode(), getCourseName(), QString::number(getId()));
 }
 
+QString Course::getTermSection() const
+{
+    return termSection;
+}
+
+void Course::setTermSection(const QString value)
+{
+    // Take first uppercase letter
+    termSection = value.toUpper().at(0);
+}
+
+qint32 Course::getTermYear() const
+{
+    return termYear;
+}
+
+void Course::setTermYear(const qint32 value)
+{
+    termYear = value;
+}
+
 QDataStream& operator<<(QDataStream& os, const Course& c)
 {
     os.setVersion(TPSNetProtocolDef::PROTOCOL_VER);
diff --git a/cuTPS-common/Entity/Course.h b/cuTPS-common/Entity/Course.h
index 12852bc..6176ad8 100644
--- a/cuTPS-common/Entity/Course.h
+++ b/cuTPS-common/Entity/Course.h
@@ -41,10 +41,18 @@ public:
 
     QString stringRepr() const;
 
+    QString getTermSection() const;
+    void setTermSection(const QString value);
+
+    qint32 getTermYear() const;
+    void setTermYear(const qint32 value);
+
 private:
-    qint32 id;
+    qint32  id;
     QString code;
     QString name;
+    QString termSection;
+    qint32  termYear;
 
     // Note. Whenever a Course object is sent over network, only IDs of required texts
     // will be actually sent (as reqBooksIds). This is for performance reasons.
diff --git a/cuTPS-common/Entity/Textbook.cpp b/cuTPS-common/Entity/Textbook.cpp
index 635232a..2fd1752 100644
--- a/cuTPS-common/Entity/Textbook.cpp
+++ b/cuTPS-common/Entity/Textbook.cpp
@@ -56,7 +56,7 @@ void Textbook::addChapter(const Chapter& c)
     chapters.append(c_copy);
 }
 
-QVector<Chapter*> Textbook::getChapterList()
+QVector<Chapter*>& Textbook::getChapterList()
 {
     return chapters;
 }
diff --git a/cuTPS-common/Entity/Textbook.h b/cuTPS-common/Entity/Textbook.h
index 76746e1..310f7ab 100644
--- a/cuTPS-common/Entity/Textbook.h
+++ b/cuTPS-common/Entity/Textbook.h
@@ -44,7 +44,7 @@ public:
     QString getType();
 
     void addChapter(const Chapter& c);
-    QVector<Chapter*> getChapterList();
+    QVector<Chapter*>& getChapterList();
     const QVector<Chapter*> getConstChapterList() const;
     int numChapters() const;
 
diff --git a/cuTPS-server/ClientTaskHandling/AddUserTask.cpp b/cuTPS-server/ClientTaskHandling/AddUserTask.cpp
index 4b17abd..b46ad4d 100644
--- a/cuTPS-server/ClientTaskHandling/AddUserTask.cpp
+++ b/cuTPS-server/ClientTaskHandling/AddUserTask.cpp
@@ -21,9 +21,10 @@ void AddUserTask::run()
 
     QDataStream in(request->getData(), QIODevice::ReadOnly);
     Student usr;
+    QString pwd;
     qint32 usrId;
 
-    in >> usr;
+    in >> usr >> pwd;
 
     // TODO implement this
     //ServerResponse r = server->registerUser(sessionId, usr, &usrId);
diff --git a/cuTPS-server/Secrets.h b/cuTPS-server/Secrets.h
new file mode 100644
index 0000000..1aecad1
--- /dev/null
+++ b/cuTPS-server/Secrets.h
@@ -0,0 +1,11 @@
+#ifndef SECRETS_H
+#define SECRETS_H
+
+#include <QString>
+
+namespace TPSSecretDef {
+    static const QString SECRET = "AWTZRrD";
+    static const QString PWD_SECRET = "BIPRY8";
+}
+
+#endif // SECRETS_H
diff --git a/cuTPS-server/SecurityUtils.cpp b/cuTPS-server/SecurityUtils.cpp
new file mode 100644
index 0000000..099427a
--- /dev/null
+++ b/cuTPS-server/SecurityUtils.cpp
@@ -0,0 +1,109 @@
+#include "SecurityUtils.h"
+
+#include <QStringList>
+#include <QCryptographicHash>
+#include <QChar>
+#include <QTime>
+
+#include "Secrets.h"
+
+SecurityUtils::SecurityUtils()
+{
+    qsrand(QTime::currentTime().msec());
+}
+
+QString SecurityUtils::makePasswordHash(QString uname, QString pwd, QString salt)
+{
+    if (salt.isEmpty())
+    {
+        salt = generateSalt();
+    }
+
+    QString concat = uname + pwd + salt;
+
+    QString hash = hmacSha1(TPSSecretDef::PWD_SECRET.toUtf8(), concat.toUtf8());
+
+    return QString("%1|%2").arg(hash, salt);
+}
+
+bool SecurityUtils::validatePassword(QString uname, QString pwd, QString h)
+{
+    // second part of the hash is the salt
+    QString salt = h.split("|").at(1);
+    return h == makePasswordHash(uname, pwd, salt);
+}
+
+QString SecurityUtils::makeSecureValue(QString s)
+{
+    return QString("%1|%2").arg(s, hashString(s));
+}
+
+QString SecurityUtils::checkSecureValue(QString h)
+{
+    // checks secure value of its argument
+    QString h_copy = QString(h);
+    QString val = h_copy.split("|").at(0);
+
+    if (h == makeSecureValue(val)) {
+        return val;
+    } else {
+        return QString(); // empty string.
+    }
+}
+
+QString SecurityUtils::hashPassword(QString pwd)
+{
+    return hmacSha1(TPSSecretDef::PWD_SECRET.toUtf8(), pwd.toUtf8());
+}
+
+QString SecurityUtils::hashString(QString s)
+{
+    return hmacSha1(TPSSecretDef::SECRET.toUtf8(), s.toUtf8());
+}
+
+QString SecurityUtils::generateSalt(int length)
+{
+    QString salt;
+    salt.resize(length);
+
+    for (int i = 0; i < length; ++i)
+    {
+        // 66% chance to insert a letter, 33% to digit
+        if ((qrand() % 3) == 0) {
+            // insert random digit 0-9
+            salt[i] = QString::number(qrand() % 10).at(0);
+        } else {
+            // insert random character A-Z
+            salt[i] = QChar('A' + char(qrand() % ('Z' - 'A')));
+        }
+    }
+
+    return salt;
+}
+
+QString SecurityUtils::hmacSha1(QByteArray key, QByteArray baseString)
+{
+    // Source: http://qt-project.org/wiki/HMAC-SHA1
+    int blockSize = 64; // HMAC-SHA-1 block size, defined in SHA-1 standard
+    if (key.length() > blockSize) { // if key is longer than block size (64), reduce key length with SHA-1 compression
+        key = QCryptographicHash::hash(key, QCryptographicHash::Sha1);
+    }
+
+    QByteArray innerPadding(blockSize, char(0x36)); // initialize inner padding with char "6"
+    QByteArray outerPadding(blockSize, char(0x5c)); // initialize outer padding with char "\"
+    // ascii characters 0x36 ("6") and 0x5c ("\") are selected because they have large
+    // Hamming distance (http://en.wikipedia.org/wiki/Hamming_distance)
+
+    for (int i = 0; i < key.length(); i++) {
+        innerPadding[i] = innerPadding[i] ^ key.at(i); // XOR operation between every byte in key and innerpadding, of key length
+        outerPadding[i] = outerPadding[i] ^ key.at(i); // XOR operation between every byte in key and outerpadding, of key length
+    }
+
+    // result = hash ( outerPadding CONCAT hash ( innerPadding CONCAT baseString ) ).toBase64
+    QByteArray total = outerPadding;
+    QByteArray part = innerPadding;
+    part.append(baseString);
+    total.append(QCryptographicHash::hash(part, QCryptographicHash::Sha1));
+    QByteArray hashed = QCryptographicHash::hash(total, QCryptographicHash::Sha1);
+    return hashed.toHex();
+}
diff --git a/cuTPS-server/SecurityUtils.h b/cuTPS-server/SecurityUtils.h
new file mode 100644
index 0000000..f58eca9
--- /dev/null
+++ b/cuTPS-server/SecurityUtils.h
@@ -0,0 +1,32 @@
+#ifndef SECURITYUTILS_H
+#define SECURITYUTILS_H
+
+#include <QString>
+#include <QByteArray>
+
+class SecurityUtils
+{
+public:
+    SecurityUtils();
+
+    QString  makePasswordHash(QString uname,
+                              QString pwd,
+                              QString salt="");
+
+    bool     validatePassword(QString uname,
+                              QString pwd,
+                              QString h);
+
+    static QString  makeSecureValue(QString str);
+    // Returns value on match or empty string otherwise.
+    static QString  checkSecureValue(QString str);
+
+private:
+    QString  generateSalt(int length=5);
+
+    static QString  hashPassword(QString password);
+    static QString  hashString(QString string);
+    static QString  hmacSha1(QByteArray key, QByteArray baseString);
+};
+
+#endif // SECURITYUTILS_H
diff --git a/cuTPS-server/Server.cpp b/cuTPS-server/Server.cpp
index 3994e9b..96f0441 100755
--- a/cuTPS-server/Server.cpp
+++ b/cuTPS-server/Server.cpp
@@ -6,6 +6,8 @@
 
 #include <iostream>
 
+#include "SecurityUtils.h"
+
 Server::Server(QObject *parent) :
     QObject(parent)
 {
@@ -117,28 +119,50 @@ Role Server::getUserRole(QString &username)
 ServerResponse Server::authenticateUser(QUuid sessionID, Role &userRole, UserCredentials creds)
 {
     ServerResponse response;
+    SecurityUtils security;
     response.sessionID = sessionID;
-
     QSqlQuery query;
-    bool result = dbManager->runQuery("select * from User where username = \"" +
-                                      creds.username + "\" and password = \"" +
-                                      creds.password + "\";", &query);
+
+    // Get password hash from db
+    QString queryString = "select password, role from User where username = \""
+            + creds.username + "\";";
+
+    bool result = dbManager->runQuery(queryString,
+                                      &query);
 
     if (result) {
         if (query.first()) {
-            response.code = Success;
-            response.message = "";
-
-            userRole = getUserRole(creds.username);
-        }
-        else {
+            QString hash = query.value(0).toString();
+            bool success = security.validatePassword(creds.username,
+                                                     creds.password,
+                                                     hash);
+            if (success) {
+                response.code = Success;
+                int uRole = query.value(1).toInt();
+
+                switch (uRole) {
+                case 0:
+                    userRole = Role::AdministratorUser;
+                    break;
+                case 1:
+                    userRole = Role::ContentManagerUser;
+                    break;
+                case 2:
+                    userRole = Role::StudentUser;
+                    break;
+                }
+
+            } else {
+                response.code = Fail;
+            }
+        } else {
             response.code = Fail;
-            response.message = "Invalid credentials, user not found.";
         }
-    }
-    else {
-        response.code = Fail;
+    } else {
         response.message = query.lastError().text();
+
+        qDebug() << "Failed to auth user: " << response.message;
+        response.code = Fail;
     }
 
     return response;
@@ -219,9 +243,13 @@ ServerResponse Server::addTextbook(QUuid sessionID, Textbook& textbook, qint32*
     qDebug() << "Server::addTextbook running query: '" << queryString << "'";
     bool result = dbManager->runQuery(queryString, &query);
 
+    // if that doesn't work, use query "select seq from sqlite_sequence where name="table_name""
+    qint32 lastInsertId = query.lastInsertId().toInt();
+
     if (result) {
         response.code = Success;
         response.message = "";
+        *newId = lastInsertId;
     }
     else {
         response.code = Fail;
@@ -252,6 +280,12 @@ ServerResponse Server::addTextbook(QUuid sessionID, Textbook& textbook, qint32*
         return response;
     }
 
+    qint32 stub;
+    for (Chapter* c : textbook.getChapterList())
+    {
+        addChapter(sessionID, *c, &stub);
+    }
+
     return response;
 }
 
@@ -260,28 +294,44 @@ ServerResponse Server::addChapter(QUuid sessionID, Chapter& chapter, qint32* new
     // TODO: Also add every section of the chapter -- i.e. chapter.getSectionList()
     ServerResponse response;
     response.sessionID = sessionID;
-
     QSqlQuery query;
-    QString queryString = "insert into Chapter (textbook_id, name, available) values (";
-    queryString += chapter.getParentTextbookId();
-    queryString += ", ";
-    queryString += chapter.getName();
-    queryString += ", ";
-    queryString += chapter.getAvailability();
+
+    // TODO: ensure that getParentChapterId() belongs to getParentTextbookId().
+
+    QString queryString = "insert into SellableItem (name, price_cents, available) values (";
+    queryString += "\"" + chapter.getName() + "\", ";
+    queryString += QString::number(chapter.getPriceCents()) + ", ";
+    queryString += QString::number((int) chapter.getAvailability());
     queryString += ");";
 
     bool result = dbManager->runQuery(queryString, &query);
 
     if (result) {
         response.code = Success;
-        response.message = "";
-    }
-    else {
+    } else {
         response.code = Fail;
-        response.message = query.lastError().text();
+        qDebug() << "Error while adding chapter: " << query.lastError().text();
         return response;
     }
 
+    // if that doesn't work, use query "select seq from sqlite_sequence where name="table_name""
+    qint32 lastInsertId = query.lastInsertId().toInt();
+    *newId = lastInsertId;
+
+    queryString = "insert into Chapter (item_id, textbook_id, chapter_num) values (";
+    queryString += QString::number(lastInsertId) + ", ";
+    queryString += QString::number(chapter.getParentTextbookId()) + ", ";
+    queryString += QString::number(chapter.getChapterNumber()) + ");";
+
+    if (!result) {
+        qDebug() << "Error while adding chapter info: " << query.lastError().text();
+    }
+
+    for (Section* s : chapter.getSectionList())
+    {
+        addSection(sessionID, *s, &lastInsertId);
+    }
+
     return response;
 }
 
@@ -289,30 +339,40 @@ ServerResponse Server::addSection(QUuid sessionID, Section& section, qint32* new
 {
     ServerResponse response;
     response.sessionID = sessionID;
+    QSqlQuery query;
 
     // TODO: ensure that getParentChapterId() belongs to getParentTextbookId().
 
-    QSqlQuery query;
-    QString queryString = "insert into Section (chapter_id, name, available) values (";
-    queryString += section.getParentChapter()->getId();
-    queryString += ", ";
-    queryString += section.getName();
-    queryString += ", ";
-    queryString += section.getAvailability();
+
+    QString queryString = "insert into SellableItem (name, price_cents, available) values (";
+    queryString += "\"" + section.getName() + "\", ";
+    queryString += QString::number(section.getPriceCents()) + ", ";
+    queryString += QString::number((int) section.getAvailability());
     queryString += ");";
 
     bool result = dbManager->runQuery(queryString, &query);
 
     if (result) {
         response.code = Success;
-        response.message = "";
-    }
-    else {
+    } else {
         response.code = Fail;
-        response.message = query.lastError().text();
+        qDebug() << "Error while adding section: " << query.lastError().text();
         return response;
     }
 
+    // if that doesn't work, use query "select seq from sqlite_sequence where name="table_name""
+    qint32 lastInsertId = query.lastInsertId().toInt();
+    *newId = lastInsertId;
+
+    queryString = "insert into Section (item_id, chapter_id, section_num) values (";
+    queryString += QString::number(lastInsertId) + ", ";
+    queryString += QString::number(section.getParentChapterId()) + ", ";
+    queryString += QString::number(section.getSectionNumber()) + ");";
+
+    if (!result) {
+        qDebug() << "Error while adding Section info: " << query.lastError().text();
+    }
+
     return response;
 }
 
@@ -352,6 +412,79 @@ ServerResponse Server::replaceSection(QUuid sessionID, qint32 id, Section& c)
     return response;
 }
 
+ServerResponse Server::registerStudentUser(QUuid sessionID, Student& usr, QString pwd, qint32* id)
+{
+    ServerResponse response;
+    response.sessionID = sessionID;
+    QSqlQuery query;
+    SecurityUtils security;
+
+    // Make password hash
+    QString hash = security.makePasswordHash(usr.getUsername(), pwd);
+
+    QString queryString = "insert into User (username, name, password, role) values (\"" +
+            usr.getUsername() + "\", \"" + usr.getName() + "\", \"" +
+            hash + "\", " + QString::number(2) + ");";
+
+    bool result = dbManager->runQuery(queryString, &query);
+
+    if (result) {
+        response.code = Success;
+    } else {
+        response.code = Fail;
+        qDebug() << "Error while adding user: " << query.lastError().text();
+        return response;
+    }
+
+    // if that doesn't work, use query "select seq from sqlite_sequence where name="table_name""
+    qint32 lastInsertId = query.lastInsertId().toInt();
+
+    queryString = "insert into Student (user_id, student_num, email) values (" +
+            QString::number(lastInsertId) + ", \""
+            + usr.getStudentNumber() + "\", \"" + usr.getEmailAddress() + "\");";
+
+    result = dbManager->runQuery(queryString, &query);
+
+    if (result) {
+        response.code = Success;
+        *id = lastInsertId;
+    } else {
+        response.code = Fail;
+        qDebug() << "Error while adding student user: " << query.lastError().text();
+        return response;
+    }
+
+    if (usr.getDeliveryInfo()) {
+        queryString = "insert into DeliveryInfo (user_id, email) values (" +
+                QString::number(lastInsertId) + ", \"" +
+                usr.getDeliveryInfo()->getEmailAddress() + "\");";
+
+        result = dbManager->runQuery(queryString, &query);
+
+        if (!result) {
+            qDebug() << "Error while adding delivery info: " << query.lastError().text();
+        }
+    }
+
+    if (usr.getCreditCardInfo()) {
+        queryString = "insert into CreditCardInfo " \
+                "(user_id, holder_name, number, expiry_date, security_code) values (" +
+                QString::number(lastInsertId) + ", \"" +
+                usr.getCreditCardInfo()->getCardholderName() + "\", \"" +
+                usr.getCreditCardInfo()->getCardNumber() + "\", \"" +
+                usr.getCreditCardInfo()->getExpiry() + "\", \"" +
+                usr.getCreditCardInfo()->getSecurityCode() + "\");";
+
+        result = dbManager->runQuery(queryString, &query);
+
+        if (!result) {
+            qDebug() << "Error while adding billing info: " << query.lastError().text();
+        }
+    }
+
+    return response;
+}
+
 ServerResponse Server::getRequiredTextbooks(QUuid sessionID,const QString& username, QVector<int>* textbookIDs)
 {
     ServerResponse response;
diff --git a/cuTPS-server/Server.h b/cuTPS-server/Server.h
index e29b5ed..984c4bf 100755
--- a/cuTPS-server/Server.h
+++ b/cuTPS-server/Server.h
@@ -23,6 +23,7 @@
 #include "Entity/Order.h"
 #include "Entity/Chapter.h"
 #include "Entity/Section.h"
+#include "Entity/Student.h"
 
 using namespace TPSDef;
 
@@ -64,6 +65,8 @@ public:
     ServerResponse replaceChapter(QUuid, qint32 id, Chapter&);
     ServerResponse replaceSection(QUuid, qint32 id, Section&);
 
+    ServerResponse registerStudentUser(QUuid, Student& usr, QString pwd, qint32* id);
+
     // Student request API.
 
     // Get the list of required textbooks for a user
diff --git a/cuTPS-server/ServerPrefs.cpp b/cuTPS-server/ServerPrefs.cpp
index 9170a28..499ce06 100644
--- a/cuTPS-server/ServerPrefs.cpp
+++ b/cuTPS-server/ServerPrefs.cpp
@@ -13,7 +13,7 @@ ServerPrefs::ServerPrefs()
 const QString ServerPrefs::GetDbPath()
 {
     QSettings settings(PREF_CONF_FILE, QSettings::IniFormat);
-    const QString dbPath = settings.value(PREF_DB_PATH_SEC, QDir::currentPath() + QString("/db/cutpsd.db")).toString();
+    const QString dbPath = settings.value(PREF_DB_PATH_SEC, QDir::currentPath() + QString("/db/cutps.db")).toString();
     settings.setValue(PREF_DB_PATH_SEC, dbPath);
     return dbPath;
 }
diff --git a/cuTPS-server/cuTPS-server.pro b/cuTPS-server/cuTPS-server.pro
index b2f0883..65f73ff 100644
--- a/cuTPS-server/cuTPS-server.pro
+++ b/cuTPS-server/cuTPS-server.pro
@@ -39,7 +39,8 @@ SOURCES += main.cpp \
     ClientTaskHandling/AddUserTask.cpp \
     ClientTaskHandling/RmItemTask.cpp \
     ClientTaskHandling/BanUserTask.cpp \
-    ClientTaskHandling/GetAllCoursesTask.cpp
+    ClientTaskHandling/GetAllCoursesTask.cpp \
+    SecurityUtils.cpp
 
 HEADERS += \
     DatabaseManager.h \
@@ -66,7 +67,9 @@ HEADERS += \
     ClientTaskHandling/AddUserTask.h \
     ClientTaskHandling/RmItemTask.h \
     ClientTaskHandling/BanUserTask.h \
-    ClientTaskHandling/GetAllCoursesTask.h
+    ClientTaskHandling/GetAllCoursesTask.h \
+    SecurityUtils.h \
+    Secrets.h
 
 
 OTHER_FILES += \
diff --git a/cuTPS-server/db/cutps.db b/cuTPS-server/db/cutps.db
new file mode 100644
index 0000000000000000000000000000000000000000..96f307dbb00d84851ee0ff84efcb788f87d8a5fc
GIT binary patch
literal 73728
zcmeI*&2QUA8V6twNlBp-n@NLI2n=tz2?E=Q)98z`)ZGGc9j8c|z-b*L?V(Ud<j7$w
zkuFIkF*X-D#{xO^ytn-edg*Pk=&9$uE*99!qG++`0xeqf<IowBa!6H9>=sEI<44FO
z#m{%1d1oX_w7vHFRVQRd$MbtMG^)~3i4f_6VMvm6ivK*ve}=;ppHYWT_>`pPcbh#W
zo%?TYQvXpprYe&Dg8t8`cP9Tn`Nt!-4qur#arn4)weYnzS$HY`VeWzY0pA1z1R(Hq
z1qQieh2qJRWWYk&?y@)7rss$8__^gbR+et87&n$)xw>M+%jPBwJ~+1FxFOqMzOm^$
zJ?d{6@3Aez^+Ln#ce@MGMlS6!BV>2^vdr?p@}12vyJlj3TRK`OPEV8jH={V#m=!vn
zn@o;nB1sk|p@gj0+EYB%ExH*pKiPORsQ7#>x8D;*8(GUcNak#~qL6bB4>NE0tiycf
zS}ZV@<D<_x_IzCY^gg_k6+vcpSYzF;5WmdViM=?1qQ?YpM+C_clgZHx!SHNxZS0vq
z)JEI$-WzXVB|wiiNF66rrW?uee~rT6^i-iZGefpdMhe424ySs?VYqa^x!?qCH_E_Y
zT33U`$wKkW8M0kY()D3wrYm+T6K#4;6!Bj2c9&+v+nvQ)7IVX3r!8jM8NE%ND8VxM
z%(LwI!-eA6v*f-NXPMXc1J)WsE@z(}$;3ahGDf%JJ>sH_w43me`IhQB=8T=gEJXD(
z%+fK9X=lq!>cz2*PrOtZnSF+Zj+@`hNAktj&l1UTZFV<!zsnnKi}ph=dftkUzvI*@
zk1UuRT$+eF((R3uYrN6nF^WmX?xiEOJewK3ar$%R()@_<F4@5i{a!1GJGErr(OsiW
zwixwC5@hg~Lxtk$)8zikQ9;%N-e<<;NX=@QBBfTu<?4%_#-@aoNtcn*WHKT-#=^tY
zFves<vQ?&DML6R#Vdw0b?c>tLSzv1U;^ou3Wq~;IFcr$FCllM#g+g(Dp4@*wu6>``
zPPj~c`?A~dmNU-|W$3c&ex~=B*VtQL*X9xJmIb^gZ}ZpaICq+(3Bc}dI{sG6ru-5>
zG?9_Y;Mvpnop7ra<=>bM(ywrjs)mXAK|LS$mggg#i>&M1X8xA2NzWHDGU+w@bzwc;
z`Nid~nC57~_YwGXu27tvC4+tx_>$doTqg*98hU=_Nj?*LX4QUU-$!(RP@|+9+=-LU
z<L}Ab@EUa~e`mIwd6vt>mtFS+1N^fRy`$M)jRIT?`!)|SnW&kNl7;(?C5R8X%lo#G
zH2C?8{bSO$ObW#lC&>0n6uxNh;z!N|E|wT^*hz<%>cvKylsMh4ZFQHo%bPR^?s&dE
zu8I0ymyPt^vvR)prxTCtzoL#yTy3k9Vl?$1N&i^i)Mxn&1_(d^0uX=z1Rwwb2tWV=
z5P-n5C~#5Dlj&)PsCT?A&+qdK>1bk^?T%%!3hmU}%_^;Qnr5kK)|#D;)n=tqxo$DD
z-l^5@UAexx_@?}-k|#4SI7E5ZV?oaeZ(Z@2u_k6JwK{D!s*BBPrP3~!>ZV=plxmCA
zY?qs?(xK&M!>sV7_m-+_Z`I{Xa-JMJ>u9poOFn`zl22=>ZC0pRw=LVU%GFwf)=PH1
z+H5z?3ahm%71pWL7tM}!ud&{E_2wm#*NU^wAu2wP%6!;VU#vIUlv?FRt!g%DmD0A^
zthO!2tVV~`8jVWFYP9S2y-U|Cue>?I>r~Z0m-HX?Z}k8384M7B00bZa0SG_<0uX=z
z1Rwwb2t30AIfW2a6=OvaV_8-dO%vb$%lbbg{a<{90Rj+!00bZa0SG_<0uX=z1Rwx`
z->1MyRh889d1YoMxwGNIhWO2w7cH-MO5v-Pa^HTkG`wr!f)%f$ewT%w`=Uj~^*`ai
zpU)o{AOHafKmY;|fB*y_009U<00Iy=fC92COSt|&fE9}(K>z{}fB*y_009U<00Izz
z00dG3GKsJM`5*nq009U<00Izz00bZa0SG_<0uX?}0TvM7|Ks}q09P=I1_1~_00Izz
z00bZa0SG_<0ubN=;`(3F|0n6+>tFK;1_(d^0uX=z1Rwwb2tWV=5P$##o^^qoBK`+}
ztjY?}RF&|tBL4rMqJJT-|G(lB3=n_-1Rwwb2tWV=5P$##AOHafJlg^Vm58f<C9e{V
zPjh^tDdPKoS^t})f67M~AOHafKmY;|fB*y_009U<00I#B?F3HAd1>anE-$ZMyIw7o
zN~@d9r=jC+7;9TW$a=w2;om0V+pO<wQ(JAn%dGI+s_!s2WVW&9b;3K;XU2-V;kb<X
ze0RQ^xc(>l4-$W1fB*y_009U<00Izz00bZa0SG|g;0Y*1(KK=YKd%1|Uge@h5P$##
zAOHafKmY;|fB*y_0D(k6RW(hE|Nh?tN&iUytNs8s5P$##AOHafKmY;|fB*y_009U*
zd4VY<Cr!)RP1d!%9wToZmvhn?S-b3pzGwHX(D7X5v)A~Y{)6MPwwF8nUozGM@p}U6
z*RC!Y*J&6s-whTF>e|K?dYhIm#`ph!Dd}H6`O@JG5P$##AOHafKmY;|fB*y_009U*
z6#<<n(wTCldah>H&n-5ZrTF^)d;a(TpUU}h5(q#50uX=z1Rwwb2tWV=5P$##o~i)<
zKY&tv|3A^cllTJz1Rwwb2tWV=5P$##AOHafKmY;<O(3VJ647Mw{l9edpcM|~fdB*`
W009U<00Izz00bZa0SG`KE$|Zu_0|pm

literal 0
HcmV?d00001

diff --git a/cuTPS-server/db/cutpsd.db b/cuTPS-server/db/cutpsd.db
deleted file mode 100644
index c058bbd0b8dfe1e66729982d141d5ffea02d5c1c..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 22528
zcmeI4+iuiG7=Y)nyAB(&A*IQRrlCVql&o?fAp}ZWRJKc0f&u{oH?69bV^0!;*WTLR
zK-8<<^cwXI+S}f6(O0N?OJAT;B_4pPQcn~vIy3f$oz217LeLUsl(on6kH`Of<C(Gl
zf1HJDb5=mflIxZ9fJ}h|fDoJ~1OPD3etqm$4;dDL^@FB(L$VYd2V)P9C0P>2zjHw^
zeuDoBqf$O~pa>`eFNwe*-jma5wmFdMVq1*A1^6NUiS1NS1QdbxA@Ckf!hv^&@GY16
zB`a9D<WjQ0Bf71ZXj%9DJFaK;qa^GZ=|x7V;5q?y0&-b*^kwSt3~$3E%ntQJ-7Hy7
zo^LEa@bthHQa%b`{0QKG@gHobf+C;@>{|j!3?asRixA&J$mf5Ee*x@I1w}v+*hd83
z#R-teC;$F2Uw?c!Z<KV)9yfH)rh)6QNZ9|M0{nCzRa{j?5l{qT2_S@k>i@BrR0c(0
zUlKqt?ElQ@uYw|=2)u>_`24T>|7+Ors>+H0Bf$HA3akUL4hft^9q4=f=}QJveG6*Y
z-d<SC2Ku5+Z~D~ZKUBCrlfN-TZsb3in;|@f45tYTmPst;;wXDoN%z*sZMsGrHy}>M
zwns&V3d`#-_Xr8-U6wA%wo9+OQsi^exgnIwe%K3v<(TxY|E0|qOBD4=;ELlS*Qz+l
zx48Nd*0TNmur@Dhu@F>D=7@=Q38^koVptolY%#17WgeRys^y187M)5-0FWz2xn+kK
zE4nv)a(X%!l3>d^sI}~HM#IsCa>S!c)T53;eL;2DGIQx%^=LxN=5nxlN2nk9ks>#e
ze3X<bBg<N?Qws|AC$;R*5Uf^&f|4UkI!H<CNuoW}?sQ7a9zPCiCxmtvsBNuMZ*A6D
zavS5Cq+6q;Rn?lByXh|9JyzcT6R;D&PL#(V<JFhk_uJ`mwJA+>fv=B+UBIKJ6%=&O
z<gHkcjyj}vlx3~9WUyA=a->>uZIcZR+YMN36j)@#h3N2;XLC(A0KHqbytSgKv$b7Y
zjDkKjDxMXr6%E(iGQ;j~pz2p0T6S;{uAdXs#E4jME1oX~@?se6lz27d*#xVp9)>6>
z8XrlMuwe!mCeiRVN}iq4;vl$r$lNGO8Z^Tyg~R6bfmC*OaL4H(%pT4X5srgZEv;pb
z9D!9UywyZ4!;D=Ls_0q`^Ips(AsRHiDJGh4ip{rDIv3ji9s~Tiow}mZMG;U0_LM*p
z^0fevum6GgAHe=pPy`f#*MxwUV2gj)2*Bt69{2#@2lzg|haG$ckK+t_gdU*#=pJ&=
z6*P`A@Da<RLfaEK+LHk9oG8p+zDlMhCQjweRh_-(o8*F}FME2)KYA!e-W?;)#K^m1
z<OgHqoiXxsjQl{1ydy@g#mG}J@??xW5hG_Sc6Mw(w6lByCcwZ=-u}G#=NE5LBN&_a
zEM|#fcfo?Y6x`80N@kp8%c0b>oMrX=-}aqaDX0j%cmm@2AFAj77f)7|s0g$@0rC7F
zt^ZHJivV6kI{FTO*7l0Gse-k>PAxk!0@sZOi*E4-b3iV-?(N71TtCcgVdLG%8=Axo
z$?z?^`nW-#ms&TA%TmcIzERAma0ArO+QKrvk#iec_h##OgBsE~^;(7&@^c4M*=r-)
zS;(8f6epV!x~pfpLdV*q;JQF<n>&eT16pc~_eew=B?9Me{HvR-<D$w8r$LJbdxG}4
z*HxI`CE)rhbG&k$B&RI%s19bd?7#r59TA$>snqvxNE+8u!^US$=F;wb!j`}2h?d>l
zJW(N1(@0>1-&gqm@EpKD;BVO5|6H4PFQt|u(DnpKA_>kRIO_zSYgUZFa#`PWNkO-b
zie2$f^g)7SbD+2!b1(&}hY{S(+x-V@g$H}dCpRz8jgqT+5U_<Y{wUEMlU!os*2D#2
z|HJrafPcfkvYiTwfFkhf638Sm7@RygHFj$H^w^onlbM8k+zl}}z9E1A>;#|x)%xF8
zx51U>ioo*_Q2qaT=&5rRfmfRV@BbK<0Q?g@VLKJ}l0Y@t6E6Ft!X$K^mR&Chw|$a1
zC`^ltLE>|Vm}Q^a7_W$Lcvd-(mjI`8HQX(}RapNbG*+(YW%g!R2zQ4iO`^nB?NY&x
zCQ7zGm0xh1FBuxw9ygRD8L~F)Wz2~6e@$OCbSR|od1P7?Z|n=qWzJsQ-;^jsiLFwo
y*E9NJMKT)_wg#JDNI+P!UH0EMWqBipX9Y<V>W%Xp5Y+s?mmOY}tq8O?f&T!EizKE1

-- 
1.7.9.5


From 38f638d7e6d4449dd29b24320b77574b65a6f465 Mon Sep 17 00:00:00 2001
From: Kirill Kravinsky <woyorus@gmail.com>
Date: Mon, 8 Dec 2014 07:11:01 -0500
Subject: [PATCH 13/16] Course serialization & query fixes

---
 cuTPS-common/Entity/Course.cpp |    8 ++++++--
 cuTPS-server/Server.cpp        |    9 +++++----
 2 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/cuTPS-common/Entity/Course.cpp b/cuTPS-common/Entity/Course.cpp
index bd71ccf..013cf3a 100644
--- a/cuTPS-common/Entity/Course.cpp
+++ b/cuTPS-common/Entity/Course.cpp
@@ -87,7 +87,9 @@ QDataStream& operator<<(QDataStream& os, const Course& c)
     // Write course data
     os << c.id
        << c.name
-       << c.code;
+       << c.code
+       << c.termSection
+       << c.termYear;
 
     // Then required textbooks count..
     os << static_cast<quint16>(c.reqBooksIds.size());
@@ -107,7 +109,9 @@ QDataStream& operator>>(QDataStream& is, Course& c)
 
     is >> c.id
        >> c.name
-       >> c.code;
+       >> c.code
+       >> c.termSection
+       >> c.termYear;
 
     quint16 textCount;
     c.reqBooksIds.clear();
diff --git a/cuTPS-server/Server.cpp b/cuTPS-server/Server.cpp
index 96f0441..ec27d6a 100755
--- a/cuTPS-server/Server.cpp
+++ b/cuTPS-server/Server.cpp
@@ -175,10 +175,11 @@ ServerResponse Server::addCourse(QUuid sessionID, Course& course, qint32* newId)
 
     QSqlQuery query;
 
-    QString queryString = "insert into Course (code, name) values (\"" +
-                           course.getCourseCode() + "\", \"" +
-                           course.getCourseName() + "\")" +
-                           ";";
+    QString queryString = "insert into Course (code, name, term_section, term_year) values (\"" +
+            course.getCourseCode() + "\", \"" +
+            course.getCourseName() + "\", \"" +
+            course.getTermSection().at(0) + "\", " +
+            course.getTermYear() + ");";
 
     qDebug() << "About to insert Course, query'"
              << queryString << "'";
-- 
1.7.9.5


From 4babb1398683a69867b965022be2c1ed62efcb2c Mon Sep 17 00:00:00 2001
From: zachuserid <z.renaud5@gmail.com>
Date: Mon, 8 Dec 2014 15:34:32 -0500
Subject: [PATCH 14/16] Finishing CM UI, using all client requests except
 delete course

---
 cuTPS-client/AddTextbookWindow.cpp       |    8 +-
 cuTPS-client/AddTextbookWindow.h         |    2 +-
 cuTPS-client/AddTextbookWindow.ui        |   74 +++++++++++++++----
 cuTPS-client/ContentRequestAPI.cpp       |   35 ++++++++-
 cuTPS-client/ContentRequestAPI.h         |   14 +++-
 cuTPS-client/CourseDetailsWindow.cpp     |  118 ++++++++++++++++++++++--------
 cuTPS-client/CourseDetailsWindow.h       |   12 ++-
 cuTPS-client/CourseRequestAPI.cpp        |   26 ++++---
 cuTPS-client/CourseRequestAPI.h          |    8 ++
 cuTPS-client/DeleteCourseControl.h       |    2 +-
 cuTPS-client/DeleteItemControl.cpp       |   12 ++-
 cuTPS-client/DeleteItemControl.h         |    2 +-
 cuTPS-client/Login.h                     |    7 ++
 cuTPS-client/LoginControl.h              |    8 +-
 cuTPS-client/ManageContentControl.cpp    |   17 +++--
 cuTPS-client/ManageContentControl.h      |    4 +-
 cuTPS-client/ManageContentListWindow.cpp |   36 ++++++---
 cuTPS-client/ManageContentListWindow.h   |    2 +-
 cuTPS-client/ManageCourseControl.cpp     |   26 +++++--
 cuTPS-client/ModifyCourseControl.h       |    9 +++
 cuTPS-client/ModifyItemControl.cpp       |   11 +--
 cuTPS-client/ModifyItemControl.h         |    4 +
 22 files changed, 332 insertions(+), 105 deletions(-)

diff --git a/cuTPS-client/AddTextbookWindow.cpp b/cuTPS-client/AddTextbookWindow.cpp
index e739489..e8f65b2 100644
--- a/cuTPS-client/AddTextbookWindow.cpp
+++ b/cuTPS-client/AddTextbookWindow.cpp
@@ -37,7 +37,11 @@ void AddTextbookWindow::on_addButton_clicked()
 
     QString isbn = this->ui->isbnEdit->text();
 
-    emit addTextbook(name, bookId, priceCents, available, isbn);
+    QString edition = this->ui->editionEdit->text();
+
+    QString authors = this->ui->authorEdit->text();
+
+    emit addTextbook(name, edition, authors, bookId, priceCents, available, isbn);
 
     this->close();
 }
@@ -45,6 +49,8 @@ void AddTextbookWindow::on_addButton_clicked()
 void AddTextbookWindow::populateValues(Textbook *book)
 {
     this->ui->nameEdit->setText(book->getName());
+    this->ui->editionEdit->setText(book->getEdition());
+    this->ui->authorEdit->setText(book->getAuthors());
     this->ui->isbnEdit->setText(book->getISBN());
     this->ui->priceEdit->setText(QString::number(
                                      book->getPriceCents() / 100));
diff --git a/cuTPS-client/AddTextbookWindow.h b/cuTPS-client/AddTextbookWindow.h
index 1f5dd90..1da68a1 100644
--- a/cuTPS-client/AddTextbookWindow.h
+++ b/cuTPS-client/AddTextbookWindow.h
@@ -24,7 +24,7 @@ public:
     void populateValues(Textbook *);
 
 signals:
-    void addTextbook(QString, int, int, bool, QString);
+    void addTextbook(QString, QString, QString, int, int, bool, QString);
 
 private slots:
     void on_cancelButton_clicked();
diff --git a/cuTPS-client/AddTextbookWindow.ui b/cuTPS-client/AddTextbookWindow.ui
index 3e1a341..5f19d27 100644
--- a/cuTPS-client/AddTextbookWindow.ui
+++ b/cuTPS-client/AddTextbookWindow.ui
@@ -6,8 +6,8 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>241</width>
-    <height>233</height>
+    <width>245</width>
+    <height>309</height>
    </rect>
   </property>
   <property name="windowTitle">
@@ -30,8 +30,8 @@
    <property name="geometry">
     <rect>
      <x>20</x>
-     <y>60</y>
-     <width>71</width>
+     <y>140</y>
+     <width>41</width>
      <height>16</height>
     </rect>
    </property>
@@ -43,7 +43,7 @@
    <property name="geometry">
     <rect>
      <x>20</x>
-     <y>100</y>
+     <y>180</y>
      <width>41</width>
      <height>16</height>
     </rect>
@@ -55,7 +55,7 @@
   <widget class="QLineEdit" name="nameEdit">
    <property name="geometry">
     <rect>
-     <x>100</x>
+     <x>90</x>
      <y>20</y>
      <width>113</width>
      <height>26</height>
@@ -65,8 +65,8 @@
   <widget class="QLineEdit" name="priceEdit">
    <property name="geometry">
     <rect>
-     <x>100</x>
-     <y>60</y>
+     <x>90</x>
+     <y>140</y>
      <width>113</width>
      <height>26</height>
     </rect>
@@ -75,8 +75,8 @@
   <widget class="QLineEdit" name="isbnEdit">
    <property name="geometry">
     <rect>
-     <x>100</x>
-     <y>100</y>
+     <x>90</x>
+     <y>180</y>
      <width>113</width>
      <height>26</height>
     </rect>
@@ -86,7 +86,7 @@
    <property name="geometry">
     <rect>
      <x>20</x>
-     <y>140</y>
+     <y>220</y>
      <width>89</width>
      <height>21</height>
     </rect>
@@ -98,8 +98,8 @@
   <widget class="QPushButton" name="addButton">
    <property name="geometry">
     <rect>
-     <x>140</x>
-     <y>180</y>
+     <x>130</x>
+     <y>260</y>
      <width>88</width>
      <height>27</height>
     </rect>
@@ -112,7 +112,7 @@
    <property name="geometry">
     <rect>
      <x>20</x>
-     <y>180</y>
+     <y>260</y>
      <width>88</width>
      <height>27</height>
     </rect>
@@ -121,6 +121,52 @@
     <string>Cancel</string>
    </property>
   </widget>
+  <widget class="QLineEdit" name="editionEdit">
+   <property name="geometry">
+    <rect>
+     <x>90</x>
+     <y>60</y>
+     <width>111</width>
+     <height>26</height>
+    </rect>
+   </property>
+  </widget>
+  <widget class="QLabel" name="editionLbl">
+   <property name="geometry">
+    <rect>
+     <x>20</x>
+     <y>60</y>
+     <width>51</width>
+     <height>20</height>
+    </rect>
+   </property>
+   <property name="text">
+    <string>Edition</string>
+   </property>
+  </widget>
+  <widget class="QLineEdit" name="authorEdit">
+   <property name="geometry">
+    <rect>
+     <x>90</x>
+     <y>100</y>
+     <width>113</width>
+     <height>26</height>
+    </rect>
+   </property>
+  </widget>
+  <widget class="QLabel" name="authorLbl">
+   <property name="geometry">
+    <rect>
+     <x>20</x>
+     <y>100</y>
+     <width>51</width>
+     <height>16</height>
+    </rect>
+   </property>
+   <property name="text">
+    <string>Author</string>
+   </property>
+  </widget>
  </widget>
  <resources/>
  <connections/>
diff --git a/cuTPS-client/ContentRequestAPI.cpp b/cuTPS-client/ContentRequestAPI.cpp
index 4a5022e..e538102 100644
--- a/cuTPS-client/ContentRequestAPI.cpp
+++ b/cuTPS-client/ContentRequestAPI.cpp
@@ -1,5 +1,7 @@
 #include "ContentRequestAPI.h"
 
+#include <QDebug>
+
 ContentRequestAPI::ContentRequestAPI(QObject *parent, ClientNetworkHandler *net) :
     QObject(parent)
 {
@@ -21,14 +23,39 @@ QUuid ContentRequestAPI::addSection(int bookId, int chapId, Section& section)
     return this->networking->addSection(bookId, chapId, section);
 }
 
-QUuid ContentRequestAPI::deleteItem(int itemId)
+QUuid ContentRequestAPI::modifyBook(Textbook &book)
 {
-    // TODO: return the result of the actual networking request
+    qDebug() << "networking: " << networking;
+    return this->networking->addBook(book);
+}
+
+QUuid ContentRequestAPI::modifyChapter(int textId, Chapter &chapter)
+{
+    return this->networking->addChapter(textId, chapter);
+}
 
-    QUuid id;
-    return id;
+QUuid ContentRequestAPI::modifySection(int textId, int chapId, Section &section)
+{
+    return this->networking->addSection(textId, chapId, section);
+}
+
+QUuid ContentRequestAPI::deleteTextbook(int itemId)
+{
+    return this->networking->removeBook(itemId);
 }
 
+QUuid ContentRequestAPI::deleteChapter(int itemId)
+{
+    return this->networking->removeChapter(itemId);
+}
+
+
+QUuid ContentRequestAPI::deleteSection(int itemId)
+{
+    return this->networking->removeSection(itemId);
+}
+
+
 QUuid ContentRequestAPI::getAllBooks()
 {
     return this->networking->getAllBooks();
diff --git a/cuTPS-client/ContentRequestAPI.h b/cuTPS-client/ContentRequestAPI.h
index 88b8ab3..2fba3f5 100644
--- a/cuTPS-client/ContentRequestAPI.h
+++ b/cuTPS-client/ContentRequestAPI.h
@@ -1,3 +1,10 @@
+// Class: ContentRequestAPI
+// Description:
+//   Used to interface all of the ContentManagement subsyste
+//   requests to the ClientNetwokring subsystem, reducing coupling.
+// Traceability:
+//   The ContentRequestAPI class in the ContentManagement subsystem
+
 #ifndef CONTENTREQUESTAPI_H
 #define CONTENTREQUESTAPI_H
 
@@ -14,7 +21,12 @@ class ContentRequestAPI : public QObject
         QUuid addBook(Textbook&);
         QUuid addChapter(int, Chapter&);
         QUuid addSection(int, int, Section&);
-        QUuid deleteItem(int);
+        QUuid modifyBook(Textbook&);
+        QUuid modifyChapter(int, Chapter&);
+        QUuid modifySection(int, int, Section&);
+        QUuid deleteTextbook(int);
+        QUuid deleteChapter(int);
+        QUuid deleteSection(int);
         QUuid getAllBooks();
 
     signals:
diff --git a/cuTPS-client/CourseDetailsWindow.cpp b/cuTPS-client/CourseDetailsWindow.cpp
index b6999e0..2dac4de 100644
--- a/cuTPS-client/CourseDetailsWindow.cpp
+++ b/cuTPS-client/CourseDetailsWindow.cpp
@@ -13,8 +13,10 @@ CourseDetailsWindow::CourseDetailsWindow(QWidget *parent,
     ui->setupUi(this);
 
     this->courses = NULL;
+    this->addCourseWin = NULL;
+    this->addReqBooksWin = NULL;
 
-    this->displayCourseList();
+    this->refreshCourseList();
 }
 
 CourseDetailsWindow::~CourseDetailsWindow()
@@ -31,34 +33,81 @@ CourseDetailsWindow::~CourseDetailsWindow()
         delete this->addReqBooksWin;
 }
 
-void CourseDetailsWindow::displayCourseList()
+void CourseDetailsWindow::refreshCourseList()
 {
-    if (this->courses != NULL) {
-        delete this->courses;
-        this->courses = NULL;
-    }
+    // TODO: we should store the most recent requestId to ensure
+    // that we are always receiving the most up to date data
+    this->requestAPI->getAllCourses();
 
-    this->courses = new QVector<Course*>();
-
-    /// TODO: This stuff will come from a request to the server for courses ///
+    /*
+    /////////// TODO: uncomment above call, remove this stuff////////
     QVector<int> books;
     books.append(1);
     books.append(2);
     books.append(3);
     Course *c = new Course("Comp 3004", "Advanced Diagrams");
+    c->setId(4); // simulating actual course from DB, will have id
     Course *c2 = new Course("Comp 3005", "Database stuff");
+    c2->setId(7);
     c->addRequiredTextIds(books);
     c2->addRequiredTextIds(books);
+
+    QList<Course*> *courseL = new QList<Course*>();
+    courseL->append(c);
+    courseL->append(c2);
     //////////////////////////////////////////////////////////////////////
 
-    this->courses->append(c);
-    this->courses->append(c2);
+    QUuid uid;
+    this->courseListReceived(uid, 0, courseL);
+    */
+}
+
+void CourseDetailsWindow::textbookListReceived(QUuid requestId, int code,
+                          QList<Textbook*> *bookList)
+{
+    if (bookList == NULL) return;
+
+    qDebug() << "CourseDetailsWindow::textbookListReceived(" << requestId
+             << ", " << code << ", size=" <<bookList->size() << ")";
+
+    this->ui->bookList->clear();
+
+    for (Textbook *book: *bookList) {
+        this->ui->bookList->addItem(book->getTitle());
+    }
+
+    this->ui->deleteBookButton->setEnabled(false);
+
+    for (Textbook *book: *bookList) {
+        delete book;
+    }
+
+    delete bookList;
+}
+
+void CourseDetailsWindow::courseListReceived(QUuid requestId, int code,
+                        QList<Course*> *courseList)
+{
+    if (this->courses != NULL) {
+        delete this->courses;
+        this->courses = NULL;
+    }
+
+    qDebug() << "CourseDetailsWindow::courseListReceived(" << requestId
+             << ", " << code << ", size=" << courseList->size() << ")";
+    this->courses = courseList;
+
+    this->displayCourseList();
+}
+
+void CourseDetailsWindow::displayCourseList()
+{
 
     this->ui->bookList->clear();
     this->ui->courseList->clear();
     this->ui->deleteBookButton->setEnabled(false);
 
-    for (Course *course: *this->courses) {
+    for (Course *course: *(this->courses)) {
         this->ui->courseList->addItem(course->getCourseCode() + "-"
                                     + course->getCourseName());
     }
@@ -66,7 +115,7 @@ void CourseDetailsWindow::displayCourseList()
 
 void CourseDetailsWindow::displayCourseDetails(Course *c)
 {
-    this->ui->deleteBookButton->setEnabled(false);
+    // Enable course related UI elements
     this->ui->courseCodeEdit->setEnabled(true);
     this->ui->courseNameEdit->setEnabled(true);
     this->ui->saveCourseButton->setEnabled(true);
@@ -76,11 +125,21 @@ void CourseDetailsWindow::displayCourseDetails(Course *c)
     this->ui->courseCodeEdit->setText(c->getCourseCode());
     this->ui->courseNameEdit->setText(c->getCourseName());
 
-    this->ui->bookList->clear();
-    // TODO: this should display the required book titles, not IDs
-    for (int id: (c->getRequiredTextIds())) {
-        this->ui->bookList->addItem("textbook ID: " + QString::number(id));
-    }
+    // TODO: we should store the most recent requestID to ensure
+    // that we are using up to date response data
+    this->requestAPI->getBookDetails(c->getRequiredTextIds()); // TODO: use this instead of next block
+
+    /*
+    ///////////// TODO: remove this when requests are tested /////////////////
+    Textbook *t1 = new Textbook(5, "book 1 name", "1st edition", "jimmy", 34534, true, "12345667");
+    Textbook *t2 = new Textbook(8, "second book name", "84sth edition", "william", 363646346346, true, "12345668");
+    QList<Textbook*> *bList = new QList<Textbook*>();
+    bList->append(t1); bList->append(t2);
+
+    QUuid reqId;
+    this->textbookListReceived(reqId, 0, bList);
+    //////////////////////////////////////////////////////////////////////////
+    */
 }
 
 void CourseDetailsWindow::on_backButton_clicked()
@@ -109,9 +168,7 @@ void CourseDetailsWindow::on_saveCourseButton_clicked()
 {
     QString code = this->ui->courseCodeEdit->text();
     QString name = this->ui->courseNameEdit->text();
-
-    int index = this->ui->courseList->currentIndex().row();
-    int courseId = this->courses->at(index)->getId();
+    int courseId = this->getSelectedCourse()->getId();
 
     emit modifyCourse(courseId, code, name);
 }
@@ -123,20 +180,17 @@ void CourseDetailsWindow::on_bookList_clicked(const QModelIndex &index)
 
 void CourseDetailsWindow::on_deleteCourseButton_clicked()
 {
-    int index = this->ui->courseList->currentIndex().row();
-    int courseId = this->courses->at(index)->getId();
+    int courseId = this->getSelectedCourse()->getId();
 
     emit deleteCourse(courseId);
 }
 
 void CourseDetailsWindow::on_deleteBookButton_clicked()
 {
-    int courseIndex = this->ui->courseList->currentIndex().row();
-
-    Course *c = this->courses->at(courseIndex);
+    Course *c = this->getSelectedCourse();
+    int courseId = c->getId();
 
     const QVector<qint32>& requiredBookIds = c->getRequiredTextIds();
-    int courseId = c->getId();
 
     int bookIndex = this->ui->bookList->currentIndex().row();
 
@@ -145,8 +199,7 @@ void CourseDetailsWindow::on_deleteBookButton_clicked()
 
 void CourseDetailsWindow::on_addBookButton_clicked()
 {
-    int selectedCourseIndex = this->ui->courseList->currentIndex().row();
-    int selectedCourseId = this->courses->at(selectedCourseIndex)->getId();
+    int selectedCourseId = this->getSelectedCourse()->getId();
 
     this->addReqBooksWin = new AddRequiredBookWindow(this,
                                                      this->requestAPI,
@@ -166,5 +219,12 @@ void CourseDetailsWindow::on_courseList_currentRowChanged(int currentRow)
     // widget loses focus/selection
     if (currentRow < 0) {
         this->ui->deleteCourseButton->setEnabled(false);
+        this->ui->saveCourseButton->setEnabled(false);
     }
 }
+
+Course* CourseDetailsWindow::getSelectedCourse()
+{
+    int courseIndex = this->ui->courseList->currentIndex().row();
+    return this->courses->at(courseIndex);
+}
diff --git a/cuTPS-client/CourseDetailsWindow.h b/cuTPS-client/CourseDetailsWindow.h
index b52823f..6dc7f09 100644
--- a/cuTPS-client/CourseDetailsWindow.h
+++ b/cuTPS-client/CourseDetailsWindow.h
@@ -35,7 +35,12 @@ public:
                                  CourseRequestAPI *api = NULL);
     ~CourseDetailsWindow();
 
-    void displayCourseList();
+    void refreshCourseList();
+
+public slots:
+    // server responses with requested data
+    void textbookListReceived(QUuid requestId, int code, QList<Textbook*>*);
+    void courseListReceived(QUuid requestId, int code, QList<Course*>*);
 
 private slots:
     void on_backButton_clicked();
@@ -60,11 +65,14 @@ private:
     Ui::CourseDetailsWindow *ui;
     ManageCourseControl *manageCourseCtrl;
     CourseRequestAPI *requestAPI;
-    QVector<Course*> *courses;
     AddCourseWindow *addCourseWin;
     AddRequiredBookWindow *addReqBooksWin;
 
+    QList<Course*> *courses;
+
     void displayCourseDetails(Course *);
+    Course *getSelectedCourse();
+    void displayCourseList();
 };
 
 #endif // COURSEDETAILSWINDOW_H
diff --git a/cuTPS-client/CourseRequestAPI.cpp b/cuTPS-client/CourseRequestAPI.cpp
index 6fff7f8..39088fd 100644
--- a/cuTPS-client/CourseRequestAPI.cpp
+++ b/cuTPS-client/CourseRequestAPI.cpp
@@ -10,29 +10,35 @@ CourseRequestAPI::CourseRequestAPI(QObject *parent,
 }
 
 
+QUuid CourseRequestAPI::getAllCourses()
+{
+    return this->networking->getAllCourses();
+}
+
+QUuid CourseRequestAPI::getBookDetails(const QVector<qint32> &bookIds) const
+{
+    return this->networking->getBookDetails(bookIds);
+}
+
 QUuid CourseRequestAPI::addCourse(Course &c)
 {
-    qDebug() << "TODO: handle add Course from ClientNetworkHandler";
-    QUuid id;
-    return id;
+    return this->networking->addCourse(c);
 }
 
 QUuid CourseRequestAPI::modifyCourse(Course &c)
 {
-    QUuid id;
-    return id;
-
-    // TODO: invoke networking method
+    // This add should result in an update since the id is set
+    return this->networking->addCourse(c);
 }
 
 QUuid CourseRequestAPI::linkText(int courseId, int textId)
 {
-    this->networking->linkTextbook(courseId, textId);
+    return this->networking->linkTextbook(courseId, textId);
 }
 
 QUuid CourseRequestAPI::unlinkText(int courseId, int textId)
 {
-    this->networking->unlinkTextbook(courseId, textId);
+    return this->networking->unlinkTextbook(courseId, textId);
 }
 
 QUuid CourseRequestAPI::deleteCourse(int courseId)
@@ -40,5 +46,5 @@ QUuid CourseRequestAPI::deleteCourse(int courseId)
     QUuid id;
     return id;
 
-    // TODO: invoke networking method
+    // TODO: implement and invoke the networking method
 }
diff --git a/cuTPS-client/CourseRequestAPI.h b/cuTPS-client/CourseRequestAPI.h
index 0c2defb..de9633d 100644
--- a/cuTPS-client/CourseRequestAPI.h
+++ b/cuTPS-client/CourseRequestAPI.h
@@ -1,3 +1,8 @@
+// Class: CourseRequestAPI
+// Description:
+//   Used to interface all networking requests in
+//   the CourseManagement subsystem to the
+//   ClientNetwokring subsystem, reducing coupling.
 // Traceability:
 //   CourseRequestAPI class
 //   in the CourseManagement subsystem
@@ -6,6 +11,7 @@
 #define COURSEREQUESTAPI_H
 
 #include <QObject>
+#include <QVector>
 
 #include "ClientNetworkHandler.h"
 #include "Entity/Course.h"
@@ -16,6 +22,8 @@ class CourseRequestAPI : public QObject
 public:
     explicit CourseRequestAPI(QObject *parent = 0,
                               ClientNetworkHandler *net = NULL);
+    QUuid getAllCourses();
+    QUuid getBookDetails(const QVector<qint32> &) const;
     QUuid addCourse(Course&);
     QUuid modifyCourse(Course &);
     QUuid deleteCourse(int);
diff --git a/cuTPS-client/DeleteCourseControl.h b/cuTPS-client/DeleteCourseControl.h
index e8dfad7..368d048 100644
--- a/cuTPS-client/DeleteCourseControl.h
+++ b/cuTPS-client/DeleteCourseControl.h
@@ -14,10 +14,10 @@ class DeleteCourseControl : QObject
 
 public:
     DeleteCourseControl(CourseRequestAPI *);
+    void deleteCourse(QUuid &, int);
 
 private:
     CourseRequestAPI *requestAPI;
-    void deleteCourse(QUuid &, int);
 };
 
 #endif // DELETECOURSECONTROL_H
diff --git a/cuTPS-client/DeleteItemControl.cpp b/cuTPS-client/DeleteItemControl.cpp
index 7449e55..8d2ef2f 100644
--- a/cuTPS-client/DeleteItemControl.cpp
+++ b/cuTPS-client/DeleteItemControl.cpp
@@ -6,7 +6,15 @@ DeleteItemControl::DeleteItemControl(QObject *parent, ContentRequestAPI *api) :
 {
 }
 
-void DeleteItemControl::deleteItem(QUuid &uid, int itemId)
+void DeleteItemControl::deleteItem(QUuid &uid, int itemId, QString type)
 {
-    uid = requestAPI->deleteItem(itemId);
+    // This could be changed into one API request if the server
+    // implementation was updated.
+
+    if (type == "textbook")
+        uid = requestAPI->deleteTextbook(itemId);
+    else if (type == "chapter")
+        uid = requestAPI->deleteChapter(itemId);
+    else if (type == "section")
+        uid = requestAPI->deleteSection(itemId);
 }
diff --git a/cuTPS-client/DeleteItemControl.h b/cuTPS-client/DeleteItemControl.h
index 6ce6867..0d180c0 100644
--- a/cuTPS-client/DeleteItemControl.h
+++ b/cuTPS-client/DeleteItemControl.h
@@ -13,7 +13,7 @@ class DeleteItemControl : public QObject
     Q_OBJECT
 public:
     explicit DeleteItemControl(QObject *parent = 0, ContentRequestAPI *api = NULL);
-    void deleteItem(QUuid&, int);
+    void deleteItem(QUuid&, int, QString);
 
 signals:
 
diff --git a/cuTPS-client/Login.h b/cuTPS-client/Login.h
index 76b1719..a39dea8 100644
--- a/cuTPS-client/Login.h
+++ b/cuTPS-client/Login.h
@@ -1,3 +1,10 @@
+// Class: Login
+// Description:
+//   Provides a GUI dialog for the user to enter
+//   their credentials.
+// Traceability:
+//   LoginWindow in the LoginInterface subsystem
+
 #ifndef LOGIN_H
 #define LOGIN_H
 
diff --git a/cuTPS-client/LoginControl.h b/cuTPS-client/LoginControl.h
index 0adf36a..a4ad81c 100644
--- a/cuTPS-client/LoginControl.h
+++ b/cuTPS-client/LoginControl.h
@@ -1,8 +1,12 @@
 // Class: LoginControl
 // Type: Control
 // Description:
-//     This class is responsible for requesting session
-//     credentials for the client use
+//   This class is responsible for requesting
+//   validation of user credentials from the server
+//   and creating the appropriate post-login
+//   user interface, depending on the user's role.
+// Traceability:
+//   The LoginControl class in the LoginInterface subsystem.
 
 #ifndef LOGINCONTROL_H
 #define LOGINCONTROL_H
diff --git a/cuTPS-client/ManageContentControl.cpp b/cuTPS-client/ManageContentControl.cpp
index d9f713e..7ac09b5 100644
--- a/cuTPS-client/ManageContentControl.cpp
+++ b/cuTPS-client/ManageContentControl.cpp
@@ -20,13 +20,12 @@ ManageContentControl::ManageContentControl(ContentManagementInterface *backWin,
     connect(contentManagementWin, SIGNAL(navigateBack()),
             cmIF, SLOT(navigateBack()));
 
-    connect(contentManagementWin, SIGNAL(deleteItem(int)),
-            this, SLOT(deleteItem(int)));
+    connect(contentManagementWin, SIGNAL(deleteItem(int, QString)),
+            this, SLOT(deleteItem(int, QString)));
 
+    // Connect networking responses to the window managers that require the data
     connect(networking, SIGNAL(textbookListReceived(QUuid,int,QList<Textbook*>*)),
             contentManagementWin, SLOT(textbookListReceived(QUuid,int,QList<Textbook*>*)));
-
-    // TODO: connect slots for requests that the networking will signal
 }
 
 ManageContentControl::~ManageContentControl()
@@ -36,6 +35,8 @@ ManageContentControl::~ManageContentControl()
 }
 
 void ManageContentControl::addTextbook(QString name,
+                                       QString edition,
+                                       QString authors,
                                        int bookId,
                                        int priceCents,
                                        bool isAvailable,
@@ -47,7 +48,7 @@ void ManageContentControl::addTextbook(QString name,
 
     QUuid reqId;
 
-    Textbook book(bookId, name, "", "", priceCents, isAvailable, isbn);
+    Textbook book(bookId, name, edition, authors, priceCents, isAvailable, isbn);
 
     if (bookId == -1) {
         AddBookControl addBookCtrl(this->requestAPI);
@@ -117,13 +118,13 @@ void ManageContentControl::addSection(QString name,
     }
 }
 
-void ManageContentControl::deleteItem(int itemId)
+void ManageContentControl::deleteItem(int itemId, QString type)
 {
     qDebug() << "Deleting item id " << itemId;
 
-    DeleteItemControl ctrl(this->requestAPI);
+    DeleteItemControl ctrl(0, this->requestAPI);
 
     // TODO: not yet handling response
     QUuid uid;
-    ctrl.deleteItem(uid, itemId);
+    ctrl.deleteItem(uid, itemId, type);
 }
diff --git a/cuTPS-client/ManageContentControl.h b/cuTPS-client/ManageContentControl.h
index 1e7b92a..e31a556 100644
--- a/cuTPS-client/ManageContentControl.h
+++ b/cuTPS-client/ManageContentControl.h
@@ -24,10 +24,10 @@ class ManageContentControl : public QObject
         Q_OBJECT
 
     public slots:
-        void addTextbook(QString, int, int, bool, QString);
+        void addTextbook(QString, QString, QString, int, int, bool, QString);
         void addChapter(QString, int, int, bool, int);
         void addSection(QString, int, int, bool, int, int);
-        void deleteItem(int);
+        void deleteItem(int, QString);
 
     public:
         ManageContentControl(ContentManagementInterface *, ClientNetworkHandler *);
diff --git a/cuTPS-client/ManageContentListWindow.cpp b/cuTPS-client/ManageContentListWindow.cpp
index 4fa88dd..c1939c2 100644
--- a/cuTPS-client/ManageContentListWindow.cpp
+++ b/cuTPS-client/ManageContentListWindow.cpp
@@ -30,8 +30,9 @@ ManageContentListWindow::ManageContentListWindow(QWidget *parent,
     this->bookId = -1;
     this->chapterId = -1;
 
-    //this->refreshContents(); // TODO: remove below, uncomment this once tested
+    this->refreshContents();
 
+    /*
     // Request all sections (id, title) from server for chapterId
     ////////// pretend for now that this list represents actual data: /////////
     Section *s1 = new Section(9, NULL, 1, "Section One", 325, true);
@@ -55,11 +56,7 @@ ManageContentListWindow::ManageContentListWindow(QWidget *parent,
     Textbook *t4 = new Textbook(4, "The Fourth Book", "999th", "Some Pork :D", 2234556, 1, "123456681");
     books->append(t1); books->append(t2); books->append(t3); books->append(t4);
     /////////////////////////////////////////////////////////////////////////
-    /*
-    s1->setParentChapter(c1); s2->setParentChapter(c3); s3->setParentChapter(c3); s4->setParentChapter(c4);
 
-    c1->setParentTextbook(t1); c2->setParentTextbook(t2); c3->setParentTextbook(t1); c4->setParentTextbook(t3);
-    */
     c1->addSection(*s1); //c1->addSection(*s2); c1->addSection(*s3); c1->addSection(*s4);
     c2->addSection(*s2); //c2->addSection(*s2); c2->addSection(*s3); c2->addSection(*s4);
     c3->addSection(*s3); //c3->addSection(*s2); c3->addSection(*s3); c3->addSection(*s4);
@@ -72,6 +69,7 @@ ManageContentListWindow::ManageContentListWindow(QWidget *parent,
 
     QUuid uid;
     this->textbookListReceived(uid, 0, books);
+    */
 }
 
 ManageContentListWindow::~ManageContentListWindow()
@@ -298,8 +296,8 @@ void ManageContentListWindow::addTextbook()
     qDebug() << "ManageContentListWindow::addTextbook";
     this->addBookWin = new AddTextbookWindow(this, -1);
 
-    connect(this->addBookWin, SIGNAL(addTextbook(QString,int,int,bool,QString)),
-            this->contentManagementCtrl, SLOT(addTextbook(QString,int,int,bool,QString)));
+    connect(this->addBookWin, SIGNAL(addTextbook(QString,QString,QString,int,int,bool,QString)),
+            this->contentManagementCtrl, SLOT(addTextbook(QString,QString,QString,int,int,bool,QString)));
 
     this->addBookWin->setModal(true);
     this->addBookWin->show();
@@ -359,8 +357,8 @@ void ManageContentListWindow::modTextbook()
 
     this->addBookWin->populateValues(item);
 
-    connect(this->addBookWin, SIGNAL(addTextbook(QString,int,int,bool,QString)),
-            this->contentManagementCtrl, SLOT(addTextbook(QString,int,int,bool,QString)));
+    connect(this->addBookWin, SIGNAL(addTextbook(QString,QString,QString,int,int,bool,QString)),
+            this->contentManagementCtrl, SLOT(addTextbook(QString,QString,QString,int,int,bool,QString)));
 
     this->addBookWin->setModal(true);
     this->addBookWin->show();
@@ -409,13 +407,29 @@ void ManageContentListWindow::modSection()
 
 void ManageContentListWindow::on_deleteItemButton_clicked()
 {
+    // This request could be implemented in a
+    // way that's ignorant of item type.
+
     int itemId = this->getSelectedItem()->getId();
-    emit deleteItem(itemId);
+    QString type = "";
+
+    switch (this->contentDepth) {
+        case (0):
+            type = "textbook";
+            break;
+        case (1):
+            type = "chapter";
+            break;
+        case (2):
+            type = "section";
+            break;
+    }
+    emit deleteItem(itemId, type);
 }
 
 SellableItem* ManageContentListWindow::getSelectedItem(int index)
 {
-    // Note: this is pretty ugly.. As mentioned in header
+    // this is kind of ugly.. As mentioned in header
     SellableItem *item;
 
     switch (this->contentDepth) {
diff --git a/cuTPS-client/ManageContentListWindow.h b/cuTPS-client/ManageContentListWindow.h
index 5c53edc..f81c0dd 100644
--- a/cuTPS-client/ManageContentListWindow.h
+++ b/cuTPS-client/ManageContentListWindow.h
@@ -36,7 +36,7 @@ public:
 
 signals:
     void navigateBack();
-    void deleteItem(int);
+    void deleteItem(int, QString);
 
 public slots:
     // Response from networking for getAllBooks()
diff --git a/cuTPS-client/ManageCourseControl.cpp b/cuTPS-client/ManageCourseControl.cpp
index 6530fdf..015c8dd 100644
--- a/cuTPS-client/ManageCourseControl.cpp
+++ b/cuTPS-client/ManageCourseControl.cpp
@@ -2,6 +2,7 @@
 #include "ContentManagementInterface.h"
 #include "AddCourseControl.h"
 #include "ModifyCourseControl.h"
+#include "DeleteCourseControl.h"
 
 
 #include <QDebug>
@@ -32,7 +33,12 @@ ManageCourseControl::ManageCourseControl(ContentManagementInterface *cmIf,
     connect(this->courseDetailsWin, SIGNAL(removeRequiredBook(int,int)),
             this, SLOT(removeRequiredBook(int, int)));
 
-    // TODO: connect slots for requests that the networking will signal
+    // Connect networking responses to the window controls that required the data
+    connect(this->networking, SIGNAL(courseListReceived(QUuid,int,QList<Course*>*)),
+            this->courseDetailsWin, SLOT(courseListReceived(QUuid,int,QList<Course*>*)));
+
+    connect(this->networking, SIGNAL(textbookListReceived(QUuid,int,QList<Textbook*>*)),
+            this->courseDetailsWin, SLOT(textbookListReceived(QUuid,int,QList<Textbook*>*)));
 }
 
 ManageCourseControl::~ManageCourseControl()
@@ -50,10 +56,10 @@ void ManageCourseControl::saveNewCourse(QString code, QString name)
     Course c(code, name);
 
     // TODO: we are not currently handling the response for this
-    QUuid id;
-    ctrl.addCourse(id, c);
+    QUuid reqId;
+    ctrl.addCourse(reqId, c);
 
-    this->courseDetailsWin->displayCourseList();
+    this->courseDetailsWin->refreshCourseList();
 }
 
 void ManageCourseControl::modifyCourse(int courseId,
@@ -64,20 +70,24 @@ void ManageCourseControl::modifyCourse(int courseId,
              << " code = " << courseCode
              << " name = " << courseName;
 
-    // TODO: create a modifyCourseControl to handle the request
     ModifyCourseControl ctrl(this->requestAPI);
-    QUuid uid;
 
     Course c(courseCode, courseName);
 
-    ctrl.modifyCourse(uid, c);
+    // TODO: not currently handling response
+    QUuid reqId;
+    ctrl.modifyCourse(reqId, c);
 }
 
 void ManageCourseControl::deleteCourse(int courseId)
 {
     qDebug() << "Deleting course with ID = " << courseId;
 
-    // TODO: create a deleteCourseControl object to handle request
+    DeleteCourseControl delCtrl(this->requestAPI);
+
+    // TODO: not currently handling response
+    QUuid reqId;
+    delCtrl.deleteCourse(reqId, courseId);
 }
 
 void ManageCourseControl::removeRequiredBook(int bookId, int courseId)
diff --git a/cuTPS-client/ModifyCourseControl.h b/cuTPS-client/ModifyCourseControl.h
index 9298d60..8246642 100644
--- a/cuTPS-client/ModifyCourseControl.h
+++ b/cuTPS-client/ModifyCourseControl.h
@@ -1,3 +1,12 @@
+// Class: ModifyCourseControl
+// Description:
+//   a control class for forming the appropriate
+//   request from the requestAPI using the constructed
+//   objects from the window
+// Traceability:
+//   The ModifyCourseControl class in the
+//   CourseManagement subsystem.
+
 #ifndef MODIFYCOURSECONTROL_H
 #define MODIFYCOURSECONTROL_H
 
diff --git a/cuTPS-client/ModifyItemControl.cpp b/cuTPS-client/ModifyItemControl.cpp
index 0eaa0f8..56089df 100644
--- a/cuTPS-client/ModifyItemControl.cpp
+++ b/cuTPS-client/ModifyItemControl.cpp
@@ -8,20 +8,17 @@ ModifyItemControl::ModifyItemControl(QObject *parent, ContentRequestAPI *api) :
 
 void ModifyItemControl::modifyBook(QUuid &reqId,Textbook &modTextbook)
 {
-    // TODO: make actual request to network
-    // reqId = requestAPI->modifyBook(newTextbook);
+    reqId = requestAPI->modifyBook(modTextbook);
 }
 
 void ModifyItemControl::modifyChapter(QUuid &reqId, int textId,
                                       Chapter &modChapter)
 {
-    // TODO: make actual request to network
-    // reqId = requestAPI->modifyChapter(textId, newChapter);
+    reqId = requestAPI->modifyChapter(textId, modChapter);
 }
 
-void ModifyItemControl::modifySection(QUuid &reqId, int bookId,
+void ModifyItemControl::modifySection(QUuid &reqId, int textId,
                                       int chapId, Section &modSection)
 {
-    // TODO: make actual request to network
-    // reqId = requestAPI->modifySection(textId, chapId, newSection);
+    reqId = requestAPI->modifySection(textId, chapId, modSection);
 }
diff --git a/cuTPS-client/ModifyItemControl.h b/cuTPS-client/ModifyItemControl.h
index d94747f..2023a81 100644
--- a/cuTPS-client/ModifyItemControl.h
+++ b/cuTPS-client/ModifyItemControl.h
@@ -1,3 +1,7 @@
+// Class: ModifyItemControl:
+// Description:
+//   Forms appropriate requests to the requestAPI
+//   using the reconstructed entity objects from the UI
 // traceability:
 //   ModifyItemControl class in the ContentManagement subsystem
 
-- 
1.7.9.5


From 4764b55cabe6f789b48af4a25cc984b4040febdc Mon Sep 17 00:00:00 2001
From: Kirill Kravinsky <woyorus@gmail.com>
Date: Mon, 8 Dec 2014 18:31:23 -0500
Subject: [PATCH 15/16] removeCourse API call added

---
 cuTPS-client/ClientNetworkHandler.cpp              |   28 +++++++++
 cuTPS-client/ClientNetworkHandler.h                |    5 ++
 cuTPS-common/Defines.h                             |    1 +
 cuTPS-server/ClientTaskHandling/AddUserTask.cpp    |    4 +-
 .../ClientTaskHandling/ContentMgrTaskFactory.cpp   |    2 +-
 .../ClientTaskHandling/RemoveCourseTask.cpp        |   42 +++++++++++++
 cuTPS-server/ClientTaskHandling/RemoveCourseTask.h |   14 +++++
 cuTPS-server/ClientTaskHandling/RemoveItemTask.cpp |   66 ++++++++++++++++++++
 cuTPS-server/ClientTaskHandling/RemoveItemTask.h   |   14 +++++
 cuTPS-server/ClientTaskHandling/RmItemTask.cpp     |   66 --------------------
 cuTPS-server/ClientTaskHandling/RmItemTask.h       |   17 -----
 cuTPS-server/cuTPS-server.pro                      |   10 +--
 12 files changed, 178 insertions(+), 91 deletions(-)
 create mode 100644 cuTPS-server/ClientTaskHandling/RemoveCourseTask.cpp
 create mode 100644 cuTPS-server/ClientTaskHandling/RemoveCourseTask.h
 create mode 100644 cuTPS-server/ClientTaskHandling/RemoveItemTask.cpp
 create mode 100644 cuTPS-server/ClientTaskHandling/RemoveItemTask.h
 delete mode 100644 cuTPS-server/ClientTaskHandling/RmItemTask.cpp
 delete mode 100644 cuTPS-server/ClientTaskHandling/RmItemTask.h

diff --git a/cuTPS-client/ClientNetworkHandler.cpp b/cuTPS-client/ClientNetworkHandler.cpp
index b1f4de9..00110ac 100644
--- a/cuTPS-client/ClientNetworkHandler.cpp
+++ b/cuTPS-client/ClientNetworkHandler.cpp
@@ -461,6 +461,33 @@ QUuid ClientNetworkHandler::removeSection(qint32 id)
     return requestId;
 }
 
+QUuid ClientNetworkHandler::removeCourse(qint32 id)
+{
+    ASSERT_VALID
+
+    QUuid requestId = QUuid::createUuid();
+
+    NetRequest request;
+    request.setInvocation(IRmCourse);
+    request.setRequestId(requestId);
+
+    QByteArray data;
+    QDataStream outDataStream(&data, QIODevice::WriteOnly);
+
+    outDataStream << id;
+
+    request.setData(data);
+
+    QByteArray requestBytes;
+    QDataStream outStream(&requestBytes, QIODevice::WriteOnly);
+
+    outStream << request;
+
+    connection->write(requestBytes);
+
+    return requestId;
+}
+
 QUuid ClientNetworkHandler::addStudentUser(Student& usr, QString passwd)
 {
     ASSERT_VALID
@@ -608,6 +635,7 @@ void ClientNetworkHandler::readyRead()
     case IRmBook:
     case IRmChapter:
     case IRmSection:
+    case IRmCourse:
     case IBookLink:
     case IBookUnlink:
     {
diff --git a/cuTPS-client/ClientNetworkHandler.h b/cuTPS-client/ClientNetworkHandler.h
index 2ef4391..ce63514 100644
--- a/cuTPS-client/ClientNetworkHandler.h
+++ b/cuTPS-client/ClientNetworkHandler.h
@@ -126,6 +126,11 @@ public:
     QUuid removeChapter(qint32 id);
     QUuid removeSection(qint32 id);
 
+    // What: course removal routine
+    // Available for content managers
+    // Related reply signal: updateCompleted(QUuid, int, InvocationDescriptor, qint32)
+    QUuid removeCourse(qint32 id);
+
     // CONTENT MANAGERS + ADMINISTRATOR OPERATIONS
 
     // What: add a new student user to the system.
diff --git a/cuTPS-common/Defines.h b/cuTPS-common/Defines.h
index 8caf0de..6e17c1d 100644
--- a/cuTPS-common/Defines.h
+++ b/cuTPS-common/Defines.h
@@ -29,6 +29,7 @@ enum InvocationDescriptor {
     IRmBook,
     IRmChapter,
     IRmSection,
+    IRmCourse,
     IBookLink,
     IBookUnlink,
     IGenerateReport,
diff --git a/cuTPS-server/ClientTaskHandling/AddUserTask.cpp b/cuTPS-server/ClientTaskHandling/AddUserTask.cpp
index b46ad4d..a461248 100644
--- a/cuTPS-server/ClientTaskHandling/AddUserTask.cpp
+++ b/cuTPS-server/ClientTaskHandling/AddUserTask.cpp
@@ -26,9 +26,7 @@ void AddUserTask::run()
 
     in >> usr >> pwd;
 
-    // TODO implement this
-    //ServerResponse r = server->registerUser(sessionId, usr, &usrId);
-    ServerResponse r; r.code = Fail;
+    ServerResponse r = server->registerStudentUser(sessionId, usr, pwd, &usrId);
 
     NetResponse* response = new NetResponse();
     response->setInvocation(request->getInvocation());
diff --git a/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp b/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp
index 59588c1..dc3ee7a 100644
--- a/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp
+++ b/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp
@@ -44,7 +44,7 @@ WorkerTask* ContentMgrTaskFactory::createTask(
     case IRmBook:
     case IRmChapter:
     case IRmSection: {
-        return new RmItemTask(srvInst);
+        return new RemoveItemTask(srvInst);
     }
 
     default: {
diff --git a/cuTPS-server/ClientTaskHandling/RemoveCourseTask.cpp b/cuTPS-server/ClientTaskHandling/RemoveCourseTask.cpp
new file mode 100644
index 0000000..a9d1bad
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/RemoveCourseTask.cpp
@@ -0,0 +1,42 @@
+#include "RemoveCourseTask.h"
+
+#include <QDataStream>
+#include <QDebug>
+
+#include "Defines.h"
+
+RemoveCourseTask::RemoveCourseTask(Server* srv)
+    : WorkerTask(srv)
+{
+}
+
+void RemoveCourseTask::run()
+{
+    qDebug() << "Remove item task was run";
+    qDebug() << "Doing job for session: " << sessionId
+             << "Request: " << request->getRequestId();
+
+    QDataStream in(request->getData(), QIODevice::ReadOnly);
+    qint32 courseId;
+    in >> courseId;
+
+    // TODO: Implement
+    // ServerResponse r = server->removeCourse(sessionId, courseId);
+    ServerResponse r; r.code = Fail;
+
+    NetResponse* response = new NetResponse();
+    response->setInvocation(request->getInvocation());
+    response->setRequestId(request->getRequestId());
+    response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
+    response->setSessionId(sessionId);
+
+    if (response->getResponseCode > 0)
+    {
+        QByteArray responseDataBytes;
+        QDataStream outData(&responseDataBytes, QIODevice::WriteOnly);
+        outData << courseId;
+        response->setData(responseDataBytes);
+    }
+
+    emit result(response->getResponseCode(), response);
+}
diff --git a/cuTPS-server/ClientTaskHandling/RemoveCourseTask.h b/cuTPS-server/ClientTaskHandling/RemoveCourseTask.h
new file mode 100644
index 0000000..b114497
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/RemoveCourseTask.h
@@ -0,0 +1,14 @@
+#ifndef REMOVECOURSETASK_H
+#define REMOVECOURSETASK_H
+
+#include "WorkerTask.h"
+#include "Server.h"
+
+class RemoveCourseTask : public WorkerTask
+{
+public:
+    RemoveCourseTask(Server* srv);
+    virtual void run();
+};
+
+#endif // REMOVECOURSETASK_H
diff --git a/cuTPS-server/ClientTaskHandling/RemoveItemTask.cpp b/cuTPS-server/ClientTaskHandling/RemoveItemTask.cpp
new file mode 100644
index 0000000..7b239a4
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/RemoveItemTask.cpp
@@ -0,0 +1,66 @@
+#include "RemoveItemTask.h"
+
+#include <QDebug>
+
+#include "Defines.h"
+
+using namespace TPSNetProtocolDef;
+
+RemoveItemTask::RemoveItemTask(Server* srv)
+    : WorkerTask(srv)
+{
+}
+
+void RemoveItemTask::run()
+{
+    qDebug() << "Remove item task was run";
+    qDebug() << "Doing job for session: " << sessionId
+             << "Request: " << request->getRequestId();
+
+    QDataStream in(request->getData(), QIODevice::ReadOnly);
+    qint32 itemId;
+    in >> itemId;
+
+    ServerResponse r;
+    switch (request->getInvocation())
+    {
+
+    case IRmBook:
+    {
+        // TODO: implement this
+        //r = server->removeBook(sessionId, itemId);
+        r.code = Fail;
+        break;
+    }
+
+    case IRmChapter:
+    {
+        // TODO: implement this
+        //r = server->removeChapter(sessionId, itemId);
+        r.code = Fail;
+        break;
+    }
+
+    case IRmSection:
+    {
+        // TODO: implement this
+        // r = server->removeSection(sessionId, itemId);
+        r.code = Fail;
+        break;
+    }
+
+    default:
+        r.code = Fail;
+        break;
+
+    }
+
+    NetResponse* response = new NetResponse();
+    response->setInvocation(request->getInvocation());
+    response->setRequestId(request->getRequestId());
+    response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
+    response->setSessionId(sessionId);
+
+    emit result(response->getResponseCode(), response);
+}
+
diff --git a/cuTPS-server/ClientTaskHandling/RemoveItemTask.h b/cuTPS-server/ClientTaskHandling/RemoveItemTask.h
new file mode 100644
index 0000000..16af4f5
--- /dev/null
+++ b/cuTPS-server/ClientTaskHandling/RemoveItemTask.h
@@ -0,0 +1,14 @@
+#ifndef REMOVEITEMTASK_H
+#define REMOVEITEMTASK_H
+
+#include "WorkerTask.h"
+#include "Server.h"
+
+class RemoveItemTask : public WorkerTask
+{
+public:
+    RemoveItemTask(Server* srv);
+    virtual void run();
+};
+
+#endif // REMOVEITEMTASK_H
diff --git a/cuTPS-server/ClientTaskHandling/RmItemTask.cpp b/cuTPS-server/ClientTaskHandling/RmItemTask.cpp
deleted file mode 100644
index 80fbff0..0000000
--- a/cuTPS-server/ClientTaskHandling/RmItemTask.cpp
+++ /dev/null
@@ -1,66 +0,0 @@
-#include "RmItemTask.h"
-
-#include <QDebug>
-
-#include "Defines.h"
-
-using namespace TPSNetProtocolDef;
-
-RmItemTask::RmItemTask(Server* srv)
-    : WorkerTask(srv)
-{
-}
-
-void RmItemTask::run()
-{
-    qDebug() << "Remove item task was run";
-    qDebug() << "Doing job for session: " << sessionId
-             << "Request: " << request->getRequestId();
-
-    QDataStream in(request->getData(), QIODevice::ReadOnly);
-    qint32 itemId;
-    in >> itemId;
-
-    ServerResponse r;
-    switch (request->getInvocation())
-    {
-
-    case IRmBook:
-    {
-        // TODO: implement this
-        //r = server->removeBook(sessionId, itemId);
-        r.code = Fail;
-        break;
-    }
-
-    case IRmChapter:
-    {
-        // TODO: implement this
-        //r = server->removeChapter(sessionId, itemId);
-        r.code = Fail;
-        break;
-    }
-
-    case IRmSection:
-    {
-        // TODO: implement this
-        // r = server->removeSection(sessionId, itemId);
-        r.code = Fail;
-        break;
-    }
-
-    default:
-        r.code = Fail;
-        break;
-
-    }
-
-    NetResponse* response = new NetResponse();
-    response->setInvocation(request->getInvocation());
-    response->setRequestId(request->getRequestId());
-    response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
-    response->setSessionId(sessionId);
-
-    emit result(response->getResponseCode(), response);
-}
-
diff --git a/cuTPS-server/ClientTaskHandling/RmItemTask.h b/cuTPS-server/ClientTaskHandling/RmItemTask.h
deleted file mode 100644
index 3fa7b5d..0000000
--- a/cuTPS-server/ClientTaskHandling/RmItemTask.h
+++ /dev/null
@@ -1,17 +0,0 @@
-#ifndef RMITEMTASK_H
-#define RMITEMTASK_H
-
-#include <QUuid>
-#include <QDataStream>
-
-#include "WorkerTask.h"
-#include "Server.h"
-
-class RmItemTask : public WorkerTask
-{
-public:
-    RmItemTask(Server* srv);
-    virtual void run();
-};
-
-#endif // RMITEMTASK_H
diff --git a/cuTPS-server/cuTPS-server.pro b/cuTPS-server/cuTPS-server.pro
index 65f73ff..cb88428 100644
--- a/cuTPS-server/cuTPS-server.pro
+++ b/cuTPS-server/cuTPS-server.pro
@@ -37,10 +37,11 @@ SOURCES += main.cpp \
     ClientTaskHandling/GetAllBooksTask.cpp \
     ClientTaskHandling/AddItemTask.cpp \
     ClientTaskHandling/AddUserTask.cpp \
-    ClientTaskHandling/RmItemTask.cpp \
     ClientTaskHandling/BanUserTask.cpp \
     ClientTaskHandling/GetAllCoursesTask.cpp \
-    SecurityUtils.cpp
+    SecurityUtils.cpp \
+    ClientTaskHandling/RemoveItemTask.cpp \
+    ClientTaskHandling/RemoveCourseTask.cpp
 
 HEADERS += \
     DatabaseManager.h \
@@ -65,11 +66,12 @@ HEADERS += \
     ClientTaskHandling/GetAllBooksTask.h \
     ClientTaskHandling/AddItemTask.h \
     ClientTaskHandling/AddUserTask.h \
-    ClientTaskHandling/RmItemTask.h \
     ClientTaskHandling/BanUserTask.h \
     ClientTaskHandling/GetAllCoursesTask.h \
     SecurityUtils.h \
-    Secrets.h
+    Secrets.h \
+    ClientTaskHandling/RemoveItemTask.h \
+    ClientTaskHandling/RemoveCourseTask.h
 
 
 OTHER_FILES += \
-- 
1.7.9.5


From de33b469e86cdd51db8857ab5a27795f6c73d413 Mon Sep 17 00:00:00 2001
From: Kirill Kravinsky <woyorus@gmail.com>
Date: Mon, 8 Dec 2014 18:33:45 -0500
Subject: [PATCH 16/16] oops

---
 .../ClientTaskHandling/ContentMgrTaskFactory.cpp   |    2 +-
 .../ClientTaskHandling/RemoveCourseTask.cpp        |    2 +-
 cuTPS-server/ClientTaskHandling/SUTaskFactory.cpp  |    4 ++--
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp b/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp
index dc3ee7a..cc62e25 100644
--- a/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp
+++ b/cuTPS-server/ClientTaskHandling/ContentMgrTaskFactory.cpp
@@ -4,7 +4,7 @@
 #include "GetBookDetailsTask.h"
 #include "GetAllBooksTask.h"
 #include "GetAllCoursesTask.h"
-#include "RmItemTask.h"
+#include "RemoveItemTask.h"
 
 using namespace TPSNetProtocolDef;
 
diff --git a/cuTPS-server/ClientTaskHandling/RemoveCourseTask.cpp b/cuTPS-server/ClientTaskHandling/RemoveCourseTask.cpp
index a9d1bad..2b6fc26 100644
--- a/cuTPS-server/ClientTaskHandling/RemoveCourseTask.cpp
+++ b/cuTPS-server/ClientTaskHandling/RemoveCourseTask.cpp
@@ -30,7 +30,7 @@ void RemoveCourseTask::run()
     response->setResponseCode(r.code == Fail ? 0x0 : 0x1);
     response->setSessionId(sessionId);
 
-    if (response->getResponseCode > 0)
+    if (response->getResponseCode() > 0)
     {
         QByteArray responseDataBytes;
         QDataStream outData(&responseDataBytes, QIODevice::WriteOnly);
diff --git a/cuTPS-server/ClientTaskHandling/SUTaskFactory.cpp b/cuTPS-server/ClientTaskHandling/SUTaskFactory.cpp
index 2ce92c5..2466618 100644
--- a/cuTPS-server/ClientTaskHandling/SUTaskFactory.cpp
+++ b/cuTPS-server/ClientTaskHandling/SUTaskFactory.cpp
@@ -10,7 +10,7 @@
 #include "GetAllCoursesTask.h"
 #include "AddUserTask.h"
 #include "BanUserTask.h"
-#include "RmItemTask.h"
+#include "RemoveItemTask.h"
 
 using namespace TPSNetProtocolDef;
 
@@ -74,7 +74,7 @@ WorkerTask* SUTaskFactory::createTask(
     case IRmBook:
     case IRmChapter:
     case IRmSection: {
-        return new RmItemTask(srvInst);
+        return new RemoveItemTask(srvInst);
     }
 
     default: {
-- 
1.7.9.5

